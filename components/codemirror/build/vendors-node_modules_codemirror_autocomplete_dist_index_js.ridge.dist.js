"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkridge_codemirror"] = globalThis["webpackChunkridge_codemirror"] || []).push([["vendors-node_modules_codemirror_autocomplete_dist_index_js"],{

/***/ "../../node_modules/@codemirror/autocomplete/dist/index.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@codemirror/autocomplete/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CompletionContext: () => (/* binding */ CompletionContext),\n/* harmony export */   acceptCompletion: () => (/* binding */ acceptCompletion),\n/* harmony export */   autocompletion: () => (/* binding */ autocompletion),\n/* harmony export */   clearSnippet: () => (/* binding */ clearSnippet),\n/* harmony export */   closeBrackets: () => (/* binding */ closeBrackets),\n/* harmony export */   closeBracketsKeymap: () => (/* binding */ closeBracketsKeymap),\n/* harmony export */   closeCompletion: () => (/* binding */ closeCompletion),\n/* harmony export */   completeAnyWord: () => (/* binding */ completeAnyWord),\n/* harmony export */   completeFromList: () => (/* binding */ completeFromList),\n/* harmony export */   completionKeymap: () => (/* binding */ completionKeymap),\n/* harmony export */   completionStatus: () => (/* binding */ completionStatus),\n/* harmony export */   currentCompletions: () => (/* binding */ currentCompletions),\n/* harmony export */   deleteBracketPair: () => (/* binding */ deleteBracketPair),\n/* harmony export */   hasNextSnippetField: () => (/* binding */ hasNextSnippetField),\n/* harmony export */   hasPrevSnippetField: () => (/* binding */ hasPrevSnippetField),\n/* harmony export */   ifIn: () => (/* binding */ ifIn),\n/* harmony export */   ifNotIn: () => (/* binding */ ifNotIn),\n/* harmony export */   insertBracket: () => (/* binding */ insertBracket),\n/* harmony export */   insertCompletionText: () => (/* binding */ insertCompletionText),\n/* harmony export */   moveCompletionSelection: () => (/* binding */ moveCompletionSelection),\n/* harmony export */   nextSnippetField: () => (/* binding */ nextSnippetField),\n/* harmony export */   pickedCompletion: () => (/* binding */ pickedCompletion),\n/* harmony export */   prevSnippetField: () => (/* binding */ prevSnippetField),\n/* harmony export */   selectedCompletion: () => (/* binding */ selectedCompletion),\n/* harmony export */   selectedCompletionIndex: () => (/* binding */ selectedCompletionIndex),\n/* harmony export */   setSelectedCompletion: () => (/* binding */ setSelectedCompletion),\n/* harmony export */   snippet: () => (/* binding */ snippet),\n/* harmony export */   snippetCompletion: () => (/* binding */ snippetCompletion),\n/* harmony export */   snippetKeymap: () => (/* binding */ snippetKeymap),\n/* harmony export */   startCompletion: () => (/* binding */ startCompletion)\n/* harmony export */ });\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/state */ \"../../node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/view */ \"../../node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/language */ \"../../node_modules/@codemirror/language/dist/index.js\");\n\n\n\n\n/**\nAn instance of this is passed to completion source functions.\n*/\nclass CompletionContext {\n  /**\n  Create a new completion context. (Mostly useful for testing\n  completion sources—in the editor, the extension will create\n  these for you.)\n  */\n  constructor(\n  /**\n  The editor state that the completion happens in.\n  */\n  state,\n  /**\n  The position at which the completion is happening.\n  */\n  pos,\n  /**\n  Indicates whether completion was activated explicitly, or\n  implicitly by typing. The usual way to respond to this is to\n  only return completions when either there is part of a\n  completable entity before the cursor, or `explicit` is true.\n  */\n  explicit) {\n    this.state = state;\n    this.pos = pos;\n    this.explicit = explicit;\n    /**\n    @internal\n    */\n    this.abortListeners = [];\n  }\n  /**\n  Get the extent, content, and (if there is a token) type of the\n  token before `this.pos`.\n  */\n  tokenBefore(types) {\n    let token = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(this.state).resolveInner(this.pos, -1);\n    while (token && types.indexOf(token.name) < 0) token = token.parent;\n    return token ? {\n      from: token.from,\n      to: this.pos,\n      text: this.state.sliceDoc(token.from, this.pos),\n      type: token.type\n    } : null;\n  }\n  /**\n  Get the match of the given expression directly before the\n  cursor.\n  */\n  matchBefore(expr) {\n    let line = this.state.doc.lineAt(this.pos);\n    let start = Math.max(line.from, this.pos - 250);\n    let str = line.text.slice(start - line.from, this.pos - line.from);\n    let found = str.search(ensureAnchor(expr, false));\n    return found < 0 ? null : {\n      from: start + found,\n      to: this.pos,\n      text: str.slice(found)\n    };\n  }\n  /**\n  Yields true when the query has been aborted. Can be useful in\n  asynchronous queries to avoid doing work that will be ignored.\n  */\n  get aborted() {\n    return this.abortListeners == null;\n  }\n  /**\n  Allows you to register abort handlers, which will be called when\n  the query is\n  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).\n  */\n  addEventListener(type, listener) {\n    if (type == \"abort\" && this.abortListeners) this.abortListeners.push(listener);\n  }\n}\nfunction toSet(chars) {\n  let flat = Object.keys(chars).join(\"\");\n  let words = /\\w/.test(flat);\n  if (words) flat = flat.replace(/\\w/g, \"\");\n  return `[${words ? \"\\\\w\" : \"\"}${flat.replace(/[^\\w\\s]/g, \"\\\\$&\")}]`;\n}\nfunction prefixMatch(options) {\n  let first = Object.create(null),\n    rest = Object.create(null);\n  for (let {\n    label\n  } of options) {\n    first[label[0]] = true;\n    for (let i = 1; i < label.length; i++) rest[label[i]] = true;\n  }\n  let source = toSet(first) + toSet(rest) + \"*$\";\n  return [new RegExp(\"^\" + source), new RegExp(source)];\n}\n/**\nGiven a a fixed array of options, return an autocompleter that\ncompletes them.\n*/\nfunction completeFromList(list) {\n  let options = list.map(o => typeof o == \"string\" ? {\n    label: o\n  } : o);\n  let [validFor, match] = options.every(o => /^\\w+$/.test(o.label)) ? [/\\w*$/, /\\w+$/] : prefixMatch(options);\n  return context => {\n    let token = context.matchBefore(match);\n    return token || context.explicit ? {\n      from: token ? token.from : context.pos,\n      options,\n      validFor\n    } : null;\n  };\n}\n/**\nWrap the given completion source so that it will only fire when the\ncursor is in a syntax node with one of the given names.\n*/\nfunction ifIn(nodes, source) {\n  return context => {\n    for (let pos = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {\n      if (nodes.indexOf(pos.name) > -1) return source(context);\n      if (pos.type.isTop) break;\n    }\n    return null;\n  };\n}\n/**\nWrap the given completion source so that it will not fire when the\ncursor is in a syntax node with one of the given names.\n*/\nfunction ifNotIn(nodes, source) {\n  return context => {\n    for (let pos = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {\n      if (nodes.indexOf(pos.name) > -1) return null;\n      if (pos.type.isTop) break;\n    }\n    return source(context);\n  };\n}\nclass Option {\n  constructor(completion, source, match, score) {\n    this.completion = completion;\n    this.source = source;\n    this.match = match;\n    this.score = score;\n  }\n}\nfunction cur(state) {\n  return state.selection.main.from;\n}\n// Make sure the given regexp has a $ at its end and, if `start` is\n// true, a ^ at its start.\nfunction ensureAnchor(expr, start) {\n  var _a;\n  let {\n    source\n  } = expr;\n  let addStart = start && source[0] != \"^\",\n    addEnd = source[source.length - 1] != \"$\";\n  if (!addStart && !addEnd) return expr;\n  return new RegExp(`${addStart ? \"^\" : \"\"}(?:${source})${addEnd ? \"$\" : \"\"}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : expr.ignoreCase ? \"i\" : \"\");\n}\n/**\nThis annotation is added to transactions that are produced by\npicking a completion.\n*/\nconst pickedCompletion = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Annotation.define();\n/**\nHelper function that returns a transaction spec which inserts a\ncompletion's text in the main selection range, and any other\nselection range that has the same text in front of it.\n*/\nfunction insertCompletionText(state, text, from, to) {\n  let {\n      main\n    } = state.selection,\n    fromOff = from - main.from,\n    toOff = to - main.from;\n  return Object.assign(Object.assign({}, state.changeByRange(range => {\n    if (range != main && from != to && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to)) return {\n      range\n    };\n    return {\n      changes: {\n        from: range.from + fromOff,\n        to: to == main.from ? range.to : range.from + toOff,\n        insert: text\n      },\n      range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.from + fromOff + text.length)\n    };\n  })), {\n    scrollIntoView: true,\n    userEvent: \"input.complete\"\n  });\n}\nconst SourceCache = /*@__PURE__*/new WeakMap();\nfunction asSource(source) {\n  if (!Array.isArray(source)) return source;\n  let known = SourceCache.get(source);\n  if (!known) SourceCache.set(source, known = completeFromList(source));\n  return known;\n}\nconst startCompletionEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\nconst closeCompletionEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\n\n// A pattern matcher for fuzzy completion matching. Create an instance\n// once for a pattern, and then use that to match any number of\n// completions.\nclass FuzzyMatcher {\n  constructor(pattern) {\n    this.pattern = pattern;\n    this.chars = [];\n    this.folded = [];\n    // Buffers reused by calls to `match` to track matched character\n    // positions.\n    this.any = [];\n    this.precise = [];\n    this.byWord = [];\n    this.score = 0;\n    this.matched = [];\n    for (let p = 0; p < pattern.length;) {\n      let char = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(pattern, p),\n        size = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(char);\n      this.chars.push(char);\n      let part = pattern.slice(p, p + size),\n        upper = part.toUpperCase();\n      this.folded.push((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(upper == part ? part.toLowerCase() : upper, 0));\n      p += size;\n    }\n    this.astral = pattern.length != this.chars.length;\n  }\n  ret(score, matched) {\n    this.score = score;\n    this.matched = matched;\n    return this;\n  }\n  // Matches a given word (completion) against the pattern (input).\n  // Will return a boolean indicating whether there was a match and,\n  // on success, set `this.score` to the score, `this.matched` to an\n  // array of `from, to` pairs indicating the matched parts of `word`.\n  //\n  // The score is a number that is more negative the worse the match\n  // is. See `Penalty` above.\n  match(word) {\n    if (this.pattern.length == 0) return this.ret(-100 /* Penalty.NotFull */, []);\n    if (word.length < this.pattern.length) return null;\n    let {\n      chars,\n      folded,\n      any,\n      precise,\n      byWord\n    } = this;\n    // For single-character queries, only match when they occur right\n    // at the start\n    if (chars.length == 1) {\n      let first = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(word, 0),\n        firstSize = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(first);\n      let score = firstSize == word.length ? 0 : -100 /* Penalty.NotFull */;\n      if (first == chars[0]) ;else if (first == folded[0]) score += -200 /* Penalty.CaseFold */;else return null;\n      return this.ret(score, [0, firstSize]);\n    }\n    let direct = word.indexOf(this.pattern);\n    if (direct == 0) return this.ret(word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */, [0, this.pattern.length]);\n    let len = chars.length,\n      anyTo = 0;\n    if (direct < 0) {\n      for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {\n        let next = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(word, i);\n        if (next == chars[anyTo] || next == folded[anyTo]) any[anyTo++] = i;\n        i += (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(next);\n      }\n      // No match, exit immediately\n      if (anyTo < len) return null;\n    }\n    // This tracks the extent of the precise (non-folded, not\n    // necessarily adjacent) match\n    let preciseTo = 0;\n    // Tracks whether there is a match that hits only characters that\n    // appear to be starting words. `byWordFolded` is set to true when\n    // a case folded character is encountered in such a match\n    let byWordTo = 0,\n      byWordFolded = false;\n    // If we've found a partial adjacent match, these track its state\n    let adjacentTo = 0,\n      adjacentStart = -1,\n      adjacentEnd = -1;\n    let hasLower = /[a-z]/.test(word),\n      wordAdjacent = true;\n    // Go over the option's text, scanning for the various kinds of matches\n    for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; i < e && byWordTo < len;) {\n      let next = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(word, i);\n      if (direct < 0) {\n        if (preciseTo < len && next == chars[preciseTo]) precise[preciseTo++] = i;\n        if (adjacentTo < len) {\n          if (next == chars[adjacentTo] || next == folded[adjacentTo]) {\n            if (adjacentTo == 0) adjacentStart = i;\n            adjacentEnd = i + 1;\n            adjacentTo++;\n          } else {\n            adjacentTo = 0;\n          }\n        }\n      }\n      let ch,\n        type = next < 0xff ? next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Tp.Lower */ : next >= 65 && next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */ : (ch = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.fromCodePoint)(next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */;\n      if (!i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {\n        if (chars[byWordTo] == next || folded[byWordTo] == next && (byWordFolded = true)) byWord[byWordTo++] = i;else if (byWord.length) wordAdjacent = false;\n      }\n      prevType = type;\n      i += (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(next);\n    }\n    if (byWordTo == len && byWord[0] == 0 && wordAdjacent) return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);\n    if (adjacentTo == len && adjacentStart == 0) return this.ret(-200 /* Penalty.CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* Penalty.NotFull */), [0, adjacentEnd]);\n    if (direct > -1) return this.ret(-700 /* Penalty.NotStart */ - word.length, [direct, direct + this.pattern.length]);\n    if (adjacentTo == len) return this.ret(-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, [adjacentStart, adjacentEnd]);\n    if (byWordTo == len) return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ + (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);\n    return chars.length == 2 ? null : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);\n  }\n  result(score, positions, word) {\n    let result = [],\n      i = 0;\n    for (let pos of positions) {\n      let to = pos + (this.astral ? (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(word, pos)) : 1);\n      if (i && result[i - 1] == pos) result[i - 1] = to;else {\n        result[i++] = pos;\n        result[i++] = to;\n      }\n    }\n    return this.ret(score - word.length, result);\n  }\n}\nclass StrictMatcher {\n  constructor(pattern) {\n    this.pattern = pattern;\n    this.matched = [];\n    this.score = 0;\n    this.folded = pattern.toLowerCase();\n  }\n  match(word) {\n    if (word.length < this.pattern.length) return null;\n    let start = word.slice(0, this.pattern.length);\n    let match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 /* Penalty.CaseFold */ : null;\n    if (match == null) return null;\n    this.matched = [0, start.length];\n    this.score = match + (word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */);\n    return this;\n  }\n}\nconst completionConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\n  combine(configs) {\n    return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.combineConfig)(configs, {\n      activateOnTyping: true,\n      activateOnCompletion: () => false,\n      activateOnTypingDelay: 100,\n      selectOnOpen: true,\n      override: null,\n      closeOnBlur: true,\n      maxRenderedOptions: 100,\n      defaultKeymap: true,\n      tooltipClass: () => \"\",\n      optionClass: () => \"\",\n      aboveCursor: false,\n      icons: true,\n      addToOptions: [],\n      positionInfo: defaultPositionInfo,\n      filterStrict: false,\n      compareCompletions: (a, b) => a.label.localeCompare(b.label),\n      interactionDelay: 75,\n      updateSyncTime: 100\n    }, {\n      defaultKeymap: (a, b) => a && b,\n      closeOnBlur: (a, b) => a && b,\n      icons: (a, b) => a && b,\n      tooltipClass: (a, b) => c => joinClass(a(c), b(c)),\n      optionClass: (a, b) => c => joinClass(a(c), b(c)),\n      addToOptions: (a, b) => a.concat(b),\n      filterStrict: (a, b) => a || b\n    });\n  }\n});\nfunction joinClass(a, b) {\n  return a ? b ? a + \" \" + b : a : b;\n}\nfunction defaultPositionInfo(view, list, option, info, space, tooltip) {\n  let rtl = view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.RTL,\n    left = rtl,\n    narrow = false;\n  let side = \"top\",\n    offset,\n    maxWidth;\n  let spaceLeft = list.left - space.left,\n    spaceRight = space.right - list.right;\n  let infoWidth = info.right - info.left,\n    infoHeight = info.bottom - info.top;\n  if (left && spaceLeft < Math.min(infoWidth, spaceRight)) left = false;else if (!left && spaceRight < Math.min(infoWidth, spaceLeft)) left = true;\n  if (infoWidth <= (left ? spaceLeft : spaceRight)) {\n    offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;\n    maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight);\n  } else {\n    narrow = true;\n    maxWidth = Math.min(400 /* Info.Width */, (rtl ? list.right : space.right - list.left) - 30 /* Info.Margin */);\n    let spaceBelow = space.bottom - list.bottom;\n    if (spaceBelow >= infoHeight || spaceBelow > list.top) {\n      // Below the completion\n      offset = option.bottom - list.top;\n    } else {\n      // Above it\n      side = \"bottom\";\n      offset = list.bottom - option.top;\n    }\n  }\n  let scaleY = (list.bottom - list.top) / tooltip.offsetHeight;\n  let scaleX = (list.right - list.left) / tooltip.offsetWidth;\n  return {\n    style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,\n    class: \"cm-completionInfo-\" + (narrow ? rtl ? \"left-narrow\" : \"right-narrow\" : left ? \"left\" : \"right\")\n  };\n}\nfunction optionContent(config) {\n  let content = config.addToOptions.slice();\n  if (config.icons) content.push({\n    render(completion) {\n      let icon = document.createElement(\"div\");\n      icon.classList.add(\"cm-completionIcon\");\n      if (completion.type) icon.classList.add(...completion.type.split(/\\s+/g).map(cls => \"cm-completionIcon-\" + cls));\n      icon.setAttribute(\"aria-hidden\", \"true\");\n      return icon;\n    },\n    position: 20\n  });\n  content.push({\n    render(completion, _s, _v, match) {\n      let labelElt = document.createElement(\"span\");\n      labelElt.className = \"cm-completionLabel\";\n      let label = completion.displayLabel || completion.label,\n        off = 0;\n      for (let j = 0; j < match.length;) {\n        let from = match[j++],\n          to = match[j++];\n        if (from > off) labelElt.appendChild(document.createTextNode(label.slice(off, from)));\n        let span = labelElt.appendChild(document.createElement(\"span\"));\n        span.appendChild(document.createTextNode(label.slice(from, to)));\n        span.className = \"cm-completionMatchedText\";\n        off = to;\n      }\n      if (off < label.length) labelElt.appendChild(document.createTextNode(label.slice(off)));\n      return labelElt;\n    },\n    position: 50\n  }, {\n    render(completion) {\n      if (!completion.detail) return null;\n      let detailElt = document.createElement(\"span\");\n      detailElt.className = \"cm-completionDetail\";\n      detailElt.textContent = completion.detail;\n      return detailElt;\n    },\n    position: 80\n  });\n  return content.sort((a, b) => a.position - b.position).map(a => a.render);\n}\nfunction rangeAroundSelected(total, selected, max) {\n  if (total <= max) return {\n    from: 0,\n    to: total\n  };\n  if (selected < 0) selected = 0;\n  if (selected <= total >> 1) {\n    let off = Math.floor(selected / max);\n    return {\n      from: off * max,\n      to: (off + 1) * max\n    };\n  }\n  let off = Math.floor((total - selected) / max);\n  return {\n    from: total - (off + 1) * max,\n    to: total - off * max\n  };\n}\nclass CompletionTooltip {\n  constructor(view, stateField, applyCompletion) {\n    this.view = view;\n    this.stateField = stateField;\n    this.applyCompletion = applyCompletion;\n    this.info = null;\n    this.infoDestroy = null;\n    this.placeInfoReq = {\n      read: () => this.measureInfo(),\n      write: pos => this.placeInfo(pos),\n      key: this\n    };\n    this.space = null;\n    this.currentClass = \"\";\n    let cState = view.state.field(stateField);\n    let {\n      options,\n      selected\n    } = cState.open;\n    let config = view.state.facet(completionConfig);\n    this.optionContent = optionContent(config);\n    this.optionClass = config.optionClass;\n    this.tooltipClass = config.tooltipClass;\n    this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);\n    this.dom = document.createElement(\"div\");\n    this.dom.className = \"cm-tooltip-autocomplete\";\n    this.updateTooltipClass(view.state);\n    this.dom.addEventListener(\"mousedown\", e => {\n      let {\n        options\n      } = view.state.field(stateField).open;\n      for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {\n        if (dom.nodeName == \"LI\" && (match = /-(\\d+)$/.exec(dom.id)) && +match[1] < options.length) {\n          this.applyCompletion(view, options[+match[1]]);\n          e.preventDefault();\n          return;\n        }\n      }\n    });\n    this.dom.addEventListener(\"focusout\", e => {\n      let state = view.state.field(this.stateField, false);\n      if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur && e.relatedTarget != view.contentDOM) view.dispatch({\n        effects: closeCompletionEffect.of(null)\n      });\n    });\n    this.showOptions(options, cState.id);\n  }\n  mount() {\n    this.updateSel();\n  }\n  showOptions(options, id) {\n    if (this.list) this.list.remove();\n    this.list = this.dom.appendChild(this.createListBox(options, id, this.range));\n    this.list.addEventListener(\"scroll\", () => {\n      if (this.info) this.view.requestMeasure(this.placeInfoReq);\n    });\n  }\n  update(update) {\n    var _a;\n    let cState = update.state.field(this.stateField);\n    let prevState = update.startState.field(this.stateField);\n    this.updateTooltipClass(update.state);\n    if (cState != prevState) {\n      let {\n        options,\n        selected,\n        disabled\n      } = cState.open;\n      if (!prevState.open || prevState.open.options != options) {\n        this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);\n        this.showOptions(options, cState.id);\n      }\n      this.updateSel();\n      if (disabled != ((_a = prevState.open) === null || _a === void 0 ? void 0 : _a.disabled)) this.dom.classList.toggle(\"cm-tooltip-autocomplete-disabled\", !!disabled);\n    }\n  }\n  updateTooltipClass(state) {\n    let cls = this.tooltipClass(state);\n    if (cls != this.currentClass) {\n      for (let c of this.currentClass.split(\" \")) if (c) this.dom.classList.remove(c);\n      for (let c of cls.split(\" \")) if (c) this.dom.classList.add(c);\n      this.currentClass = cls;\n    }\n  }\n  positioned(space) {\n    this.space = space;\n    if (this.info) this.view.requestMeasure(this.placeInfoReq);\n  }\n  updateSel() {\n    let cState = this.view.state.field(this.stateField),\n      open = cState.open;\n    if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {\n      this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);\n      this.showOptions(open.options, cState.id);\n    }\n    if (this.updateSelectedOption(open.selected)) {\n      this.destroyInfo();\n      let {\n        completion\n      } = open.options[open.selected];\n      let {\n        info\n      } = completion;\n      if (!info) return;\n      let infoResult = typeof info === \"string\" ? document.createTextNode(info) : info(completion);\n      if (!infoResult) return;\n      if (\"then\" in infoResult) {\n        infoResult.then(obj => {\n          if (obj && this.view.state.field(this.stateField, false) == cState) this.addInfoPane(obj, completion);\n        }).catch(e => (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.logException)(this.view.state, e, \"completion info\"));\n      } else {\n        this.addInfoPane(infoResult, completion);\n      }\n    }\n  }\n  addInfoPane(content, completion) {\n    this.destroyInfo();\n    let wrap = this.info = document.createElement(\"div\");\n    wrap.className = \"cm-tooltip cm-completionInfo\";\n    if (content.nodeType != null) {\n      wrap.appendChild(content);\n      this.infoDestroy = null;\n    } else {\n      let {\n        dom,\n        destroy\n      } = content;\n      wrap.appendChild(dom);\n      this.infoDestroy = destroy || null;\n    }\n    this.dom.appendChild(wrap);\n    this.view.requestMeasure(this.placeInfoReq);\n  }\n  updateSelectedOption(selected) {\n    let set = null;\n    for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {\n      if (opt.nodeName != \"LI\" || !opt.id) {\n        i--; // A section header\n      } else if (i == selected) {\n        if (!opt.hasAttribute(\"aria-selected\")) {\n          opt.setAttribute(\"aria-selected\", \"true\");\n          set = opt;\n        }\n      } else {\n        if (opt.hasAttribute(\"aria-selected\")) opt.removeAttribute(\"aria-selected\");\n      }\n    }\n    if (set) scrollIntoView(this.list, set);\n    return set;\n  }\n  measureInfo() {\n    let sel = this.dom.querySelector(\"[aria-selected]\");\n    if (!sel || !this.info) return null;\n    let listRect = this.dom.getBoundingClientRect();\n    let infoRect = this.info.getBoundingClientRect();\n    let selRect = sel.getBoundingClientRect();\n    let space = this.space;\n    if (!space) {\n      let win = this.dom.ownerDocument.defaultView || window;\n      space = {\n        left: 0,\n        top: 0,\n        right: win.innerWidth,\n        bottom: win.innerHeight\n      };\n    }\n    if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space.top, listRect.top) + 10) return null;\n    return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space, this.dom);\n  }\n  placeInfo(pos) {\n    if (this.info) {\n      if (pos) {\n        if (pos.style) this.info.style.cssText = pos.style;\n        this.info.className = \"cm-tooltip cm-completionInfo \" + (pos.class || \"\");\n      } else {\n        this.info.style.cssText = \"top: -1e6px\";\n      }\n    }\n  }\n  createListBox(options, id, range) {\n    const ul = document.createElement(\"ul\");\n    ul.id = id;\n    ul.setAttribute(\"role\", \"listbox\");\n    ul.setAttribute(\"aria-expanded\", \"true\");\n    ul.setAttribute(\"aria-label\", this.view.state.phrase(\"Completions\"));\n    let curSection = null;\n    for (let i = range.from; i < range.to; i++) {\n      let {\n          completion,\n          match\n        } = options[i],\n        {\n          section\n        } = completion;\n      if (section) {\n        let name = typeof section == \"string\" ? section : section.name;\n        if (name != curSection && (i > range.from || range.from == 0)) {\n          curSection = name;\n          if (typeof section != \"string\" && section.header) {\n            ul.appendChild(section.header(section));\n          } else {\n            let header = ul.appendChild(document.createElement(\"completion-section\"));\n            header.textContent = name;\n          }\n        }\n      }\n      const li = ul.appendChild(document.createElement(\"li\"));\n      li.id = id + \"-\" + i;\n      li.setAttribute(\"role\", \"option\");\n      let cls = this.optionClass(completion);\n      if (cls) li.className = cls;\n      for (let source of this.optionContent) {\n        let node = source(completion, this.view.state, this.view, match);\n        if (node) li.appendChild(node);\n      }\n    }\n    if (range.from) ul.classList.add(\"cm-completionListIncompleteTop\");\n    if (range.to < options.length) ul.classList.add(\"cm-completionListIncompleteBottom\");\n    return ul;\n  }\n  destroyInfo() {\n    if (this.info) {\n      if (this.infoDestroy) this.infoDestroy();\n      this.info.remove();\n      this.info = null;\n    }\n  }\n  destroy() {\n    this.destroyInfo();\n  }\n}\nfunction completionTooltip(stateField, applyCompletion) {\n  return view => new CompletionTooltip(view, stateField, applyCompletion);\n}\nfunction scrollIntoView(container, element) {\n  let parent = container.getBoundingClientRect();\n  let self = element.getBoundingClientRect();\n  let scaleY = parent.height / container.offsetHeight;\n  if (self.top < parent.top) container.scrollTop -= (parent.top - self.top) / scaleY;else if (self.bottom > parent.bottom) container.scrollTop += (self.bottom - parent.bottom) / scaleY;\n}\n\n// Used to pick a preferred option when two options with the same\n// label occur in the result.\nfunction score(option) {\n  return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);\n}\nfunction sortOptions(active, state) {\n  let options = [];\n  let sections = null;\n  let addOption = option => {\n    options.push(option);\n    let {\n      section\n    } = option.completion;\n    if (section) {\n      if (!sections) sections = [];\n      let name = typeof section == \"string\" ? section : section.name;\n      if (!sections.some(s => s.name == name)) sections.push(typeof section == \"string\" ? {\n        name\n      } : section);\n    }\n  };\n  let conf = state.facet(completionConfig);\n  for (let a of active) if (a.hasResult()) {\n    let getMatch = a.result.getMatch;\n    if (a.result.filter === false) {\n      for (let option of a.result.options) {\n        addOption(new Option(option, a.source, getMatch ? getMatch(option) : [], 1e9 - options.length));\n      }\n    } else {\n      let pattern = state.sliceDoc(a.from, a.to),\n        match;\n      let matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);\n      for (let option of a.result.options) if (match = matcher.match(option.label)) {\n        let matched = !option.displayLabel ? match.matched : getMatch ? getMatch(option, match.matched) : [];\n        addOption(new Option(option, a.source, matched, match.score + (option.boost || 0)));\n      }\n    }\n  }\n  if (sections) {\n    let sectionOrder = Object.create(null),\n      pos = 0;\n    let cmp = (a, b) => {\n      var _a, _b;\n      return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1);\n    };\n    for (let s of sections.sort(cmp)) {\n      pos -= 1e5;\n      sectionOrder[s.name] = pos;\n    }\n    for (let option of options) {\n      let {\n        section\n      } = option.completion;\n      if (section) option.score += sectionOrder[typeof section == \"string\" ? section : section.name];\n    }\n  }\n  let result = [],\n    prev = null;\n  let compare = conf.compareCompletions;\n  for (let opt of options.sort((a, b) => b.score - a.score || compare(a.completion, b.completion))) {\n    let cur = opt.completion;\n    if (!prev || prev.label != cur.label || prev.detail != cur.detail || prev.type != null && cur.type != null && prev.type != cur.type || prev.apply != cur.apply || prev.boost != cur.boost) result.push(opt);else if (score(opt.completion) > score(prev)) result[result.length - 1] = opt;\n    prev = opt.completion;\n  }\n  return result;\n}\nclass CompletionDialog {\n  constructor(options, attrs, tooltip, timestamp, selected, disabled) {\n    this.options = options;\n    this.attrs = attrs;\n    this.tooltip = tooltip;\n    this.timestamp = timestamp;\n    this.selected = selected;\n    this.disabled = disabled;\n  }\n  setSelected(selected, id) {\n    return selected == this.selected || selected >= this.options.length ? this : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);\n  }\n  static build(active, state, id, prev, conf) {\n    let options = sortOptions(active, state);\n    if (!options.length) {\n      return prev && active.some(a => a.state == 1 /* State.Pending */) ? new CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;\n    }\n    let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;\n    if (prev && prev.selected != selected && prev.selected != -1) {\n      let selectedValue = prev.options[prev.selected].completion;\n      for (let i = 0; i < options.length; i++) if (options[i].completion == selectedValue) {\n        selected = i;\n        break;\n      }\n    }\n    return new CompletionDialog(options, makeAttrs(id, selected), {\n      pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),\n      create: createTooltip,\n      above: conf.aboveCursor\n    }, prev ? prev.timestamp : Date.now(), selected, false);\n  }\n  map(changes) {\n    return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {\n      pos: changes.mapPos(this.tooltip.pos)\n    }), this.timestamp, this.selected, this.disabled);\n  }\n}\nclass CompletionState {\n  constructor(active, id, open) {\n    this.active = active;\n    this.id = id;\n    this.open = open;\n  }\n  static start() {\n    return new CompletionState(none, \"cm-ac-\" + Math.floor(Math.random() * 2e6).toString(36), null);\n  }\n  update(tr) {\n    let {\n        state\n      } = tr,\n      conf = state.facet(completionConfig);\n    let sources = conf.override || state.languageDataAt(\"autocomplete\", cur(state)).map(asSource);\n    let active = sources.map(source => {\n      let value = this.active.find(s => s.source == source) || new ActiveSource(source, this.active.some(a => a.state != 0 /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);\n      return value.update(tr, conf);\n    });\n    if (active.length == this.active.length && active.every((a, i) => a == this.active[i])) active = this.active;\n    let open = this.open;\n    if (open && tr.docChanged) open = open.map(tr.changes);\n    if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) || !sameResults(active, this.active)) open = CompletionDialog.build(active, state, this.id, open, conf);else if (open && open.disabled && !active.some(a => a.state == 1 /* State.Pending */)) open = null;\n    if (!open && active.every(a => a.state != 1 /* State.Pending */) && active.some(a => a.hasResult())) active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a);\n    for (let effect of tr.effects) if (effect.is(setSelectedEffect)) open = open && open.setSelected(effect.value, this.id);\n    return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);\n  }\n  get tooltip() {\n    return this.open ? this.open.tooltip : null;\n  }\n  get attrs() {\n    return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs;\n  }\n}\nfunction sameResults(a, b) {\n  if (a == b) return true;\n  for (let iA = 0, iB = 0;;) {\n    while (iA < a.length && !a[iA].hasResult) iA++;\n    while (iB < b.length && !b[iB].hasResult) iB++;\n    let endA = iA == a.length,\n      endB = iB == b.length;\n    if (endA || endB) return endA == endB;\n    if (a[iA++].result != b[iB++].result) return false;\n  }\n}\nconst baseAttrs = {\n  \"aria-autocomplete\": \"list\"\n};\nconst noAttrs = {};\nfunction makeAttrs(id, selected) {\n  let result = {\n    \"aria-autocomplete\": \"list\",\n    \"aria-haspopup\": \"listbox\",\n    \"aria-controls\": id\n  };\n  if (selected > -1) result[\"aria-activedescendant\"] = id + \"-\" + selected;\n  return result;\n}\nconst none = [];\nfunction getUserEvent(tr, conf) {\n  if (tr.isUserEvent(\"input.complete\")) {\n    let completion = tr.annotation(pickedCompletion);\n    if (completion && conf.activateOnCompletion(completion)) return \"input\";\n  }\n  return tr.isUserEvent(\"input.type\") ? \"input\" : tr.isUserEvent(\"delete.backward\") ? \"delete\" : null;\n}\nclass ActiveSource {\n  constructor(source, state, explicitPos = -1) {\n    this.source = source;\n    this.state = state;\n    this.explicitPos = explicitPos;\n  }\n  hasResult() {\n    return false;\n  }\n  update(tr, conf) {\n    let event = getUserEvent(tr, conf),\n      value = this;\n    if (event) value = value.handleUserEvent(tr, event, conf);else if (tr.docChanged) value = value.handleChange(tr);else if (tr.selection && value.state != 0 /* State.Inactive */) value = new ActiveSource(value.source, 0 /* State.Inactive */);\n    for (let effect of tr.effects) {\n      if (effect.is(startCompletionEffect)) value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value ? cur(tr.state) : -1);else if (effect.is(closeCompletionEffect)) value = new ActiveSource(value.source, 0 /* State.Inactive */);else if (effect.is(setActiveEffect)) for (let active of effect.value) if (active.source == value.source) value = active;\n    }\n    return value;\n  }\n  handleUserEvent(tr, type, conf) {\n    return type == \"delete\" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* State.Pending */);\n  }\n  handleChange(tr) {\n    return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);\n  }\n  map(changes) {\n    return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));\n  }\n}\nclass ActiveResult extends ActiveSource {\n  constructor(source, explicitPos, result, from, to) {\n    super(source, 2 /* State.Result */, explicitPos);\n    this.result = result;\n    this.from = from;\n    this.to = to;\n  }\n  hasResult() {\n    return true;\n  }\n  handleUserEvent(tr, type, conf) {\n    var _a;\n    let result = this.result;\n    if (result.map && !tr.changes.empty) result = result.map(result, tr.changes);\n    let from = tr.changes.mapPos(this.from),\n      to = tr.changes.mapPos(this.to, 1);\n    let pos = cur(tr.state);\n    if ((this.explicitPos < 0 ? pos <= from : pos < this.from) || pos > to || !result || type == \"delete\" && cur(tr.startState) == this.from) return new ActiveSource(this.source, type == \"input\" && conf.activateOnTyping ? 1 /* State.Pending */ : 0 /* State.Inactive */);\n    let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos);\n    if (checkValid(result.validFor, tr.state, from, to)) return new ActiveResult(this.source, explicitPos, result, from, to);\n    if (result.update && (result = result.update(result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0)))) return new ActiveResult(this.source, explicitPos, result, result.from, (_a = result.to) !== null && _a !== void 0 ? _a : cur(tr.state));\n    return new ActiveSource(this.source, 1 /* State.Pending */, explicitPos);\n  }\n  handleChange(tr) {\n    return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);\n  }\n  map(mapping) {\n    if (mapping.empty) return this;\n    let result = this.result.map ? this.result.map(this.result, mapping) : this.result;\n    if (!result) return new ActiveSource(this.source, 0 /* State.Inactive */);\n    return new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));\n  }\n}\nfunction checkValid(validFor, state, from, to) {\n  if (!validFor) return false;\n  let text = state.sliceDoc(from, to);\n  return typeof validFor == \"function\" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);\n}\nconst setActiveEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({\n  map(sources, mapping) {\n    return sources.map(s => s.map(mapping));\n  }\n});\nconst setSelectedEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\nconst completionState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\n  create() {\n    return CompletionState.start();\n  },\n  update(value, tr) {\n    return value.update(tr);\n  },\n  provide: f => [_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.showTooltip.from(f, val => val.tooltip), _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.contentAttributes.from(f, state => state.attrs)]\n});\nfunction applyCompletion(view, option) {\n  const apply = option.completion.apply || option.completion.label;\n  let result = view.state.field(completionState).active.find(a => a.source == option.source);\n  if (!(result instanceof ActiveResult)) return false;\n  if (typeof apply == \"string\") view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), {\n    annotations: pickedCompletion.of(option.completion)\n  }));else apply(view, option.completion, result.from, result.to);\n  return true;\n}\nconst createTooltip = /*@__PURE__*/completionTooltip(completionState, applyCompletion);\n\n/**\nReturns a command that moves the completion selection forward or\nbackward by the given amount.\n*/\nfunction moveCompletionSelection(forward, by = \"option\") {\n  return view => {\n    let cState = view.state.field(completionState, false);\n    if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay) return false;\n    let step = 1,\n      tooltip;\n    if (by == \"page\" && (tooltip = (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.getTooltip)(view, cState.open.tooltip))) step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector(\"li\").offsetHeight) - 1);\n    let {\n      length\n    } = cState.open.options;\n    let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;\n    if (selected < 0) selected = by == \"page\" ? 0 : length - 1;else if (selected >= length) selected = by == \"page\" ? length - 1 : 0;\n    view.dispatch({\n      effects: setSelectedEffect.of(selected)\n    });\n    return true;\n  };\n}\n/**\nAccept the current completion.\n*/\nconst acceptCompletion = view => {\n  let cState = view.state.field(completionState, false);\n  if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay) return false;\n  return applyCompletion(view, cState.open.options[cState.open.selected]);\n};\n/**\nExplicitly start autocompletion.\n*/\nconst startCompletion = view => {\n  let cState = view.state.field(completionState, false);\n  if (!cState) return false;\n  view.dispatch({\n    effects: startCompletionEffect.of(true)\n  });\n  return true;\n};\n/**\nClose the currently active completion.\n*/\nconst closeCompletion = view => {\n  let cState = view.state.field(completionState, false);\n  if (!cState || !cState.active.some(a => a.state != 0 /* State.Inactive */)) return false;\n  view.dispatch({\n    effects: closeCompletionEffect.of(null)\n  });\n  return true;\n};\nclass RunningQuery {\n  constructor(active, context) {\n    this.active = active;\n    this.context = context;\n    this.time = Date.now();\n    this.updates = [];\n    // Note that 'undefined' means 'not done yet', whereas 'null' means\n    // 'query returned null'.\n    this.done = undefined;\n  }\n}\nconst MaxUpdateCount = 50,\n  MinAbortTime = 1000;\nconst completionPlugin = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(class {\n  constructor(view) {\n    this.view = view;\n    this.debounceUpdate = -1;\n    this.running = [];\n    this.debounceAccept = -1;\n    this.pendingStart = false;\n    this.composing = 0 /* CompositionState.None */;\n    for (let active of view.state.field(completionState).active) if (active.state == 1 /* State.Pending */) this.startQuery(active);\n  }\n  update(update) {\n    let cState = update.state.field(completionState);\n    let conf = update.state.facet(completionConfig);\n    if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState) return;\n    let doesReset = update.transactions.some(tr => {\n      return (tr.selection || tr.docChanged) && !getUserEvent(tr, conf);\n    });\n    for (let i = 0; i < this.running.length; i++) {\n      let query = this.running[i];\n      if (doesReset || query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {\n        for (let handler of query.context.abortListeners) {\n          try {\n            handler();\n          } catch (e) {\n            (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.logException)(this.view.state, e);\n          }\n        }\n        query.context.abortListeners = null;\n        this.running.splice(i--, 1);\n      } else {\n        query.updates.push(...update.transactions);\n      }\n    }\n    if (this.debounceUpdate > -1) clearTimeout(this.debounceUpdate);\n    if (update.transactions.some(tr => tr.effects.some(e => e.is(startCompletionEffect)))) this.pendingStart = true;\n    let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;\n    this.debounceUpdate = cState.active.some(a => a.state == 1 /* State.Pending */ && !this.running.some(q => q.active.source == a.source)) ? setTimeout(() => this.startUpdate(), delay) : -1;\n    if (this.composing != 0 /* CompositionState.None */) for (let tr of update.transactions) {\n      if (getUserEvent(tr, conf) == \"input\") this.composing = 2 /* CompositionState.Changed */;else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection) this.composing = 3 /* CompositionState.ChangedAndMoved */;\n    }\n  }\n  startUpdate() {\n    this.debounceUpdate = -1;\n    this.pendingStart = false;\n    let {\n        state\n      } = this.view,\n      cState = state.field(completionState);\n    for (let active of cState.active) {\n      if (active.state == 1 /* State.Pending */ && !this.running.some(r => r.active.source == active.source)) this.startQuery(active);\n    }\n  }\n  startQuery(active) {\n    let {\n        state\n      } = this.view,\n      pos = cur(state);\n    let context = new CompletionContext(state, pos, active.explicitPos == pos);\n    let pending = new RunningQuery(active, context);\n    this.running.push(pending);\n    Promise.resolve(active.source(context)).then(result => {\n      if (!pending.context.aborted) {\n        pending.done = result || null;\n        this.scheduleAccept();\n      }\n    }, err => {\n      this.view.dispatch({\n        effects: closeCompletionEffect.of(null)\n      });\n      (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.logException)(this.view.state, err);\n    });\n  }\n  scheduleAccept() {\n    if (this.running.every(q => q.done !== undefined)) this.accept();else if (this.debounceAccept < 0) this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);\n  }\n  // For each finished query in this.running, try to create a result\n  // or, if appropriate, restart the query.\n  accept() {\n    var _a;\n    if (this.debounceAccept > -1) clearTimeout(this.debounceAccept);\n    this.debounceAccept = -1;\n    let updated = [];\n    let conf = this.view.state.facet(completionConfig);\n    for (let i = 0; i < this.running.length; i++) {\n      let query = this.running[i];\n      if (query.done === undefined) continue;\n      this.running.splice(i--, 1);\n      if (query.done) {\n        let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));\n        // Replay the transactions that happened since the start of\n        // the request and see if that preserves the result\n        for (let tr of query.updates) active = active.update(tr, conf);\n        if (active.hasResult()) {\n          updated.push(active);\n          continue;\n        }\n      }\n      let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);\n      if (current && current.state == 1 /* State.Pending */) {\n        if (query.done == null) {\n          // Explicitly failed. Should clear the pending status if it\n          // hasn't been re-set in the meantime.\n          let active = new ActiveSource(query.active.source, 0 /* State.Inactive */);\n          for (let tr of query.updates) active = active.update(tr, conf);\n          if (active.state != 1 /* State.Pending */) updated.push(active);\n        } else {\n          // Cleared by subsequent transactions. Restart.\n          this.startQuery(current);\n        }\n      }\n    }\n    if (updated.length) this.view.dispatch({\n      effects: setActiveEffect.of(updated)\n    });\n  }\n}, {\n  eventHandlers: {\n    blur(event) {\n      let state = this.view.state.field(completionState, false);\n      if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {\n        let dialog = state.open && (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.getTooltip)(this.view, state.open.tooltip);\n        if (!dialog || !dialog.dom.contains(event.relatedTarget)) setTimeout(() => this.view.dispatch({\n          effects: closeCompletionEffect.of(null)\n        }), 10);\n      }\n    },\n    compositionstart() {\n      this.composing = 1 /* CompositionState.Started */;\n    },\n    compositionend() {\n      if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {\n        // Safari fires compositionend events synchronously, possibly\n        // from inside an update, so dispatch asynchronously to avoid reentrancy\n        setTimeout(() => this.view.dispatch({\n          effects: startCompletionEffect.of(false)\n        }), 20);\n      }\n      this.composing = 0 /* CompositionState.None */;\n    }\n  }\n});\nconst windows = typeof navigator == \"object\" && /*@__PURE__*/ /Win/.test(navigator.platform);\nconst commitCharacters = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Prec.highest( /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.domEventHandlers({\n  keydown(event, view) {\n    let field = view.state.field(completionState, false);\n    if (!field || !field.open || field.open.disabled || field.open.selected < 0 || event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey) return false;\n    let option = field.open.options[field.open.selected];\n    let result = field.active.find(a => a.source == option.source);\n    let commitChars = option.completion.commitCharacters || result.result.commitCharacters;\n    if (commitChars && commitChars.indexOf(event.key) > -1) applyCompletion(view, option);\n    return false;\n  }\n}));\nconst baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.baseTheme({\n  \".cm-tooltip.cm-tooltip-autocomplete\": {\n    \"& > ul\": {\n      fontFamily: \"monospace\",\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden auto\",\n      maxWidth_fallback: \"700px\",\n      maxWidth: \"min(700px, 95vw)\",\n      minWidth: \"250px\",\n      maxHeight: \"10em\",\n      height: \"100%\",\n      listStyle: \"none\",\n      margin: 0,\n      padding: 0,\n      \"& > li, & > completion-section\": {\n        padding: \"1px 3px\",\n        lineHeight: 1.2\n      },\n      \"& > li\": {\n        overflowX: \"hidden\",\n        textOverflow: \"ellipsis\",\n        cursor: \"pointer\"\n      },\n      \"& > completion-section\": {\n        display: \"list-item\",\n        borderBottom: \"1px solid silver\",\n        paddingLeft: \"0.5em\",\n        opacity: 0.7\n      }\n    }\n  },\n  \"&light .cm-tooltip-autocomplete ul li[aria-selected]\": {\n    background: \"#17c\",\n    color: \"white\"\n  },\n  \"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\n    background: \"#777\"\n  },\n  \"&dark .cm-tooltip-autocomplete ul li[aria-selected]\": {\n    background: \"#347\",\n    color: \"white\"\n  },\n  \"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\n    background: \"#444\"\n  },\n  \".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after\": {\n    content: '\"···\"',\n    opacity: 0.5,\n    display: \"block\",\n    textAlign: \"center\"\n  },\n  \".cm-tooltip.cm-completionInfo\": {\n    position: \"absolute\",\n    padding: \"3px 9px\",\n    width: \"max-content\",\n    maxWidth: `${400 /* Info.Width */}px`,\n    boxSizing: \"border-box\"\n  },\n  \".cm-completionInfo.cm-completionInfo-left\": {\n    right: \"100%\"\n  },\n  \".cm-completionInfo.cm-completionInfo-right\": {\n    left: \"100%\"\n  },\n  \".cm-completionInfo.cm-completionInfo-left-narrow\": {\n    right: `${30 /* Info.Margin */}px`\n  },\n  \".cm-completionInfo.cm-completionInfo-right-narrow\": {\n    left: `${30 /* Info.Margin */}px`\n  },\n  \"&light .cm-snippetField\": {\n    backgroundColor: \"#00000022\"\n  },\n  \"&dark .cm-snippetField\": {\n    backgroundColor: \"#ffffff22\"\n  },\n  \".cm-snippetFieldPosition\": {\n    verticalAlign: \"text-top\",\n    width: 0,\n    height: \"1.15em\",\n    display: \"inline-block\",\n    margin: \"0 -0.7px -.7em\",\n    borderLeft: \"1.4px dotted #888\"\n  },\n  \".cm-completionMatchedText\": {\n    textDecoration: \"underline\"\n  },\n  \".cm-completionDetail\": {\n    marginLeft: \"0.5em\",\n    fontStyle: \"italic\"\n  },\n  \".cm-completionIcon\": {\n    fontSize: \"90%\",\n    width: \".8em\",\n    display: \"inline-block\",\n    textAlign: \"center\",\n    paddingRight: \".6em\",\n    opacity: \"0.6\",\n    boxSizing: \"content-box\"\n  },\n  \".cm-completionIcon-function, .cm-completionIcon-method\": {\n    \"&:after\": {\n      content: \"'ƒ'\"\n    }\n  },\n  \".cm-completionIcon-class\": {\n    \"&:after\": {\n      content: \"'○'\"\n    }\n  },\n  \".cm-completionIcon-interface\": {\n    \"&:after\": {\n      content: \"'◌'\"\n    }\n  },\n  \".cm-completionIcon-variable\": {\n    \"&:after\": {\n      content: \"'𝑥'\"\n    }\n  },\n  \".cm-completionIcon-constant\": {\n    \"&:after\": {\n      content: \"'𝐶'\"\n    }\n  },\n  \".cm-completionIcon-type\": {\n    \"&:after\": {\n      content: \"'𝑡'\"\n    }\n  },\n  \".cm-completionIcon-enum\": {\n    \"&:after\": {\n      content: \"'∪'\"\n    }\n  },\n  \".cm-completionIcon-property\": {\n    \"&:after\": {\n      content: \"'□'\"\n    }\n  },\n  \".cm-completionIcon-keyword\": {\n    \"&:after\": {\n      content: \"'🔑\\uFE0E'\"\n    } // Disable emoji rendering\n  },\n  \".cm-completionIcon-namespace\": {\n    \"&:after\": {\n      content: \"'▢'\"\n    }\n  },\n  \".cm-completionIcon-text\": {\n    \"&:after\": {\n      content: \"'abc'\",\n      fontSize: \"50%\",\n      verticalAlign: \"middle\"\n    }\n  }\n});\nclass FieldPos {\n  constructor(field, line, from, to) {\n    this.field = field;\n    this.line = line;\n    this.from = from;\n    this.to = to;\n  }\n}\nclass FieldRange {\n  constructor(field, from, to) {\n    this.field = field;\n    this.from = from;\n    this.to = to;\n  }\n  map(changes) {\n    let from = changes.mapPos(this.from, -1, _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.MapMode.TrackDel);\n    let to = changes.mapPos(this.to, 1, _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.MapMode.TrackDel);\n    return from == null || to == null ? null : new FieldRange(this.field, from, to);\n  }\n}\nclass Snippet {\n  constructor(lines, fieldPositions) {\n    this.lines = lines;\n    this.fieldPositions = fieldPositions;\n  }\n  instantiate(state, pos) {\n    let text = [],\n      lineStart = [pos];\n    let lineObj = state.doc.lineAt(pos),\n      baseIndent = /^\\s*/.exec(lineObj.text)[0];\n    for (let line of this.lines) {\n      if (text.length) {\n        let indent = baseIndent,\n          tabs = /^\\t*/.exec(line)[0].length;\n        for (let i = 0; i < tabs; i++) indent += state.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.indentUnit);\n        lineStart.push(pos + indent.length - tabs);\n        line = indent + line.slice(tabs);\n      }\n      text.push(line);\n      pos += line.length + 1;\n    }\n    let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));\n    return {\n      text,\n      ranges\n    };\n  }\n  static parse(template) {\n    let fields = [];\n    let lines = [],\n      positions = [],\n      m;\n    for (let line of template.split(/\\r\\n?|\\n/)) {\n      while (m = /[#$]\\{(?:(\\d+)(?::([^}]*))?|((?:\\\\[{}]|[^}])*))\\}/.exec(line)) {\n        let seq = m[1] ? +m[1] : null,\n          rawName = m[2] || m[3] || \"\",\n          found = -1;\n        let name = rawName.replace(/\\\\[{}]/g, m => m[1]);\n        for (let i = 0; i < fields.length; i++) {\n          if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false) found = i;\n        }\n        if (found < 0) {\n          let i = 0;\n          while (i < fields.length && (seq == null || fields[i].seq != null && fields[i].seq < seq)) i++;\n          fields.splice(i, 0, {\n            seq,\n            name\n          });\n          found = i;\n          for (let pos of positions) if (pos.field >= found) pos.field++;\n        }\n        positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));\n        line = line.slice(0, m.index) + rawName + line.slice(m.index + m[0].length);\n      }\n      line = line.replace(/\\\\([{}])/g, (_, brace, index) => {\n        for (let pos of positions) if (pos.line == lines.length && pos.from > index) {\n          pos.from--;\n          pos.to--;\n        }\n        return brace;\n      });\n      lines.push(line);\n    }\n    return new Snippet(lines, positions);\n  }\n}\nlet fieldMarker = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.widget({\n  widget: /*@__PURE__*/new class extends _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.WidgetType {\n    toDOM() {\n      let span = document.createElement(\"span\");\n      span.className = \"cm-snippetFieldPosition\";\n      return span;\n    }\n    ignoreEvent() {\n      return false;\n    }\n  }()\n});\nlet fieldRange = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.mark({\n  class: \"cm-snippetField\"\n});\nclass ActiveSnippet {\n  constructor(ranges, active) {\n    this.ranges = ranges;\n    this.active = active;\n    this.deco = _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));\n  }\n  map(changes) {\n    let ranges = [];\n    for (let r of this.ranges) {\n      let mapped = r.map(changes);\n      if (!mapped) return null;\n      ranges.push(mapped);\n    }\n    return new ActiveSnippet(ranges, this.active);\n  }\n  selectionInsideField(sel) {\n    return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));\n  }\n}\nconst setActive = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({\n  map(value, changes) {\n    return value && value.map(changes);\n  }\n});\nconst moveToField = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\nconst snippetState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\n  create() {\n    return null;\n  },\n  update(value, tr) {\n    for (let effect of tr.effects) {\n      if (effect.is(setActive)) return effect.value;\n      if (effect.is(moveToField) && value) return new ActiveSnippet(value.ranges, effect.value);\n    }\n    if (value && tr.docChanged) value = value.map(tr.changes);\n    if (value && tr.selection && !value.selectionInsideField(tr.selection)) value = null;\n    return value;\n  },\n  provide: f => _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.decorations.from(f, val => val ? val.deco : _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.none)\n});\nfunction fieldSelection(ranges, field) {\n  return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(ranges.filter(r => r.field == field).map(r => _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(r.from, r.to)));\n}\n/**\nConvert a snippet template to a function that can\n[apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written\nusing syntax like this:\n\n    \"for (let ${index} = 0; ${index} < ${end}; ${index}++) {\\n\\t${}\\n}\"\n\nEach `${}` placeholder (you may also use `#{}`) indicates a field\nthat the user can fill in. Its name, if any, will be the default\ncontent for the field.\n\nWhen the snippet is activated by calling the returned function,\nthe code is inserted at the given position. Newlines in the\ntemplate are indented by the indentation of the start line, plus\none [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after\nthe newline.\n\nOn activation, (all instances of) the first field are selected.\nThe user can move between fields with Tab and Shift-Tab as long as\nthe fields are active. Moving to the last field or moving the\ncursor out of the current field deactivates the fields.\n\nThe order of fields defaults to textual order, but you can add\nnumbers to placeholders (`${1}` or `${1:defaultText}`) to provide\na custom order.\n\nTo include a literal `{` or `}` in your template, put a backslash\nin front of it. This will be removed and the brace will not be\ninterpreted as indicating a placeholder.\n*/\nfunction snippet(template) {\n  let snippet = Snippet.parse(template);\n  return (editor, completion, from, to) => {\n    let {\n      text,\n      ranges\n    } = snippet.instantiate(editor.state, from);\n    let spec = {\n      changes: {\n        from,\n        to,\n        insert: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Text.of(text)\n      },\n      scrollIntoView: true,\n      annotations: completion ? [pickedCompletion.of(completion), _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Transaction.userEvent.of(\"input.complete\")] : undefined\n    };\n    if (ranges.length) spec.selection = fieldSelection(ranges, 0);\n    if (ranges.some(r => r.field > 0)) {\n      let active = new ActiveSnippet(ranges, 0);\n      let effects = spec.effects = [setActive.of(active)];\n      if (editor.state.field(snippetState, false) === undefined) effects.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));\n    }\n    editor.dispatch(editor.state.update(spec));\n  };\n}\nfunction moveField(dir) {\n  return ({\n    state,\n    dispatch\n  }) => {\n    let active = state.field(snippetState, false);\n    if (!active || dir < 0 && active.active == 0) return false;\n    let next = active.active + dir,\n      last = dir > 0 && !active.ranges.some(r => r.field == next + dir);\n    dispatch(state.update({\n      selection: fieldSelection(active.ranges, next),\n      effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),\n      scrollIntoView: true\n    }));\n    return true;\n  };\n}\n/**\nA command that clears the active snippet, if any.\n*/\nconst clearSnippet = ({\n  state,\n  dispatch\n}) => {\n  let active = state.field(snippetState, false);\n  if (!active) return false;\n  dispatch(state.update({\n    effects: setActive.of(null)\n  }));\n  return true;\n};\n/**\nMove to the next snippet field, if available.\n*/\nconst nextSnippetField = /*@__PURE__*/moveField(1);\n/**\nMove to the previous snippet field, if available.\n*/\nconst prevSnippetField = /*@__PURE__*/moveField(-1);\n/**\nCheck if there is an active snippet with a next field for\n`nextSnippetField` to move to.\n*/\nfunction hasNextSnippetField(state) {\n  let active = state.field(snippetState, false);\n  return !!(active && active.ranges.some(r => r.field == active.active + 1));\n}\n/**\nReturns true if there is an active snippet and a previous field\nfor `prevSnippetField` to move to.\n*/\nfunction hasPrevSnippetField(state) {\n  let active = state.field(snippetState, false);\n  return !!(active && active.active > 0);\n}\nconst defaultSnippetKeymap = [{\n  key: \"Tab\",\n  run: nextSnippetField,\n  shift: prevSnippetField\n}, {\n  key: \"Escape\",\n  run: clearSnippet\n}];\n/**\nA facet that can be used to configure the key bindings used by\nsnippets. The default binds Tab to\n[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to\n[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape\nto [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).\n*/\nconst snippetKeymap = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\n  combine(maps) {\n    return maps.length ? maps[0] : defaultSnippetKeymap;\n  }\n});\nconst addSnippetKeymap = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Prec.highest( /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));\n/**\nCreate a completion from a snippet. Returns an object with the\nproperties from `completion`, plus an `apply` function that\napplies the snippet.\n*/\nfunction snippetCompletion(template, completion) {\n  return Object.assign(Object.assign({}, completion), {\n    apply: snippet(template)\n  });\n}\nconst snippetPointerHandler = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.domEventHandlers({\n  mousedown(event, view) {\n    let active = view.state.field(snippetState, false),\n      pos;\n    if (!active || (pos = view.posAtCoords({\n      x: event.clientX,\n      y: event.clientY\n    })) == null) return false;\n    let match = active.ranges.find(r => r.from <= pos && r.to >= pos);\n    if (!match || match.field == active.active) return false;\n    view.dispatch({\n      selection: fieldSelection(active.ranges, match.field),\n      effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null),\n      scrollIntoView: true\n    });\n    return true;\n  }\n});\nfunction wordRE(wordChars) {\n  let escaped = wordChars.replace(/[\\]\\-\\\\]/g, \"\\\\$&\");\n  try {\n    return new RegExp(`[\\\\p{Alphabetic}\\\\p{Number}_${escaped}]+`, \"ug\");\n  } catch (_a) {\n    return new RegExp(`[\\w${escaped}]`, \"g\");\n  }\n}\nfunction mapRE(re, f) {\n  return new RegExp(f(re.source), re.unicode ? \"u\" : \"\");\n}\nconst wordCaches = /*@__PURE__*/Object.create(null);\nfunction wordCache(wordChars) {\n  return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap());\n}\nfunction storeWords(doc, wordRE, result, seen, ignoreAt) {\n  for (let lines = doc.iterLines(), pos = 0; !lines.next().done;) {\n    let {\n        value\n      } = lines,\n      m;\n    wordRE.lastIndex = 0;\n    while (m = wordRE.exec(value)) {\n      if (!seen[m[0]] && pos + m.index != ignoreAt) {\n        result.push({\n          type: \"text\",\n          label: m[0]\n        });\n        seen[m[0]] = true;\n        if (result.length >= 2000 /* C.MaxList */) return;\n      }\n    }\n    pos += value.length + 1;\n  }\n}\nfunction collectWords(doc, cache, wordRE, to, ignoreAt) {\n  let big = doc.length >= 1000 /* C.MinCacheLen */;\n  let cached = big && cache.get(doc);\n  if (cached) return cached;\n  let result = [],\n    seen = Object.create(null);\n  if (doc.children) {\n    let pos = 0;\n    for (let ch of doc.children) {\n      if (ch.length >= 1000 /* C.MinCacheLen */) {\n        for (let c of collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos)) {\n          if (!seen[c.label]) {\n            seen[c.label] = true;\n            result.push(c);\n          }\n        }\n      } else {\n        storeWords(ch, wordRE, result, seen, ignoreAt - pos);\n      }\n      pos += ch.length + 1;\n    }\n  } else {\n    storeWords(doc, wordRE, result, seen, ignoreAt);\n  }\n  if (big && result.length < 2000 /* C.MaxList */) cache.set(doc, result);\n  return result;\n}\n/**\nA completion source that will scan the document for words (using a\n[character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and\nreturn those as completions.\n*/\nconst completeAnyWord = context => {\n  let wordChars = context.state.languageDataAt(\"wordChars\", context.pos).join(\"\");\n  let re = wordRE(wordChars);\n  let token = context.matchBefore(mapRE(re, s => s + \"$\"));\n  if (!token && !context.explicit) return null;\n  let from = token ? token.from : context.pos;\n  let options = collectWords(context.state.doc, wordCache(wordChars), re, 50000 /* C.Range */, from);\n  return {\n    from,\n    options,\n    validFor: mapRE(re, s => \"^\" + s)\n  };\n};\nconst defaults = {\n  brackets: [\"(\", \"[\", \"{\", \"'\", '\"'],\n  before: \")]}:;>\",\n  stringPrefixes: []\n};\nconst closeBracketEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({\n  map(value, mapping) {\n    let mapped = mapping.mapPos(value, -1, _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.MapMode.TrackAfter);\n    return mapped == null ? undefined : mapped;\n  }\n});\nconst closedBracket = /*@__PURE__*/new class extends _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.RangeValue {}();\nclosedBracket.startSide = 1;\nclosedBracket.endSide = -1;\nconst bracketState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\n  create() {\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.RangeSet.empty;\n  },\n  update(value, tr) {\n    value = value.map(tr.changes);\n    if (tr.selection) {\n      let line = tr.state.doc.lineAt(tr.selection.main.head);\n      value = value.update({\n        filter: from => from >= line.from && from <= line.to\n      });\n    }\n    for (let effect of tr.effects) if (effect.is(closeBracketEffect)) value = value.update({\n      add: [closedBracket.range(effect.value, effect.value + 1)]\n    });\n    return value;\n  }\n});\n/**\nExtension to enable bracket-closing behavior. When a closeable\nbracket is typed, its closing bracket is immediately inserted\nafter the cursor. When closing a bracket directly in front of a\nclosing bracket inserted by the extension, the cursor moves over\nthat bracket.\n*/\nfunction closeBrackets() {\n  return [inputHandler, bracketState];\n}\nconst definedClosing = \"()[]{}<>\";\nfunction closing(ch) {\n  for (let i = 0; i < definedClosing.length; i += 2) if (definedClosing.charCodeAt(i) == ch) return definedClosing.charAt(i + 1);\n  return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.fromCodePoint)(ch < 128 ? ch : ch + 1);\n}\nfunction config(state, pos) {\n  return state.languageDataAt(\"closeBrackets\", pos)[0] || defaults;\n}\nconst android = typeof navigator == \"object\" && /*@__PURE__*/ /Android\\b/.test(navigator.userAgent);\nconst inputHandler = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.inputHandler.of((view, from, to, insert) => {\n  if ((android ? view.composing : view.compositionStarted) || view.state.readOnly) return false;\n  let sel = view.state.selection.main;\n  if (insert.length > 2 || insert.length == 2 && (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(insert, 0)) == 1 || from != sel.from || to != sel.to) return false;\n  let tr = insertBracket(view.state, insert);\n  if (!tr) return false;\n  view.dispatch(tr);\n  return true;\n});\n/**\nCommand that implements deleting a pair of matching brackets when\nthe cursor is between them.\n*/\nconst deleteBracketPair = ({\n  state,\n  dispatch\n}) => {\n  if (state.readOnly) return false;\n  let conf = config(state, state.selection.main.head);\n  let tokens = conf.brackets || defaults.brackets;\n  let dont = null,\n    changes = state.changeByRange(range => {\n      if (range.empty) {\n        let before = prevChar(state.doc, range.head);\n        for (let token of tokens) {\n          if (token == before && nextChar(state.doc, range.head) == closing((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(token, 0))) return {\n            changes: {\n              from: range.head - token.length,\n              to: range.head + token.length\n            },\n            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.head - token.length)\n          };\n        }\n      }\n      return {\n        range: dont = range\n      };\n    });\n  if (!dont) dispatch(state.update(changes, {\n    scrollIntoView: true,\n    userEvent: \"delete.backward\"\n  }));\n  return !dont;\n};\n/**\nClose-brackets related key bindings. Binds Backspace to\n[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).\n*/\nconst closeBracketsKeymap = [{\n  key: \"Backspace\",\n  run: deleteBracketPair\n}];\n/**\nImplements the extension's behavior on text insertion. If the\ngiven string counts as a bracket in the language around the\nselection, and replacing the selection with it requires custom\nbehavior (inserting a closing version or skipping past a\npreviously-closed bracket), this function returns a transaction\nrepresenting that custom behavior. (You only need this if you want\nto programmatically insert brackets—the\n[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will\ntake care of running this for user input.)\n*/\nfunction insertBracket(state, bracket) {\n  let conf = config(state, state.selection.main.head);\n  let tokens = conf.brackets || defaults.brackets;\n  for (let tok of tokens) {\n    let closed = closing((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(tok, 0));\n    if (bracket == tok) return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults.before);\n    if (bracket == closed && closedBracketAt(state, state.selection.main.from)) return handleClose(state, tok, closed);\n  }\n  return null;\n}\nfunction closedBracketAt(state, pos) {\n  let found = false;\n  state.field(bracketState).between(0, state.doc.length, from => {\n    if (from == pos) found = true;\n  });\n  return found;\n}\nfunction nextChar(doc, pos) {\n  let next = doc.sliceString(pos, pos + 2);\n  return next.slice(0, (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(next, 0)));\n}\nfunction prevChar(doc, pos) {\n  let prev = doc.sliceString(pos - 2, pos);\n  return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointSize)((0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(prev, 0)) == prev.length ? prev : prev.slice(1);\n}\nfunction handleOpen(state, open, close, closeBefore) {\n  let dont = null,\n    changes = state.changeByRange(range => {\n      if (!range.empty) return {\n        changes: [{\n          insert: open,\n          from: range.from\n        }, {\n          insert: close,\n          from: range.to\n        }],\n        effects: closeBracketEffect.of(range.to + open.length),\n        range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(range.anchor + open.length, range.head + open.length)\n      };\n      let next = nextChar(state.doc, range.head);\n      if (!next || /\\s/.test(next) || closeBefore.indexOf(next) > -1) return {\n        changes: {\n          insert: open + close,\n          from: range.head\n        },\n        effects: closeBracketEffect.of(range.head + open.length),\n        range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.head + open.length)\n      };\n      return {\n        range: dont = range\n      };\n    });\n  return dont ? null : state.update(changes, {\n    scrollIntoView: true,\n    userEvent: \"input.type\"\n  });\n}\nfunction handleClose(state, _open, close) {\n  let dont = null,\n    changes = state.changeByRange(range => {\n      if (range.empty && nextChar(state.doc, range.head) == close) return {\n        changes: {\n          from: range.head,\n          to: range.head + close.length,\n          insert: close\n        },\n        range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.head + close.length)\n      };\n      return dont = {\n        range\n      };\n    });\n  return dont ? null : state.update(changes, {\n    scrollIntoView: true,\n    userEvent: \"input.type\"\n  });\n}\n// Handles cases where the open and close token are the same, and\n// possibly triple quotes (as in `\"\"\"abc\"\"\"`-style quoting).\nfunction handleSame(state, token, allowTriple, config) {\n  let stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;\n  let dont = null,\n    changes = state.changeByRange(range => {\n      if (!range.empty) return {\n        changes: [{\n          insert: token,\n          from: range.from\n        }, {\n          insert: token,\n          from: range.to\n        }],\n        effects: closeBracketEffect.of(range.to + token.length),\n        range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(range.anchor + token.length, range.head + token.length)\n      };\n      let pos = range.head,\n        next = nextChar(state.doc, pos),\n        start;\n      if (next == token) {\n        if (nodeStart(state, pos)) {\n          return {\n            changes: {\n              insert: token + token,\n              from: pos\n            },\n            effects: closeBracketEffect.of(pos + token.length),\n            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(pos + token.length)\n          };\n        } else if (closedBracketAt(state, pos)) {\n          let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;\n          let content = isTriple ? token + token + token : token;\n          return {\n            changes: {\n              from: pos,\n              to: pos + content.length,\n              insert: content\n            },\n            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(pos + content.length)\n          };\n        }\n      } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && nodeStart(state, start)) {\n        return {\n          changes: {\n            insert: token + token + token + token,\n            from: pos\n          },\n          effects: closeBracketEffect.of(pos + token.length),\n          range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(pos + token.length)\n        };\n      } else if (state.charCategorizer(pos)(next) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word) {\n        if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes)) return {\n          changes: {\n            insert: token + token,\n            from: pos\n          },\n          effects: closeBracketEffect.of(pos + token.length),\n          range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(pos + token.length)\n        };\n      }\n      return {\n        range: dont = range\n      };\n    });\n  return dont ? null : state.update(changes, {\n    scrollIntoView: true,\n    userEvent: \"input.type\"\n  });\n}\nfunction nodeStart(state, pos) {\n  let tree = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(state).resolveInner(pos + 1);\n  return tree.parent && tree.from == pos;\n}\nfunction probablyInString(state, pos, quoteToken, prefixes) {\n  let node = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(state).resolveInner(pos, -1);\n  let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);\n  for (let i = 0; i < 5; i++) {\n    let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));\n    let quotePos = start.indexOf(quoteToken);\n    if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {\n      let first = node.firstChild;\n      while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {\n        if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken) return false;\n        first = first.firstChild;\n      }\n      return true;\n    }\n    let parent = node.to == pos && node.parent;\n    if (!parent) break;\n    node = parent;\n  }\n  return false;\n}\nfunction canStartStringAt(state, pos, prefixes) {\n  let charCat = state.charCategorizer(pos);\n  if (charCat(state.sliceDoc(pos - 1, pos)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word) return pos;\n  for (let prefix of prefixes) {\n    let start = pos - prefix.length;\n    if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word) return start;\n  }\n  return -1;\n}\n\n/**\nReturns an extension that enables autocompletion.\n*/\nfunction autocompletion(config = {}) {\n  return [commitCharacters, completionState, completionConfig.of(config), completionPlugin, completionKeymapExt, baseTheme];\n}\n/**\nBasic keybindings for autocompletion.\n\n - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)\n - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)\n - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`\n - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)\n*/\nconst completionKeymap = [{\n  key: \"Ctrl-Space\",\n  run: startCompletion\n}, {\n  key: \"Escape\",\n  run: closeCompletion\n}, {\n  key: \"ArrowDown\",\n  run: /*@__PURE__*/moveCompletionSelection(true)\n}, {\n  key: \"ArrowUp\",\n  run: /*@__PURE__*/moveCompletionSelection(false)\n}, {\n  key: \"PageDown\",\n  run: /*@__PURE__*/moveCompletionSelection(true, \"page\")\n}, {\n  key: \"PageUp\",\n  run: /*@__PURE__*/moveCompletionSelection(false, \"page\")\n}, {\n  key: \"Enter\",\n  run: acceptCompletion\n}];\nconst completionKeymapExt = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Prec.highest( /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));\n/**\nGet the current completion status. When completions are available,\nthis will return `\"active\"`. When completions are pending (in the\nprocess of being queried), this returns `\"pending\"`. Otherwise, it\nreturns `null`.\n*/\nfunction completionStatus(state) {\n  let cState = state.field(completionState, false);\n  return cState && cState.active.some(a => a.state == 1 /* State.Pending */) ? \"pending\" : cState && cState.active.some(a => a.state != 0 /* State.Inactive */) ? \"active\" : null;\n}\nconst completionArrayCache = /*@__PURE__*/new WeakMap();\n/**\nReturns the available completions as an array.\n*/\nfunction currentCompletions(state) {\n  var _a;\n  let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n  if (!open || open.disabled) return [];\n  let completions = completionArrayCache.get(open.options);\n  if (!completions) completionArrayCache.set(open.options, completions = open.options.map(o => o.completion));\n  return completions;\n}\n/**\nReturn the currently selected completion, if any.\n*/\nfunction selectedCompletion(state) {\n  var _a;\n  let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n  return open && !open.disabled && open.selected >= 0 ? open.options[open.selected].completion : null;\n}\n/**\nReturns the currently selected position in the active completion\nlist, or null if no completions are active.\n*/\nfunction selectedCompletionIndex(state) {\n  var _a;\n  let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n  return open && !open.disabled && open.selected >= 0 ? open.selected : null;\n}\n/**\nCreate an effect that can be attached to a transaction to change\nthe currently selected completion.\n*/\nfunction setSelectedCompletion(index) {\n  return setSelectedEffect.of(index);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2F1dG9jb21wbGV0ZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFnTztBQUNwRjtBQUM5RTs7QUFFOUQ7QUFDQTtBQUNBO0FBQ0EsTUFBTTJCLGlCQUFpQixDQUFDO0VBQ3BCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSUMsV0FBV0E7RUFDWDtBQUNKO0FBQ0E7RUFDSUMsS0FBSztFQUNMO0FBQ0o7QUFDQTtFQUNJQyxHQUFHO0VBQ0g7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lDLFFBQVEsRUFBRTtJQUNOLElBQUksQ0FBQ0YsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0MsR0FBRyxHQUFHQSxHQUFHO0lBQ2QsSUFBSSxDQUFDQyxRQUFRLEdBQUdBLFFBQVE7SUFDeEI7QUFDUjtBQUNBO0lBQ1EsSUFBSSxDQUFDQyxjQUFjLEdBQUcsRUFBRTtFQUM1QjtFQUNBO0FBQ0o7QUFDQTtBQUNBO0VBQ0lDLFdBQVdBLENBQUNDLEtBQUssRUFBRTtJQUNmLElBQUlDLEtBQUssR0FBR1YsZ0VBQVUsQ0FBQyxJQUFJLENBQUNJLEtBQUssQ0FBQyxDQUFDTyxZQUFZLENBQUMsSUFBSSxDQUFDTixHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0QsT0FBT0ssS0FBSyxJQUFJRCxLQUFLLENBQUNHLE9BQU8sQ0FBQ0YsS0FBSyxDQUFDRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQ3pDSCxLQUFLLEdBQUdBLEtBQUssQ0FBQ0ksTUFBTTtJQUN4QixPQUFPSixLQUFLLEdBQUc7TUFBRUssSUFBSSxFQUFFTCxLQUFLLENBQUNLLElBQUk7TUFBRUMsRUFBRSxFQUFFLElBQUksQ0FBQ1gsR0FBRztNQUMzQ1ksSUFBSSxFQUFFLElBQUksQ0FBQ2IsS0FBSyxDQUFDYyxRQUFRLENBQUNSLEtBQUssQ0FBQ0ssSUFBSSxFQUFFLElBQUks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QUNsQyxPQUFPdEksaUJBQWlCLENBQUNyRyxFQUFFLENBQUMyTyxLQUFLLENBQUM7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yaWRnZS1jb2RlbWlycm9yLy4uLy4uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9hdXRvY29tcGxldGUvZGlzdC9pbmRleC5qcz8wZDU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFubm90YXRpb24sIFN0YXRlRWZmZWN0LCBFZGl0b3JTZWxlY3Rpb24sIGNvZGVQb2ludEF0LCBjb2RlUG9pbnRTaXplLCBmcm9tQ29kZVBvaW50LCBGYWNldCwgY29tYmluZUNvbmZpZywgU3RhdGVGaWVsZCwgUHJlYywgVGV4dCwgVHJhbnNhY3Rpb24sIE1hcE1vZGUsIFJhbmdlVmFsdWUsIFJhbmdlU2V0LCBDaGFyQ2F0ZWdvcnkgfSBmcm9tICdAY29kZW1pcnJvci9zdGF0ZSc7XG5pbXBvcnQgeyBEaXJlY3Rpb24sIGxvZ0V4Y2VwdGlvbiwgc2hvd1Rvb2x0aXAsIEVkaXRvclZpZXcsIFZpZXdQbHVnaW4sIGdldFRvb2x0aXAsIERlY29yYXRpb24sIFdpZGdldFR5cGUsIGtleW1hcCB9IGZyb20gJ0Bjb2RlbWlycm9yL3ZpZXcnO1xuaW1wb3J0IHsgc3ludGF4VHJlZSwgaW5kZW50VW5pdCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xhbmd1YWdlJztcblxuLyoqXG5BbiBpbnN0YW5jZSBvZiB0aGlzIGlzIHBhc3NlZCB0byBjb21wbGV0aW9uIHNvdXJjZSBmdW5jdGlvbnMuXG4qL1xuY2xhc3MgQ29tcGxldGlvbkNvbnRleHQge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIG5ldyBjb21wbGV0aW9uIGNvbnRleHQuIChNb3N0bHkgdXNlZnVsIGZvciB0ZXN0aW5nXG4gICAgY29tcGxldGlvbiBzb3VyY2Vz4oCUaW4gdGhlIGVkaXRvciwgdGhlIGV4dGVuc2lvbiB3aWxsIGNyZWF0ZVxuICAgIHRoZXNlIGZvciB5b3UuKVxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIGVkaXRvciBzdGF0ZSB0aGF0IHRoZSBjb21wbGV0aW9uIGhhcHBlbnMgaW4uXG4gICAgKi9cbiAgICBzdGF0ZSwgXG4gICAgLyoqXG4gICAgVGhlIHBvc2l0aW9uIGF0IHdoaWNoIHRoZSBjb21wbGV0aW9uIGlzIGhhcHBlbmluZy5cbiAgICAqL1xuICAgIHBvcywgXG4gICAgLyoqXG4gICAgSW5kaWNhdGVzIHdoZXRoZXIgY29tcGxldGlvbiB3YXMgYWN0aXZhdGVkIGV4cGxpY2l0bHksIG9yXG4gICAgaW1wbGljaXRseSBieSB0eXBpbmcuIFRoZSB1c3VhbCB3YXkgdG8gcmVzcG9uZCB0byB0aGlzIGlzIHRvXG4gICAgb25seSByZXR1cm4gY29tcGxldGlvbnMgd2hlbiBlaXRoZXIgdGhlcmUgaXMgcGFydCBvZiBhXG4gICAgY29tcGxldGFibGUgZW50aXR5IGJlZm9yZSB0aGUgY3Vyc29yLCBvciBgZXhwbGljaXRgIGlzIHRydWUuXG4gICAgKi9cbiAgICBleHBsaWNpdCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xuICAgICAgICB0aGlzLmV4cGxpY2l0ID0gZXhwbGljaXQ7XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hYm9ydExpc3RlbmVycyA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIGV4dGVudCwgY29udGVudCwgYW5kIChpZiB0aGVyZSBpcyBhIHRva2VuKSB0eXBlIG9mIHRoZVxuICAgIHRva2VuIGJlZm9yZSBgdGhpcy5wb3NgLlxuICAgICovXG4gICAgdG9rZW5CZWZvcmUodHlwZXMpIHtcbiAgICAgICAgbGV0IHRva2VuID0gc3ludGF4VHJlZSh0aGlzLnN0YXRlKS5yZXNvbHZlSW5uZXIodGhpcy5wb3MsIC0xKTtcbiAgICAgICAgd2hpbGUgKHRva2VuICYmIHR5cGVzLmluZGV4T2YodG9rZW4ubmFtZSkgPCAwKVxuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbi5wYXJlbnQ7XG4gICAgICAgIHJldHVybiB0b2tlbiA/IHsgZnJvbTogdG9rZW4uZnJvbSwgdG86IHRoaXMucG9zLFxuICAgICAgICAgICAgdGV4dDogdGhpcy5zdGF0ZS5zbGljZURvYyh0b2tlbi5mcm9tLCB0aGlzLnBvcyksXG4gICAgICAgICAgICB0eXBlOiB0b2tlbi50eXBlIH0gOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIG1hdGNoIG9mIHRoZSBnaXZlbiBleHByZXNzaW9uIGRpcmVjdGx5IGJlZm9yZSB0aGVcbiAgICBjdXJzb3IuXG4gICAgKi9cbiAgICBtYXRjaEJlZm9yZShleHByKSB7XG4gICAgICAgIGxldCBsaW5lID0gdGhpcy5zdGF0ZS5kb2MubGluZUF0KHRoaXMucG9zKTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gTWF0aC5tYXgobGluZS5mcm9tLCB0aGlzLnBvcyAtIDI1MCk7XG4gICAgICAgIGxldCBzdHIgPSBsaW5lLnRleHQuc2xpY2Uoc3RhcnQgLSBsaW5lLmZyb20sIHRoaXMucG9zIC0gbGluZS5mcm9tKTtcbiAgICAgICAgbGV0IGZvdW5kID0gc3RyLnNlYXJjaChlbnN1cmVBbmNob3IoZXhwciwgZmFsc2UpKTtcbiAgICAgICAgcmV0dXJuIGZvdW5kIDwgMCA/IG51bGwgOiB7IGZyb206IHN0YXJ0ICsgZm91bmQsIHRvOiB0aGlzLnBvcywgdGV4dDogc3RyLnNsaWNlKGZvdW5kKSB9O1xuICAgIH1cbiAgICAvKipcbiAgICBZaWVsZHMgdHJ1ZSB3aGVuIHRoZSBxdWVyeSBoYXMgYmVlbiBhYm9ydGVkLiBDYW4gYmUgdXNlZnVsIGluXG4gICAgYXN5bmNocm9ub3VzIHF1ZXJpZXMgdG8gYXZvaWQgZG9pbmcgd29yayB0aGF0IHdpbGwgYmUgaWdub3JlZC5cbiAgICAqL1xuICAgIGdldCBhYm9ydGVkKCkgeyByZXR1cm4gdGhpcy5hYm9ydExpc3RlbmVycyA9PSBudWxsOyB9XG4gICAgLyoqXG4gICAgQWxsb3dzIHlvdSB0byByZWdpc3RlciBhYm9ydCBoYW5kbGVycywgd2hpY2ggd2lsbCBiZSBjYWxsZWQgd2hlblxuICAgIHRoZSBxdWVyeSBpc1xuICAgIFthYm9ydGVkXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2F1dG9jb21wbGV0ZS5Db21wbGV0aW9uQ29udGV4dC5hYm9ydGVkKS5cbiAgICAqL1xuICAgIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKHR5cGUgPT0gXCJhYm9ydFwiICYmIHRoaXMuYWJvcnRMaXN0ZW5lcnMpXG4gICAgICAgICAgICB0aGlzLmFib3J0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRvU2V0KGNoYXJzKSB7XG4gICAgbGV0IGZsYXQgPSBPYmplY3Qua2V5cyhjaGFycykuam9pbihcIlwiKTtcbiAgICBsZXQgd29yZHMgPSAvXFx3Ly50ZXN0KGZsYXQpO1xuICAgIGlmICh3b3JkcylcbiAgICAgICAgZmxhdCA9IGZsYXQucmVwbGFjZSgvXFx3L2csIFwiXCIpO1xuICAgIHJldHVybiBgWyR7d29yZHMgPyBcIlxcXFx3XCIgOiBcIlwifSR7ZmxhdC5yZXBsYWNlKC9bXlxcd1xcc10vZywgXCJcXFxcJCZcIil9XWA7XG59XG5mdW5jdGlvbiBwcmVmaXhNYXRjaChvcHRpb25zKSB7XG4gICAgbGV0IGZpcnN0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSwgcmVzdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChsZXQgeyBsYWJlbCB9IG9mIG9wdGlvbnMpIHtcbiAgICAgICAgZmlyc3RbbGFiZWxbMF1dID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsYWJlbC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHJlc3RbbGFiZWxbaV1dID0gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IHNvdXJjZSA9IHRvU2V0KGZpcnN0KSArIHRvU2V0KHJlc3QpICsgXCIqJFwiO1xuICAgIHJldHVybiBbbmV3IFJlZ0V4cChcIl5cIiArIHNvdXJjZSksIG5ldyBSZWdFeHAoc291cmNlKV07XG59XG4vKipcbkdpdmVuIGEgYSBmaXhlZCBhcnJheSBvZiBvcHRpb25zLCByZXR1cm4gYW4gYXV0b2NvbXBsZXRlciB0aGF0XG5jb21wbGV0ZXMgdGhlbS5cbiovXG5mdW5jdGlvbiBjb21wbGV0ZUZyb21MaXN0KGxpc3QpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGxpc3QubWFwKG8gPT4gdHlwZW9mIG8gPT0gXCJzdHJpbmdcIiA/IHsgbGFiZWw6IG8gfSA6IG8pO1xuICAgIGxldCBbdmFsaWRGb3IsIG1hdGNoXSA9IG9wdGlvbnMuZXZlcnkobyA9PiAvXlxcdyskLy50ZXN0KG8ubGFiZWwpKSA/IFsvXFx3KiQvLCAvXFx3KyQvXSA6IHByZWZpeE1hdGNoKG9wdGlvbnMpO1xuICAgIHJldHVybiAoY29udGV4dCkgPT4ge1xuICAgICAgICBsZXQgdG9rZW4gPSBjb250ZXh0Lm1hdGNoQmVmb3JlKG1hdGNoKTtcbiAgICAgICAgcmV0dXJuIHRva2VuIHx8IGNvbnRleHQuZXhwbGljaXQgPyB7IGZyb206IHRva2VuID8gdG9rZW4uZnJvbSA6IGNvbnRleHQucG9zLCBvcHRpb25zLCB2YWxpZEZvciB9IDogbnVsbDtcbiAgICB9O1xufVxuLyoqXG5XcmFwIHRoZSBnaXZlbiBjb21wbGV0aW9uIHNvdXJjZSBzbyB0aGF0IGl0IHdpbGwgb25seSBmaXJlIHdoZW4gdGhlXG5jdXJzb3IgaXMgaW4gYSBzeW50YXggbm9kZSB3aXRoIG9uZSBvZiB0aGUgZ2l2ZW4gbmFtZXMuXG4qL1xuZnVuY3Rpb24gaWZJbihub2Rlcywgc291cmNlKSB7XG4gICAgcmV0dXJuIChjb250ZXh0KSA9PiB7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IHN5bnRheFRyZWUoY29udGV4dC5zdGF0ZSkucmVzb2x2ZUlubmVyKGNvbnRleHQucG9zLCAtMSk7IHBvczsgcG9zID0gcG9zLnBhcmVudCkge1xuICAgICAgICAgICAgaWYgKG5vZGVzLmluZGV4T2YocG9zLm5hbWUpID4gLTEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZShjb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChwb3MudHlwZS5pc1RvcClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xufVxuLyoqXG5XcmFwIHRoZSBnaXZlbiBjb21wbGV0aW9uIHNvdXJjZSBzbyB0aGF0IGl0IHdpbGwgbm90IGZpcmUgd2hlbiB0aGVcbmN1cnNvciBpcyBpbiBhIHN5bnRheCBub2RlIHdpdGggb25lIG9mIHRoZSBnaXZlbiBuYW1lcy5cbiovXG5mdW5jdGlvbiBpZk5vdEluKG5vZGVzLCBzb3VyY2UpIHtcbiAgICByZXR1cm4gKGNvbnRleHQpID0+IHtcbiAgICAgICAgZm9yIChsZXQgcG9zID0gc3ludGF4VHJlZShjb250ZXh0LnN0YXRlKS5yZXNvbHZlSW5uZXIoY29udGV4dC5wb3MsIC0xKTsgcG9zOyBwb3MgPSBwb3MucGFyZW50KSB7XG4gICAgICAgICAgICBpZiAobm9kZXMuaW5kZXhPZihwb3MubmFtZSkgPiAtMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGlmIChwb3MudHlwZS5pc1RvcClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlKGNvbnRleHQpO1xuICAgIH07XG59XG5jbGFzcyBPcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbXBsZXRpb24sIHNvdXJjZSwgbWF0Y2gsIHNjb3JlKSB7XG4gICAgICAgIHRoaXMuY29tcGxldGlvbiA9IGNvbXBsZXRpb247XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLm1hdGNoID0gbWF0Y2g7XG4gICAgICAgIHRoaXMuc2NvcmUgPSBzY29yZTtcbiAgICB9XG59XG5mdW5jdGlvbiBjdXIoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLnNlbGVjdGlvbi5tYWluLmZyb207IH1cbi8vIE1ha2Ugc3VyZSB0aGUgZ2l2ZW4gcmVnZXhwIGhhcyBhICQgYXQgaXRzIGVuZCBhbmQsIGlmIGBzdGFydGAgaXNcbi8vIHRydWUsIGEgXiBhdCBpdHMgc3RhcnQuXG5mdW5jdGlvbiBlbnN1cmVBbmNob3IoZXhwciwgc3RhcnQpIHtcbiAgICB2YXIgX2E7XG4gICAgbGV0IHsgc291cmNlIH0gPSBleHByO1xuICAgIGxldCBhZGRTdGFydCA9IHN0YXJ0ICYmIHNvdXJjZVswXSAhPSBcIl5cIiwgYWRkRW5kID0gc291cmNlW3NvdXJjZS5sZW5ndGggLSAxXSAhPSBcIiRcIjtcbiAgICBpZiAoIWFkZFN0YXJ0ICYmICFhZGRFbmQpXG4gICAgICAgIHJldHVybiBleHByO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKGAke2FkZFN0YXJ0ID8gXCJeXCIgOiBcIlwifSg/OiR7c291cmNlfSkke2FkZEVuZCA/IFwiJFwiIDogXCJcIn1gLCAoX2EgPSBleHByLmZsYWdzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoZXhwci5pZ25vcmVDYXNlID8gXCJpXCIgOiBcIlwiKSk7XG59XG4vKipcblRoaXMgYW5ub3RhdGlvbiBpcyBhZGRlZCB0byB0cmFuc2FjdGlvbnMgdGhhdCBhcmUgcHJvZHVjZWQgYnlcbnBpY2tpbmcgYSBjb21wbGV0aW9uLlxuKi9cbmNvbnN0IHBpY2tlZENvbXBsZXRpb24gPSAvKkBfX1BVUkVfXyovQW5ub3RhdGlvbi5kZWZpbmUoKTtcbi8qKlxuSGVscGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHRyYW5zYWN0aW9uIHNwZWMgd2hpY2ggaW5zZXJ0cyBhXG5jb21wbGV0aW9uJ3MgdGV4dCBpbiB0aGUgbWFpbiBzZWxlY3Rpb24gcmFuZ2UsIGFuZCBhbnkgb3RoZXJcbnNlbGVjdGlvbiByYW5nZSB0aGF0IGhhcyB0aGUgc2FtZSB0ZXh0IGluIGZyb250IG9mIGl0LlxuKi9cbmZ1bmN0aW9uIGluc2VydENvbXBsZXRpb25UZXh0KHN0YXRlLCB0ZXh0LCBmcm9tLCB0bykge1xuICAgIGxldCB7IG1haW4gfSA9IHN0YXRlLnNlbGVjdGlvbiwgZnJvbU9mZiA9IGZyb20gLSBtYWluLmZyb20sIHRvT2ZmID0gdG8gLSBtYWluLmZyb207XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuY2hhbmdlQnlSYW5nZShyYW5nZSA9PiB7XG4gICAgICAgIGlmIChyYW5nZSAhPSBtYWluICYmIGZyb20gIT0gdG8gJiZcbiAgICAgICAgICAgIHN0YXRlLnNsaWNlRG9jKHJhbmdlLmZyb20gKyBmcm9tT2ZmLCByYW5nZS5mcm9tICsgdG9PZmYpICE9IHN0YXRlLnNsaWNlRG9jKGZyb20sIHRvKSlcbiAgICAgICAgICAgIHJldHVybiB7IHJhbmdlIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGFuZ2VzOiB7IGZyb206IHJhbmdlLmZyb20gKyBmcm9tT2ZmLCB0bzogdG8gPT0gbWFpbi5mcm9tID8gcmFuZ2UudG8gOiByYW5nZS5mcm9tICsgdG9PZmYsIGluc2VydDogdGV4dCB9LFxuICAgICAgICAgICAgcmFuZ2U6IEVkaXRvclNlbGVjdGlvbi5jdXJzb3IocmFuZ2UuZnJvbSArIGZyb21PZmYgKyB0ZXh0Lmxlbmd0aClcbiAgICAgICAgfTtcbiAgICB9KSksIHsgc2Nyb2xsSW50b1ZpZXc6IHRydWUsIHVzZXJFdmVudDogXCJpbnB1dC5jb21wbGV0ZVwiIH0pO1xufVxuY29uc3QgU291cmNlQ2FjaGUgPSAvKkBfX1BVUkVfXyovbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIGFzU291cmNlKHNvdXJjZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShzb3VyY2UpKVxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIGxldCBrbm93biA9IFNvdXJjZUNhY2hlLmdldChzb3VyY2UpO1xuICAgIGlmICgha25vd24pXG4gICAgICAgIFNvdXJjZUNhY2hlLnNldChzb3VyY2UsIGtub3duID0gY29tcGxldGVGcm9tTGlzdChzb3VyY2UpKTtcbiAgICByZXR1cm4ga25vd247XG59XG5jb25zdCBzdGFydENvbXBsZXRpb25FZmZlY3QgPSAvKkBfX1BVUkVfXyovU3RhdGVFZmZlY3QuZGVmaW5lKCk7XG5jb25zdCBjbG9zZUNvbXBsZXRpb25FZmZlY3QgPSAvKkBfX1BVUkVfXyovU3RhdGVFZmZlY3QuZGVmaW5lKCk7XG5cbi8vIEEgcGF0dGVybiBtYXRjaGVyIGZvciBmdXp6eSBjb21wbGV0aW9uIG1hdGNoaW5nLiBDcmVhdGUgYW4gaW5zdGFuY2Vcbi8vIG9uY2UgZm9yIGEgcGF0dGVybiwgYW5kIHRoZW4gdXNlIHRoYXQgdG8gbWF0Y2ggYW55IG51bWJlciBvZlxuLy8gY29tcGxldGlvbnMuXG5jbGFzcyBGdXp6eU1hdGNoZXIge1xuICAgIGNvbnN0cnVjdG9yKHBhdHRlcm4pIHtcbiAgICAgICAgdGhpcy5wYXR0ZXJuID0gcGF0dGVybjtcbiAgICAgICAgdGhpcy5jaGFycyA9IFtdO1xuICAgICAgICB0aGlzLmZvbGRlZCA9IFtdO1xuICAgICAgICAvLyBCdWZmZXJzIHJldXNlZCBieSBjYWxscyB0byBgbWF0Y2hgIHRvIHRyYWNrIG1hdGNoZWQgY2hhcmFjdGVyXG4gICAgICAgIC8vIHBvc2l0aW9ucy5cbiAgICAgICAgdGhpcy5hbnkgPSBbXTtcbiAgICAgICAgdGhpcy5wcmVjaXNlID0gW107XG4gICAgICAgIHRoaXMuYnlXb3JkID0gW107XG4gICAgICAgIHRoaXMuc2NvcmUgPSAwO1xuICAgICAgICB0aGlzLm1hdGNoZWQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBwYXR0ZXJuLmxlbmd0aDspIHtcbiAgICAgICAgICAgIGxldCBjaGFyID0gY29kZVBvaW50QXQocGF0dGVybiwgcCksIHNpemUgPSBjb2RlUG9pbnRTaXplKGNoYXIpO1xuICAgICAgICAgICAgdGhpcy5jaGFycy5wdXNoKGNoYXIpO1xuICAgICAgICAgICAgbGV0IHBhcnQgPSBwYXR0ZXJuLnNsaWNlKHAsIHAgKyBzaXplKSwgdXBwZXIgPSBwYXJ0LnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB0aGlzLmZvbGRlZC5wdXNoKGNvZGVQb2ludEF0KHVwcGVyID09IHBhcnQgPyBwYXJ0LnRvTG93ZXJDYXNlKCkgOiB1cHBlciwgMCkpO1xuICAgICAgICAgICAgcCArPSBzaXplO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXN0cmFsID0gcGF0dGVybi5sZW5ndGggIT0gdGhpcy5jaGFycy5sZW5ndGg7XG4gICAgfVxuICAgIHJldChzY29yZSwgbWF0Y2hlZCkge1xuICAgICAgICB0aGlzLnNjb3JlID0gc2NvcmU7XG4gICAgICAgIHRoaXMubWF0Y2hlZCA9IG1hdGNoZWQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBNYXRjaGVzIGEgZ2l2ZW4gd29yZCAoY29tcGxldGlvbikgYWdhaW5zdCB0aGUgcGF0dGVybiAoaW5wdXQpLlxuICAgIC8vIFdpbGwgcmV0dXJuIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlcmUgd2FzIGEgbWF0Y2ggYW5kLFxuICAgIC8vIG9uIHN1Y2Nlc3MsIHNldCBgdGhpcy5zY29yZWAgdG8gdGhlIHNjb3JlLCBgdGhpcy5tYXRjaGVkYCB0byBhblxuICAgIC8vIGFycmF5IG9mIGBmcm9tLCB0b2AgcGFpcnMgaW5kaWNhdGluZyB0aGUgbWF0Y2hlZCBwYXJ0cyBvZiBgd29yZGAuXG4gICAgLy9cbiAgICAvLyBUaGUgc2NvcmUgaXMgYSBudW1iZXIgdGhhdCBpcyBtb3JlIG5lZ2F0aXZlIHRoZSB3b3JzZSB0aGUgbWF0Y2hcbiAgICAvLyBpcy4gU2VlIGBQZW5hbHR5YCBhYm92ZS5cbiAgICBtYXRjaCh3b3JkKSB7XG4gICAgICAgIGlmICh0aGlzLnBhdHRlcm4ubGVuZ3RoID09IDApXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXQoLTEwMCAvKiBQZW5hbHR5Lk5vdEZ1bGwgKi8sIFtdKTtcbiAgICAgICAgaWYgKHdvcmQubGVuZ3RoIDwgdGhpcy5wYXR0ZXJuLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgeyBjaGFycywgZm9sZGVkLCBhbnksIHByZWNpc2UsIGJ5V29yZCB9ID0gdGhpcztcbiAgICAgICAgLy8gRm9yIHNpbmdsZS1jaGFyYWN0ZXIgcXVlcmllcywgb25seSBtYXRjaCB3aGVuIHRoZXkgb2NjdXIgcmlnaHRcbiAgICAgICAgLy8gYXQgdGhlIHN0YXJ0XG4gICAgICAgIGlmIChjaGFycy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgbGV0IGZpcnN0ID0gY29kZVBvaW50QXQod29yZCwgMCksIGZpcnN0U2l6ZSA9IGNvZGVQb2ludFNpemUoZmlyc3QpO1xuICAgICAgICAgICAgbGV0IHNjb3JlID0gZmlyc3RTaXplID09IHdvcmQubGVuZ3RoID8gMCA6IC0xMDAgLyogUGVuYWx0eS5Ob3RGdWxsICovO1xuICAgICAgICAgICAgaWYgKGZpcnN0ID09IGNoYXJzWzBdKSA7XG4gICAgICAgICAgICBlbHNlIGlmIChmaXJzdCA9PSBmb2xkZWRbMF0pXG4gICAgICAgICAgICAgICAgc2NvcmUgKz0gLTIwMCAvKiBQZW5hbHR5LkNhc2VGb2xkICovO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV0KHNjb3JlLCBbMCwgZmlyc3RTaXplXSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRpcmVjdCA9IHdvcmQuaW5kZXhPZih0aGlzLnBhdHRlcm4pO1xuICAgICAgICBpZiAoZGlyZWN0ID09IDApXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXQod29yZC5sZW5ndGggPT0gdGhpcy5wYXR0ZXJuLmxlbmd0aCA/IDAgOiAtMTAwIC8qIFBlbmFsdHkuTm90RnVsbCAqLywgWzAsIHRoaXMucGF0dGVybi5sZW5ndGhdKTtcbiAgICAgICAgbGV0IGxlbiA9IGNoYXJzLmxlbmd0aCwgYW55VG8gPSAwO1xuICAgICAgICBpZiAoZGlyZWN0IDwgMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGUgPSBNYXRoLm1pbih3b3JkLmxlbmd0aCwgMjAwKTsgaSA8IGUgJiYgYW55VG8gPCBsZW47KSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSBjb2RlUG9pbnRBdCh3b3JkLCBpKTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dCA9PSBjaGFyc1thbnlUb10gfHwgbmV4dCA9PSBmb2xkZWRbYW55VG9dKVxuICAgICAgICAgICAgICAgICAgICBhbnlbYW55VG8rK10gPSBpO1xuICAgICAgICAgICAgICAgIGkgKz0gY29kZVBvaW50U2l6ZShuZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5vIG1hdGNoLCBleGl0IGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBpZiAoYW55VG8gPCBsZW4pXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhpcyB0cmFja3MgdGhlIGV4dGVudCBvZiB0aGUgcHJlY2lzZSAobm9uLWZvbGRlZCwgbm90XG4gICAgICAgIC8vIG5lY2Vzc2FyaWx5IGFkamFjZW50KSBtYXRjaFxuICAgICAgICBsZXQgcHJlY2lzZVRvID0gMDtcbiAgICAgICAgLy8gVHJhY2tzIHdoZXRoZXIgdGhlcmUgaXMgYSBtYXRjaCB0aGF0IGhpdHMgb25seSBjaGFyYWN0ZXJzIHRoYXRcbiAgICAgICAgLy8gYXBwZWFyIHRvIGJlIHN0YXJ0aW5nIHdvcmRzLiBgYnlXb3JkRm9sZGVkYCBpcyBzZXQgdG8gdHJ1ZSB3aGVuXG4gICAgICAgIC8vIGEgY2FzZSBmb2xkZWQgY2hhcmFjdGVyIGlzIGVuY291bnRlcmVkIGluIHN1Y2ggYSBtYXRjaFxuICAgICAgICBsZXQgYnlXb3JkVG8gPSAwLCBieVdvcmRGb2xkZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gSWYgd2UndmUgZm91bmQgYSBwYXJ0aWFsIGFkamFjZW50IG1hdGNoLCB0aGVzZSB0cmFjayBpdHMgc3RhdGVcbiAgICAgICAgbGV0IGFkamFjZW50VG8gPSAwLCBhZGphY2VudFN0YXJ0ID0gLTEsIGFkamFjZW50RW5kID0gLTE7XG4gICAgICAgIGxldCBoYXNMb3dlciA9IC9bYS16XS8udGVzdCh3b3JkKSwgd29yZEFkamFjZW50ID0gdHJ1ZTtcbiAgICAgICAgLy8gR28gb3ZlciB0aGUgb3B0aW9uJ3MgdGV4dCwgc2Nhbm5pbmcgZm9yIHRoZSB2YXJpb3VzIGtpbmRzIG9mIG1hdGNoZXNcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGUgPSBNYXRoLm1pbih3b3JkLmxlbmd0aCwgMjAwKSwgcHJldlR5cGUgPSAwIC8qIFRwLk5vbldvcmQgKi87IGkgPCBlICYmIGJ5V29yZFRvIDwgbGVuOykge1xuICAgICAgICAgICAgbGV0IG5leHQgPSBjb2RlUG9pbnRBdCh3b3JkLCBpKTtcbiAgICAgICAgICAgIGlmIChkaXJlY3QgPCAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByZWNpc2VUbyA8IGxlbiAmJiBuZXh0ID09IGNoYXJzW3ByZWNpc2VUb10pXG4gICAgICAgICAgICAgICAgICAgIHByZWNpc2VbcHJlY2lzZVRvKytdID0gaTtcbiAgICAgICAgICAgICAgICBpZiAoYWRqYWNlbnRUbyA8IGxlbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCA9PSBjaGFyc1thZGphY2VudFRvXSB8fCBuZXh0ID09IGZvbGRlZFthZGphY2VudFRvXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkamFjZW50VG8gPT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGphY2VudFN0YXJ0ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkamFjZW50RW5kID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGphY2VudFRvKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGphY2VudFRvID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBjaCwgdHlwZSA9IG5leHQgPCAweGZmXG4gICAgICAgICAgICAgICAgPyAobmV4dCA+PSA0OCAmJiBuZXh0IDw9IDU3IHx8IG5leHQgPj0gOTcgJiYgbmV4dCA8PSAxMjIgPyAyIC8qIFRwLkxvd2VyICovIDogbmV4dCA+PSA2NSAmJiBuZXh0IDw9IDkwID8gMSAvKiBUcC5VcHBlciAqLyA6IDAgLyogVHAuTm9uV29yZCAqLylcbiAgICAgICAgICAgICAgICA6ICgoY2ggPSBmcm9tQ29kZVBvaW50KG5leHQpKSAhPSBjaC50b0xvd2VyQ2FzZSgpID8gMSAvKiBUcC5VcHBlciAqLyA6IGNoICE9IGNoLnRvVXBwZXJDYXNlKCkgPyAyIC8qIFRwLkxvd2VyICovIDogMCAvKiBUcC5Ob25Xb3JkICovKTtcbiAgICAgICAgICAgIGlmICghaSB8fCB0eXBlID09IDEgLyogVHAuVXBwZXIgKi8gJiYgaGFzTG93ZXIgfHwgcHJldlR5cGUgPT0gMCAvKiBUcC5Ob25Xb3JkICovICYmIHR5cGUgIT0gMCAvKiBUcC5Ob25Xb3JkICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJzW2J5V29yZFRvXSA9PSBuZXh0IHx8IChmb2xkZWRbYnlXb3JkVG9dID09IG5leHQgJiYgKGJ5V29yZEZvbGRlZCA9IHRydWUpKSlcbiAgICAgICAgICAgICAgICAgICAgYnlXb3JkW2J5V29yZFRvKytdID0gaTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChieVdvcmQubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB3b3JkQWRqYWNlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZUeXBlID0gdHlwZTtcbiAgICAgICAgICAgIGkgKz0gY29kZVBvaW50U2l6ZShuZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnlXb3JkVG8gPT0gbGVuICYmIGJ5V29yZFswXSA9PSAwICYmIHdvcmRBZGphY2VudClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc3VsdCgtMTAwIC8qIFBlbmFsdHkuQnlXb3JkICovICsgKGJ5V29yZEZvbGRlZCA/IC0yMDAgLyogUGVuYWx0eS5DYXNlRm9sZCAqLyA6IDApLCBieVdvcmQsIHdvcmQpO1xuICAgICAgICBpZiAoYWRqYWNlbnRUbyA9PSBsZW4gJiYgYWRqYWNlbnRTdGFydCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV0KC0yMDAgLyogUGVuYWx0eS5DYXNlRm9sZCAqLyAtIHdvcmQubGVuZ3RoICsgKGFkamFjZW50RW5kID09IHdvcmQubGVuZ3RoID8gMCA6IC0xMDAgLyogUGVuYWx0eS5Ob3RGdWxsICovKSwgWzAsIGFkamFjZW50RW5kXSk7XG4gICAgICAgIGlmIChkaXJlY3QgPiAtMSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJldCgtNzAwIC8qIFBlbmFsdHkuTm90U3RhcnQgKi8gLSB3b3JkLmxlbmd0aCwgW2RpcmVjdCwgZGlyZWN0ICsgdGhpcy5wYXR0ZXJuLmxlbmd0aF0pO1xuICAgICAgICBpZiAoYWRqYWNlbnRUbyA9PSBsZW4pXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXQoLTIwMCAvKiBQZW5hbHR5LkNhc2VGb2xkICovICsgLTcwMCAvKiBQZW5hbHR5Lk5vdFN0YXJ0ICovIC0gd29yZC5sZW5ndGgsIFthZGphY2VudFN0YXJ0LCBhZGphY2VudEVuZF0pO1xuICAgICAgICBpZiAoYnlXb3JkVG8gPT0gbGVuKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0KC0xMDAgLyogUGVuYWx0eS5CeVdvcmQgKi8gKyAoYnlXb3JkRm9sZGVkID8gLTIwMCAvKiBQZW5hbHR5LkNhc2VGb2xkICovIDogMCkgKyAtNzAwIC8qIFBlbmFsdHkuTm90U3RhcnQgKi8gK1xuICAgICAgICAgICAgICAgICh3b3JkQWRqYWNlbnQgPyAwIDogLTExMDAgLyogUGVuYWx0eS5HYXAgKi8pLCBieVdvcmQsIHdvcmQpO1xuICAgICAgICByZXR1cm4gY2hhcnMubGVuZ3RoID09IDIgPyBudWxsXG4gICAgICAgICAgICA6IHRoaXMucmVzdWx0KChhbnlbMF0gPyAtNzAwIC8qIFBlbmFsdHkuTm90U3RhcnQgKi8gOiAwKSArIC0yMDAgLyogUGVuYWx0eS5DYXNlRm9sZCAqLyArIC0xMTAwIC8qIFBlbmFsdHkuR2FwICovLCBhbnksIHdvcmQpO1xuICAgIH1cbiAgICByZXN1bHQoc2NvcmUsIHBvc2l0aW9ucywgd29yZCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gW10sIGkgPSAwO1xuICAgICAgICBmb3IgKGxldCBwb3Mgb2YgcG9zaXRpb25zKSB7XG4gICAgICAgICAgICBsZXQgdG8gPSBwb3MgKyAodGhpcy5hc3RyYWwgPyBjb2RlUG9pbnRTaXplKGNvZGVQb2ludEF0KHdvcmQsIHBvcykpIDogMSk7XG4gICAgICAgICAgICBpZiAoaSAmJiByZXN1bHRbaSAtIDFdID09IHBvcylcbiAgICAgICAgICAgICAgICByZXN1bHRbaSAtIDFdID0gdG87XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbaSsrXSA9IHBvcztcbiAgICAgICAgICAgICAgICByZXN1bHRbaSsrXSA9IHRvO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJldChzY29yZSAtIHdvcmQubGVuZ3RoLCByZXN1bHQpO1xuICAgIH1cbn1cbmNsYXNzIFN0cmljdE1hdGNoZXIge1xuICAgIGNvbnN0cnVjdG9yKHBhdHRlcm4pIHtcbiAgICAgICAgdGhpcy5wYXR0ZXJuID0gcGF0dGVybjtcbiAgICAgICAgdGhpcy5tYXRjaGVkID0gW107XG4gICAgICAgIHRoaXMuc2NvcmUgPSAwO1xuICAgICAgICB0aGlzLmZvbGRlZCA9IHBhdHRlcm4udG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgbWF0Y2god29yZCkge1xuICAgICAgICBpZiAod29yZC5sZW5ndGggPCB0aGlzLnBhdHRlcm4ubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCBzdGFydCA9IHdvcmQuc2xpY2UoMCwgdGhpcy5wYXR0ZXJuLmxlbmd0aCk7XG4gICAgICAgIGxldCBtYXRjaCA9IHN0YXJ0ID09IHRoaXMucGF0dGVybiA/IDAgOiBzdGFydC50b0xvd2VyQ2FzZSgpID09IHRoaXMuZm9sZGVkID8gLTIwMCAvKiBQZW5hbHR5LkNhc2VGb2xkICovIDogbnVsbDtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgdGhpcy5tYXRjaGVkID0gWzAsIHN0YXJ0Lmxlbmd0aF07XG4gICAgICAgIHRoaXMuc2NvcmUgPSBtYXRjaCArICh3b3JkLmxlbmd0aCA9PSB0aGlzLnBhdHRlcm4ubGVuZ3RoID8gMCA6IC0xMDAgLyogUGVuYWx0eS5Ob3RGdWxsICovKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG5jb25zdCBjb21wbGV0aW9uQ29uZmlnID0gLypAX19QVVJFX18qL0ZhY2V0LmRlZmluZSh7XG4gICAgY29tYmluZShjb25maWdzKSB7XG4gICAgICAgIHJldHVybiBjb21iaW5lQ29uZmlnKGNvbmZpZ3MsIHtcbiAgICAgICAgICAgIGFjdGl2YXRlT25UeXBpbmc6IHRydWUsXG4gICAgICAgICAgICBhY3RpdmF0ZU9uQ29tcGxldGlvbjogKCkgPT4gZmFsc2UsXG4gICAgICAgICAgICBhY3RpdmF0ZU9uVHlwaW5nRGVsYXk6IDEwMCxcbiAgICAgICAgICAgIHNlbGVjdE9uT3BlbjogdHJ1ZSxcbiAgICAgICAgICAgIG92ZXJyaWRlOiBudWxsLFxuICAgICAgICAgICAgY2xvc2VPbkJsdXI6IHRydWUsXG4gICAgICAgICAgICBtYXhSZW5kZXJlZE9wdGlvbnM6IDEwMCxcbiAgICAgICAgICAgIGRlZmF1bHRLZXltYXA6IHRydWUsXG4gICAgICAgICAgICB0b29sdGlwQ2xhc3M6ICgpID0+IFwiXCIsXG4gICAgICAgICAgICBvcHRpb25DbGFzczogKCkgPT4gXCJcIixcbiAgICAgICAgICAgIGFib3ZlQ3Vyc29yOiBmYWxzZSxcbiAgICAgICAgICAgIGljb25zOiB0cnVlLFxuICAgICAgICAgICAgYWRkVG9PcHRpb25zOiBbXSxcbiAgICAgICAgICAgIHBvc2l0aW9uSW5mbzogZGVmYXVsdFBvc2l0aW9uSW5mbyxcbiAgICAgICAgICAgIGZpbHRlclN0cmljdDogZmFsc2UsXG4gICAgICAgICAgICBjb21wYXJlQ29tcGxldGlvbnM6IChhLCBiKSA9PiBhLmxhYmVsLmxvY2FsZUNvbXBhcmUoYi5sYWJlbCksXG4gICAgICAgICAgICBpbnRlcmFjdGlvbkRlbGF5OiA3NSxcbiAgICAgICAgICAgIHVwZGF0ZVN5bmNUaW1lOiAxMDBcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdEtleW1hcDogKGEsIGIpID0+IGEgJiYgYixcbiAgICAgICAgICAgIGNsb3NlT25CbHVyOiAoYSwgYikgPT4gYSAmJiBiLFxuICAgICAgICAgICAgaWNvbnM6IChhLCBiKSA9PiBhICYmIGIsXG4gICAgICAgICAgICB0b29sdGlwQ2xhc3M6IChhLCBiKSA9PiBjID0+IGpvaW5DbGFzcyhhKGMpLCBiKGMpKSxcbiAgICAgICAgICAgIG9wdGlvbkNsYXNzOiAoYSwgYikgPT4gYyA9PiBqb2luQ2xhc3MoYShjKSwgYihjKSksXG4gICAgICAgICAgICBhZGRUb09wdGlvbnM6IChhLCBiKSA9PiBhLmNvbmNhdChiKSxcbiAgICAgICAgICAgIGZpbHRlclN0cmljdDogKGEsIGIpID0+IGEgfHwgYixcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBqb2luQ2xhc3MoYSwgYikge1xuICAgIHJldHVybiBhID8gYiA/IGEgKyBcIiBcIiArIGIgOiBhIDogYjtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRQb3NpdGlvbkluZm8odmlldywgbGlzdCwgb3B0aW9uLCBpbmZvLCBzcGFjZSwgdG9vbHRpcCkge1xuICAgIGxldCBydGwgPSB2aWV3LnRleHREaXJlY3Rpb24gPT0gRGlyZWN0aW9uLlJUTCwgbGVmdCA9IHJ0bCwgbmFycm93ID0gZmFsc2U7XG4gICAgbGV0IHNpZGUgPSBcInRvcFwiLCBvZmZzZXQsIG1heFdpZHRoO1xuICAgIGxldCBzcGFjZUxlZnQgPSBsaXN0LmxlZnQgLSBzcGFjZS5sZWZ0LCBzcGFjZVJpZ2h0ID0gc3BhY2UucmlnaHQgLSBsaXN0LnJpZ2h0O1xuICAgIGxldCBpbmZvV2lkdGggPSBpbmZvLnJpZ2h0IC0gaW5mby5sZWZ0LCBpbmZvSGVpZ2h0ID0gaW5mby5ib3R0b20gLSBpbmZvLnRvcDtcbiAgICBpZiAobGVmdCAmJiBzcGFjZUxlZnQgPCBNYXRoLm1pbihpbmZvV2lkdGgsIHNwYWNlUmlnaHQpKVxuICAgICAgICBsZWZ0ID0gZmFsc2U7XG4gICAgZWxzZSBpZiAoIWxlZnQgJiYgc3BhY2VSaWdodCA8IE1hdGgubWluKGluZm9XaWR0aCwgc3BhY2VMZWZ0KSlcbiAgICAgICAgbGVmdCA9IHRydWU7XG4gICAgaWYgKGluZm9XaWR0aCA8PSAobGVmdCA/IHNwYWNlTGVmdCA6IHNwYWNlUmlnaHQpKSB7XG4gICAgICAgIG9mZnNldCA9IE1hdGgubWF4KHNwYWNlLnRvcCwgTWF0aC5taW4ob3B0aW9uLnRvcCwgc3BhY2UuYm90dG9tIC0gaW5mb0hlaWdodCkpIC0gbGlzdC50b3A7XG4gICAgICAgIG1heFdpZHRoID0gTWF0aC5taW4oNDAwIC8qIEluZm8uV2lkdGggKi8sIGxlZnQgPyBzcGFjZUxlZnQgOiBzcGFjZVJpZ2h0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5hcnJvdyA9IHRydWU7XG4gICAgICAgIG1heFdpZHRoID0gTWF0aC5taW4oNDAwIC8qIEluZm8uV2lkdGggKi8sIChydGwgPyBsaXN0LnJpZ2h0IDogc3BhY2UucmlnaHQgLSBsaXN0LmxlZnQpIC0gMzAgLyogSW5mby5NYXJnaW4gKi8pO1xuICAgICAgICBsZXQgc3BhY2VCZWxvdyA9IHNwYWNlLmJvdHRvbSAtIGxpc3QuYm90dG9tO1xuICAgICAgICBpZiAoc3BhY2VCZWxvdyA+PSBpbmZvSGVpZ2h0IHx8IHNwYWNlQmVsb3cgPiBsaXN0LnRvcCkgeyAvLyBCZWxvdyB0aGUgY29tcGxldGlvblxuICAgICAgICAgICAgb2Zmc2V0ID0gb3B0aW9uLmJvdHRvbSAtIGxpc3QudG9wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBBYm92ZSBpdFxuICAgICAgICAgICAgc2lkZSA9IFwiYm90dG9tXCI7XG4gICAgICAgICAgICBvZmZzZXQgPSBsaXN0LmJvdHRvbSAtIG9wdGlvbi50b3A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNjYWxlWSA9IChsaXN0LmJvdHRvbSAtIGxpc3QudG9wKSAvIHRvb2x0aXAub2Zmc2V0SGVpZ2h0O1xuICAgIGxldCBzY2FsZVggPSAobGlzdC5yaWdodCAtIGxpc3QubGVmdCkgLyB0b29sdGlwLm9mZnNldFdpZHRoO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0eWxlOiBgJHtzaWRlfTogJHtvZmZzZXQgLyBzY2FsZVl9cHg7IG1heC13aWR0aDogJHttYXhXaWR0aCAvIHNjYWxlWH1weGAsXG4gICAgICAgIGNsYXNzOiBcImNtLWNvbXBsZXRpb25JbmZvLVwiICsgKG5hcnJvdyA/IChydGwgPyBcImxlZnQtbmFycm93XCIgOiBcInJpZ2h0LW5hcnJvd1wiKSA6IGxlZnQgPyBcImxlZnRcIiA6IFwicmlnaHRcIilcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBvcHRpb25Db250ZW50KGNvbmZpZykge1xuICAgIGxldCBjb250ZW50ID0gY29uZmlnLmFkZFRvT3B0aW9ucy5zbGljZSgpO1xuICAgIGlmIChjb25maWcuaWNvbnMpXG4gICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICByZW5kZXIoY29tcGxldGlvbikge1xuICAgICAgICAgICAgICAgIGxldCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICBpY29uLmNsYXNzTGlzdC5hZGQoXCJjbS1jb21wbGV0aW9uSWNvblwiKTtcbiAgICAgICAgICAgICAgICBpZiAoY29tcGxldGlvbi50eXBlKVxuICAgICAgICAgICAgICAgICAgICBpY29uLmNsYXNzTGlzdC5hZGQoLi4uY29tcGxldGlvbi50eXBlLnNwbGl0KC9cXHMrL2cpLm1hcChjbHMgPT4gXCJjbS1jb21wbGV0aW9uSWNvbi1cIiArIGNscykpO1xuICAgICAgICAgICAgICAgIGljb24uc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpY29uO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAyMFxuICAgICAgICB9KTtcbiAgICBjb250ZW50LnB1c2goe1xuICAgICAgICByZW5kZXIoY29tcGxldGlvbiwgX3MsIF92LCBtYXRjaCkge1xuICAgICAgICAgICAgbGV0IGxhYmVsRWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICBsYWJlbEVsdC5jbGFzc05hbWUgPSBcImNtLWNvbXBsZXRpb25MYWJlbFwiO1xuICAgICAgICAgICAgbGV0IGxhYmVsID0gY29tcGxldGlvbi5kaXNwbGF5TGFiZWwgfHwgY29tcGxldGlvbi5sYWJlbCwgb2ZmID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0Y2gubGVuZ3RoOykge1xuICAgICAgICAgICAgICAgIGxldCBmcm9tID0gbWF0Y2hbaisrXSwgdG8gPSBtYXRjaFtqKytdO1xuICAgICAgICAgICAgICAgIGlmIChmcm9tID4gb2ZmKVxuICAgICAgICAgICAgICAgICAgICBsYWJlbEVsdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsYWJlbC5zbGljZShvZmYsIGZyb20pKSk7XG4gICAgICAgICAgICAgICAgbGV0IHNwYW4gPSBsYWJlbEVsdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSk7XG4gICAgICAgICAgICAgICAgc3Bhbi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsYWJlbC5zbGljZShmcm9tLCB0bykpKTtcbiAgICAgICAgICAgICAgICBzcGFuLmNsYXNzTmFtZSA9IFwiY20tY29tcGxldGlvbk1hdGNoZWRUZXh0XCI7XG4gICAgICAgICAgICAgICAgb2ZmID0gdG87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2ZmIDwgbGFiZWwubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGxhYmVsRWx0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxhYmVsLnNsaWNlKG9mZikpKTtcbiAgICAgICAgICAgIHJldHVybiBsYWJlbEVsdDtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXRpb246IDUwXG4gICAgfSwge1xuICAgICAgICByZW5kZXIoY29tcGxldGlvbikge1xuICAgICAgICAgICAgaWYgKCFjb21wbGV0aW9uLmRldGFpbClcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGxldCBkZXRhaWxFbHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgIGRldGFpbEVsdC5jbGFzc05hbWUgPSBcImNtLWNvbXBsZXRpb25EZXRhaWxcIjtcbiAgICAgICAgICAgIGRldGFpbEVsdC50ZXh0Q29udGVudCA9IGNvbXBsZXRpb24uZGV0YWlsO1xuICAgICAgICAgICAgcmV0dXJuIGRldGFpbEVsdDtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXRpb246IDgwXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnQuc29ydCgoYSwgYikgPT4gYS5wb3NpdGlvbiAtIGIucG9zaXRpb24pLm1hcChhID0+IGEucmVuZGVyKTtcbn1cbmZ1bmN0aW9uIHJhbmdlQXJvdW5kU2VsZWN0ZWQodG90YWwsIHNlbGVjdGVkLCBtYXgpIHtcbiAgICBpZiAodG90YWwgPD0gbWF4KVxuICAgICAgICByZXR1cm4geyBmcm9tOiAwLCB0bzogdG90YWwgfTtcbiAgICBpZiAoc2VsZWN0ZWQgPCAwKVxuICAgICAgICBzZWxlY3RlZCA9IDA7XG4gICAgaWYgKHNlbGVjdGVkIDw9ICh0b3RhbCA+PiAxKSkge1xuICAgICAgICBsZXQgb2ZmID0gTWF0aC5mbG9vcihzZWxlY3RlZCAvIG1heCk7XG4gICAgICAgIHJldHVybiB7IGZyb206IG9mZiAqIG1heCwgdG86IChvZmYgKyAxKSAqIG1heCB9O1xuICAgIH1cbiAgICBsZXQgb2ZmID0gTWF0aC5mbG9vcigodG90YWwgLSBzZWxlY3RlZCkgLyBtYXgpO1xuICAgIHJldHVybiB7IGZyb206IHRvdGFsIC0gKG9mZiArIDEpICogbWF4LCB0bzogdG90YWwgLSBvZmYgKiBtYXggfTtcbn1cbmNsYXNzIENvbXBsZXRpb25Ub29sdGlwIHtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3LCBzdGF0ZUZpZWxkLCBhcHBseUNvbXBsZXRpb24pIHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5zdGF0ZUZpZWxkID0gc3RhdGVGaWVsZDtcbiAgICAgICAgdGhpcy5hcHBseUNvbXBsZXRpb24gPSBhcHBseUNvbXBsZXRpb247XG4gICAgICAgIHRoaXMuaW5mbyA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5mb0Rlc3Ryb3kgPSBudWxsO1xuICAgICAgICB0aGlzLnBsYWNlSW5mb1JlcSA9IHtcbiAgICAgICAgICAgIHJlYWQ6ICgpID0+IHRoaXMubWVhc3VyZUluZm8oKSxcbiAgICAgICAgICAgIHdyaXRlOiAocG9zKSA9PiB0aGlzLnBsYWNlSW5mbyhwb3MpLFxuICAgICAgICAgICAga2V5OiB0aGlzXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3BhY2UgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRDbGFzcyA9IFwiXCI7XG4gICAgICAgIGxldCBjU3RhdGUgPSB2aWV3LnN0YXRlLmZpZWxkKHN0YXRlRmllbGQpO1xuICAgICAgICBsZXQgeyBvcHRpb25zLCBzZWxlY3RlZCB9ID0gY1N0YXRlLm9wZW47XG4gICAgICAgIGxldCBjb25maWcgPSB2aWV3LnN0YXRlLmZhY2V0KGNvbXBsZXRpb25Db25maWcpO1xuICAgICAgICB0aGlzLm9wdGlvbkNvbnRlbnQgPSBvcHRpb25Db250ZW50KGNvbmZpZyk7XG4gICAgICAgIHRoaXMub3B0aW9uQ2xhc3MgPSBjb25maWcub3B0aW9uQ2xhc3M7XG4gICAgICAgIHRoaXMudG9vbHRpcENsYXNzID0gY29uZmlnLnRvb2x0aXBDbGFzcztcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlQXJvdW5kU2VsZWN0ZWQob3B0aW9ucy5sZW5ndGgsIHNlbGVjdGVkLCBjb25maWcubWF4UmVuZGVyZWRPcHRpb25zKTtcbiAgICAgICAgdGhpcy5kb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLmRvbS5jbGFzc05hbWUgPSBcImNtLXRvb2x0aXAtYXV0b2NvbXBsZXRlXCI7XG4gICAgICAgIHRoaXMudXBkYXRlVG9vbHRpcENsYXNzKHZpZXcuc3RhdGUpO1xuICAgICAgICB0aGlzLmRvbS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChlKSA9PiB7XG4gICAgICAgICAgICBsZXQgeyBvcHRpb25zIH0gPSB2aWV3LnN0YXRlLmZpZWxkKHN0YXRlRmllbGQpLm9wZW47XG4gICAgICAgICAgICBmb3IgKGxldCBkb20gPSBlLnRhcmdldCwgbWF0Y2g7IGRvbSAmJiBkb20gIT0gdGhpcy5kb207IGRvbSA9IGRvbS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRvbS5ub2RlTmFtZSA9PSBcIkxJXCIgJiYgKG1hdGNoID0gLy0oXFxkKykkLy5leGVjKGRvbS5pZCkpICYmICttYXRjaFsxXSA8IG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlDb21wbGV0aW9uKHZpZXcsIG9wdGlvbnNbK21hdGNoWzFdXSk7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZG9tLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHN0YXRlID0gdmlldy5zdGF0ZS5maWVsZCh0aGlzLnN0YXRlRmllbGQsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChzdGF0ZSAmJiBzdGF0ZS50b29sdGlwICYmIHZpZXcuc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZykuY2xvc2VPbkJsdXIgJiZcbiAgICAgICAgICAgICAgICBlLnJlbGF0ZWRUYXJnZXQgIT0gdmlldy5jb250ZW50RE9NKVxuICAgICAgICAgICAgICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBjbG9zZUNvbXBsZXRpb25FZmZlY3Qub2YobnVsbCkgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNob3dPcHRpb25zKG9wdGlvbnMsIGNTdGF0ZS5pZCk7XG4gICAgfVxuICAgIG1vdW50KCkgeyB0aGlzLnVwZGF0ZVNlbCgpOyB9XG4gICAgc2hvd09wdGlvbnMob3B0aW9ucywgaWQpIHtcbiAgICAgICAgaWYgKHRoaXMubGlzdClcbiAgICAgICAgICAgIHRoaXMubGlzdC5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5saXN0ID0gdGhpcy5kb20uYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVMaXN0Qm94KG9wdGlvbnMsIGlkLCB0aGlzLnJhbmdlKSk7XG4gICAgICAgIHRoaXMubGlzdC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmluZm8pXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnJlcXVlc3RNZWFzdXJlKHRoaXMucGxhY2VJbmZvUmVxKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBsZXQgY1N0YXRlID0gdXBkYXRlLnN0YXRlLmZpZWxkKHRoaXMuc3RhdGVGaWVsZCk7XG4gICAgICAgIGxldCBwcmV2U3RhdGUgPSB1cGRhdGUuc3RhcnRTdGF0ZS5maWVsZCh0aGlzLnN0YXRlRmllbGQpO1xuICAgICAgICB0aGlzLnVwZGF0ZVRvb2x0aXBDbGFzcyh1cGRhdGUuc3RhdGUpO1xuICAgICAgICBpZiAoY1N0YXRlICE9IHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgbGV0IHsgb3B0aW9ucywgc2VsZWN0ZWQsIGRpc2FibGVkIH0gPSBjU3RhdGUub3BlbjtcbiAgICAgICAgICAgIGlmICghcHJldlN0YXRlLm9wZW4gfHwgcHJldlN0YXRlLm9wZW4ub3B0aW9ucyAhPSBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlQXJvdW5kU2VsZWN0ZWQob3B0aW9ucy5sZW5ndGgsIHNlbGVjdGVkLCB1cGRhdGUuc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZykubWF4UmVuZGVyZWRPcHRpb25zKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dPcHRpb25zKG9wdGlvbnMsIGNTdGF0ZS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNlbCgpO1xuICAgICAgICAgICAgaWYgKGRpc2FibGVkICE9ICgoX2EgPSBwcmV2U3RhdGUub3BlbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRpc2FibGVkKSlcbiAgICAgICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QudG9nZ2xlKFwiY20tdG9vbHRpcC1hdXRvY29tcGxldGUtZGlzYWJsZWRcIiwgISFkaXNhYmxlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlVG9vbHRpcENsYXNzKHN0YXRlKSB7XG4gICAgICAgIGxldCBjbHMgPSB0aGlzLnRvb2x0aXBDbGFzcyhzdGF0ZSk7XG4gICAgICAgIGlmIChjbHMgIT0gdGhpcy5jdXJyZW50Q2xhc3MpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGMgb2YgdGhpcy5jdXJyZW50Q2xhc3Muc3BsaXQoXCIgXCIpKVxuICAgICAgICAgICAgICAgIGlmIChjKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QucmVtb3ZlKGMpO1xuICAgICAgICAgICAgZm9yIChsZXQgYyBvZiBjbHMuc3BsaXQoXCIgXCIpKVxuICAgICAgICAgICAgICAgIGlmIChjKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QuYWRkKGMpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2xhc3MgPSBjbHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcG9zaXRpb25lZChzcGFjZSkge1xuICAgICAgICB0aGlzLnNwYWNlID0gc3BhY2U7XG4gICAgICAgIGlmICh0aGlzLmluZm8pXG4gICAgICAgICAgICB0aGlzLnZpZXcucmVxdWVzdE1lYXN1cmUodGhpcy5wbGFjZUluZm9SZXEpO1xuICAgIH1cbiAgICB1cGRhdGVTZWwoKSB7XG4gICAgICAgIGxldCBjU3RhdGUgPSB0aGlzLnZpZXcuc3RhdGUuZmllbGQodGhpcy5zdGF0ZUZpZWxkKSwgb3BlbiA9IGNTdGF0ZS5vcGVuO1xuICAgICAgICBpZiAob3Blbi5zZWxlY3RlZCA+IC0xICYmIG9wZW4uc2VsZWN0ZWQgPCB0aGlzLnJhbmdlLmZyb20gfHwgb3Blbi5zZWxlY3RlZCA+PSB0aGlzLnJhbmdlLnRvKSB7XG4gICAgICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2VBcm91bmRTZWxlY3RlZChvcGVuLm9wdGlvbnMubGVuZ3RoLCBvcGVuLnNlbGVjdGVkLCB0aGlzLnZpZXcuc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZykubWF4UmVuZGVyZWRPcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd09wdGlvbnMob3Blbi5vcHRpb25zLCBjU3RhdGUuaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnVwZGF0ZVNlbGVjdGVkT3B0aW9uKG9wZW4uc2VsZWN0ZWQpKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lJbmZvKCk7XG4gICAgICAgICAgICBsZXQgeyBjb21wbGV0aW9uIH0gPSBvcGVuLm9wdGlvbnNbb3Blbi5zZWxlY3RlZF07XG4gICAgICAgICAgICBsZXQgeyBpbmZvIH0gPSBjb21wbGV0aW9uO1xuICAgICAgICAgICAgaWYgKCFpbmZvKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGxldCBpbmZvUmVzdWx0ID0gdHlwZW9mIGluZm8gPT09IFwic3RyaW5nXCIgPyBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShpbmZvKSA6IGluZm8oY29tcGxldGlvbik7XG4gICAgICAgICAgICBpZiAoIWluZm9SZXN1bHQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKFwidGhlblwiIGluIGluZm9SZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpbmZvUmVzdWx0LnRoZW4ob2JqID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iaiAmJiB0aGlzLnZpZXcuc3RhdGUuZmllbGQodGhpcy5zdGF0ZUZpZWxkLCBmYWxzZSkgPT0gY1N0YXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJbmZvUGFuZShvYmosIGNvbXBsZXRpb24pO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGUgPT4gbG9nRXhjZXB0aW9uKHRoaXMudmlldy5zdGF0ZSwgZSwgXCJjb21wbGV0aW9uIGluZm9cIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRJbmZvUGFuZShpbmZvUmVzdWx0LCBjb21wbGV0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRJbmZvUGFuZShjb250ZW50LCBjb21wbGV0aW9uKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveUluZm8oKTtcbiAgICAgICAgbGV0IHdyYXAgPSB0aGlzLmluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB3cmFwLmNsYXNzTmFtZSA9IFwiY20tdG9vbHRpcCBjbS1jb21wbGV0aW9uSW5mb1wiO1xuICAgICAgICBpZiAoY29udGVudC5ub2RlVHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB3cmFwLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgICAgICAgICAgdGhpcy5pbmZvRGVzdHJveSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgeyBkb20sIGRlc3Ryb3kgfSA9IGNvbnRlbnQ7XG4gICAgICAgICAgICB3cmFwLmFwcGVuZENoaWxkKGRvbSk7XG4gICAgICAgICAgICB0aGlzLmluZm9EZXN0cm95ID0gZGVzdHJveSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZG9tLmFwcGVuZENoaWxkKHdyYXApO1xuICAgICAgICB0aGlzLnZpZXcucmVxdWVzdE1lYXN1cmUodGhpcy5wbGFjZUluZm9SZXEpO1xuICAgIH1cbiAgICB1cGRhdGVTZWxlY3RlZE9wdGlvbihzZWxlY3RlZCkge1xuICAgICAgICBsZXQgc2V0ID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgb3B0ID0gdGhpcy5saXN0LmZpcnN0Q2hpbGQsIGkgPSB0aGlzLnJhbmdlLmZyb207IG9wdDsgb3B0ID0gb3B0Lm5leHRTaWJsaW5nLCBpKyspIHtcbiAgICAgICAgICAgIGlmIChvcHQubm9kZU5hbWUgIT0gXCJMSVwiIHx8ICFvcHQuaWQpIHtcbiAgICAgICAgICAgICAgICBpLS07IC8vIEEgc2VjdGlvbiBoZWFkZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdC5oYXNBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0ID0gb3B0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChvcHQuaGFzQXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiKSlcbiAgICAgICAgICAgICAgICAgICAgb3B0LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldClcbiAgICAgICAgICAgIHNjcm9sbEludG9WaWV3KHRoaXMubGlzdCwgc2V0KTtcbiAgICAgICAgcmV0dXJuIHNldDtcbiAgICB9XG4gICAgbWVhc3VyZUluZm8oKSB7XG4gICAgICAgIGxldCBzZWwgPSB0aGlzLmRvbS5xdWVyeVNlbGVjdG9yKFwiW2FyaWEtc2VsZWN0ZWRdXCIpO1xuICAgICAgICBpZiAoIXNlbCB8fCAhdGhpcy5pbmZvKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCBsaXN0UmVjdCA9IHRoaXMuZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBsZXQgaW5mb1JlY3QgPSB0aGlzLmluZm8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGxldCBzZWxSZWN0ID0gc2VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBsZXQgc3BhY2UgPSB0aGlzLnNwYWNlO1xuICAgICAgICBpZiAoIXNwYWNlKSB7XG4gICAgICAgICAgICBsZXQgd2luID0gdGhpcy5kb20ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gICAgICAgICAgICBzcGFjZSA9IHsgbGVmdDogMCwgdG9wOiAwLCByaWdodDogd2luLmlubmVyV2lkdGgsIGJvdHRvbTogd2luLmlubmVySGVpZ2h0IH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbFJlY3QudG9wID4gTWF0aC5taW4oc3BhY2UuYm90dG9tLCBsaXN0UmVjdC5ib3R0b20pIC0gMTAgfHxcbiAgICAgICAgICAgIHNlbFJlY3QuYm90dG9tIDwgTWF0aC5tYXgoc3BhY2UudG9wLCBsaXN0UmVjdC50b3ApICsgMTApXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5zdGF0ZS5mYWNldChjb21wbGV0aW9uQ29uZmlnKS5wb3NpdGlvbkluZm8odGhpcy52aWV3LCBsaXN0UmVjdCwgc2VsUmVjdCwgaW5mb1JlY3QsIHNwYWNlLCB0aGlzLmRvbSk7XG4gICAgfVxuICAgIHBsYWNlSW5mbyhwb3MpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5mbykge1xuICAgICAgICAgICAgaWYgKHBvcykge1xuICAgICAgICAgICAgICAgIGlmIChwb3Muc3R5bGUpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5mby5zdHlsZS5jc3NUZXh0ID0gcG9zLnN0eWxlO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5mby5jbGFzc05hbWUgPSBcImNtLXRvb2x0aXAgY20tY29tcGxldGlvbkluZm8gXCIgKyAocG9zLmNsYXNzIHx8IFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmZvLnN0eWxlLmNzc1RleHQgPSBcInRvcDogLTFlNnB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlTGlzdEJveChvcHRpb25zLCBpZCwgcmFuZ2UpIHtcbiAgICAgICAgY29uc3QgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgICAgIHVsLmlkID0gaWQ7XG4gICAgICAgIHVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJsaXN0Ym94XCIpO1xuICAgICAgICB1bC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgdWwuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB0aGlzLnZpZXcuc3RhdGUucGhyYXNlKFwiQ29tcGxldGlvbnNcIikpO1xuICAgICAgICBsZXQgY3VyU2VjdGlvbiA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGkgPSByYW5nZS5mcm9tOyBpIDwgcmFuZ2UudG87IGkrKykge1xuICAgICAgICAgICAgbGV0IHsgY29tcGxldGlvbiwgbWF0Y2ggfSA9IG9wdGlvbnNbaV0sIHsgc2VjdGlvbiB9ID0gY29tcGxldGlvbjtcbiAgICAgICAgICAgIGlmIChzZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5hbWUgPSB0eXBlb2Ygc2VjdGlvbiA9PSBcInN0cmluZ1wiID8gc2VjdGlvbiA6IHNlY3Rpb24ubmFtZTtcbiAgICAgICAgICAgICAgICBpZiAobmFtZSAhPSBjdXJTZWN0aW9uICYmIChpID4gcmFuZ2UuZnJvbSB8fCByYW5nZS5mcm9tID09IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1clNlY3Rpb24gPSBuYW1lO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlY3Rpb24gIT0gXCJzdHJpbmdcIiAmJiBzZWN0aW9uLmhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdWwuYXBwZW5kQ2hpbGQoc2VjdGlvbi5oZWFkZXIoc2VjdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRlciA9IHVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjb21wbGV0aW9uLXNlY3Rpb25cIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyLnRleHRDb250ZW50ID0gbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxpID0gdWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpKTtcbiAgICAgICAgICAgIGxpLmlkID0gaWQgKyBcIi1cIiArIGk7XG4gICAgICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgbGV0IGNscyA9IHRoaXMub3B0aW9uQ2xhc3MoY29tcGxldGlvbik7XG4gICAgICAgICAgICBpZiAoY2xzKVxuICAgICAgICAgICAgICAgIGxpLmNsYXNzTmFtZSA9IGNscztcbiAgICAgICAgICAgIGZvciAobGV0IHNvdXJjZSBvZiB0aGlzLm9wdGlvbkNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICBsZXQgbm9kZSA9IHNvdXJjZShjb21wbGV0aW9uLCB0aGlzLnZpZXcuc3RhdGUsIHRoaXMudmlldywgbWF0Y2gpO1xuICAgICAgICAgICAgICAgIGlmIChub2RlKVxuICAgICAgICAgICAgICAgICAgICBsaS5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmFuZ2UuZnJvbSlcbiAgICAgICAgICAgIHVsLmNsYXNzTGlzdC5hZGQoXCJjbS1jb21wbGV0aW9uTGlzdEluY29tcGxldGVUb3BcIik7XG4gICAgICAgIGlmIChyYW5nZS50byA8IG9wdGlvbnMubGVuZ3RoKVxuICAgICAgICAgICAgdWwuY2xhc3NMaXN0LmFkZChcImNtLWNvbXBsZXRpb25MaXN0SW5jb21wbGV0ZUJvdHRvbVwiKTtcbiAgICAgICAgcmV0dXJuIHVsO1xuICAgIH1cbiAgICBkZXN0cm95SW5mbygpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5mbykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5mb0Rlc3Ryb3kpXG4gICAgICAgICAgICAgICAgdGhpcy5pbmZvRGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5pbmZvLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5pbmZvID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3lJbmZvKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY29tcGxldGlvblRvb2x0aXAoc3RhdGVGaWVsZCwgYXBwbHlDb21wbGV0aW9uKSB7XG4gICAgcmV0dXJuICh2aWV3KSA9PiBuZXcgQ29tcGxldGlvblRvb2x0aXAodmlldywgc3RhdGVGaWVsZCwgYXBwbHlDb21wbGV0aW9uKTtcbn1cbmZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KGNvbnRhaW5lciwgZWxlbWVudCkge1xuICAgIGxldCBwYXJlbnQgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IHNlbGYgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxldCBzY2FsZVkgPSBwYXJlbnQuaGVpZ2h0IC8gY29udGFpbmVyLm9mZnNldEhlaWdodDtcbiAgICBpZiAoc2VsZi50b3AgPCBwYXJlbnQudG9wKVxuICAgICAgICBjb250YWluZXIuc2Nyb2xsVG9wIC09IChwYXJlbnQudG9wIC0gc2VsZi50b3ApIC8gc2NhbGVZO1xuICAgIGVsc2UgaWYgKHNlbGYuYm90dG9tID4gcGFyZW50LmJvdHRvbSlcbiAgICAgICAgY29udGFpbmVyLnNjcm9sbFRvcCArPSAoc2VsZi5ib3R0b20gLSBwYXJlbnQuYm90dG9tKSAvIHNjYWxlWTtcbn1cblxuLy8gVXNlZCB0byBwaWNrIGEgcHJlZmVycmVkIG9wdGlvbiB3aGVuIHR3byBvcHRpb25zIHdpdGggdGhlIHNhbWVcbi8vIGxhYmVsIG9jY3VyIGluIHRoZSByZXN1bHQuXG5mdW5jdGlvbiBzY29yZShvcHRpb24pIHtcbiAgICByZXR1cm4gKG9wdGlvbi5ib29zdCB8fCAwKSAqIDEwMCArIChvcHRpb24uYXBwbHkgPyAxMCA6IDApICsgKG9wdGlvbi5pbmZvID8gNSA6IDApICtcbiAgICAgICAgKG9wdGlvbi50eXBlID8gMSA6IDApO1xufVxuZnVuY3Rpb24gc29ydE9wdGlvbnMoYWN0aXZlLCBzdGF0ZSkge1xuICAgIGxldCBvcHRpb25zID0gW107XG4gICAgbGV0IHNlY3Rpb25zID0gbnVsbDtcbiAgICBsZXQgYWRkT3B0aW9uID0gKG9wdGlvbikgPT4ge1xuICAgICAgICBvcHRpb25zLnB1c2gob3B0aW9uKTtcbiAgICAgICAgbGV0IHsgc2VjdGlvbiB9ID0gb3B0aW9uLmNvbXBsZXRpb247XG4gICAgICAgIGlmIChzZWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoIXNlY3Rpb25zKVxuICAgICAgICAgICAgICAgIHNlY3Rpb25zID0gW107XG4gICAgICAgICAgICBsZXQgbmFtZSA9IHR5cGVvZiBzZWN0aW9uID09IFwic3RyaW5nXCIgPyBzZWN0aW9uIDogc2VjdGlvbi5uYW1lO1xuICAgICAgICAgICAgaWYgKCFzZWN0aW9ucy5zb21lKHMgPT4gcy5uYW1lID09IG5hbWUpKVxuICAgICAgICAgICAgICAgIHNlY3Rpb25zLnB1c2godHlwZW9mIHNlY3Rpb24gPT0gXCJzdHJpbmdcIiA/IHsgbmFtZSB9IDogc2VjdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGxldCBjb25mID0gc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZyk7XG4gICAgZm9yIChsZXQgYSBvZiBhY3RpdmUpXG4gICAgICAgIGlmIChhLmhhc1Jlc3VsdCgpKSB7XG4gICAgICAgICAgICBsZXQgZ2V0TWF0Y2ggPSBhLnJlc3VsdC5nZXRNYXRjaDtcbiAgICAgICAgICAgIGlmIChhLnJlc3VsdC5maWx0ZXIgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgb3B0aW9uIG9mIGEucmVzdWx0Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkT3B0aW9uKG5ldyBPcHRpb24ob3B0aW9uLCBhLnNvdXJjZSwgZ2V0TWF0Y2ggPyBnZXRNYXRjaChvcHRpb24pIDogW10sIDFlOSAtIG9wdGlvbnMubGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhdHRlcm4gPSBzdGF0ZS5zbGljZURvYyhhLmZyb20sIGEudG8pLCBtYXRjaDtcbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2hlciA9IGNvbmYuZmlsdGVyU3RyaWN0ID8gbmV3IFN0cmljdE1hdGNoZXIocGF0dGVybikgOiBuZXcgRnV6enlNYXRjaGVyKHBhdHRlcm4pO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IG9wdGlvbiBvZiBhLnJlc3VsdC5vcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPSBtYXRjaGVyLm1hdGNoKG9wdGlvbi5sYWJlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaGVkID0gIW9wdGlvbi5kaXNwbGF5TGFiZWwgPyBtYXRjaC5tYXRjaGVkIDogZ2V0TWF0Y2ggPyBnZXRNYXRjaChvcHRpb24sIG1hdGNoLm1hdGNoZWQpIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRPcHRpb24obmV3IE9wdGlvbihvcHRpb24sIGEuc291cmNlLCBtYXRjaGVkLCBtYXRjaC5zY29yZSArIChvcHRpb24uYm9vc3QgfHwgMCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgaWYgKHNlY3Rpb25zKSB7XG4gICAgICAgIGxldCBzZWN0aW9uT3JkZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpLCBwb3MgPSAwO1xuICAgICAgICBsZXQgY21wID0gKGEsIGIpID0+IHsgdmFyIF9hLCBfYjsgcmV0dXJuICgoX2EgPSBhLnJhbmspICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDFlOSkgLSAoKF9iID0gYi5yYW5rKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAxZTkpIHx8IChhLm5hbWUgPCBiLm5hbWUgPyAtMSA6IDEpOyB9O1xuICAgICAgICBmb3IgKGxldCBzIG9mIHNlY3Rpb25zLnNvcnQoY21wKSkge1xuICAgICAgICAgICAgcG9zIC09IDFlNTtcbiAgICAgICAgICAgIHNlY3Rpb25PcmRlcltzLm5hbWVdID0gcG9zO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IG9wdGlvbiBvZiBvcHRpb25zKSB7XG4gICAgICAgICAgICBsZXQgeyBzZWN0aW9uIH0gPSBvcHRpb24uY29tcGxldGlvbjtcbiAgICAgICAgICAgIGlmIChzZWN0aW9uKVxuICAgICAgICAgICAgICAgIG9wdGlvbi5zY29yZSArPSBzZWN0aW9uT3JkZXJbdHlwZW9mIHNlY3Rpb24gPT0gXCJzdHJpbmdcIiA/IHNlY3Rpb24gOiBzZWN0aW9uLm5hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBbXSwgcHJldiA9IG51bGw7XG4gICAgbGV0IGNvbXBhcmUgPSBjb25mLmNvbXBhcmVDb21wbGV0aW9ucztcbiAgICBmb3IgKGxldCBvcHQgb2Ygb3B0aW9ucy5zb3J0KChhLCBiKSA9PiAoYi5zY29yZSAtIGEuc2NvcmUpIHx8IGNvbXBhcmUoYS5jb21wbGV0aW9uLCBiLmNvbXBsZXRpb24pKSkge1xuICAgICAgICBsZXQgY3VyID0gb3B0LmNvbXBsZXRpb247XG4gICAgICAgIGlmICghcHJldiB8fCBwcmV2LmxhYmVsICE9IGN1ci5sYWJlbCB8fCBwcmV2LmRldGFpbCAhPSBjdXIuZGV0YWlsIHx8XG4gICAgICAgICAgICAocHJldi50eXBlICE9IG51bGwgJiYgY3VyLnR5cGUgIT0gbnVsbCAmJiBwcmV2LnR5cGUgIT0gY3VyLnR5cGUpIHx8XG4gICAgICAgICAgICBwcmV2LmFwcGx5ICE9IGN1ci5hcHBseSB8fCBwcmV2LmJvb3N0ICE9IGN1ci5ib29zdClcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9wdCk7XG4gICAgICAgIGVsc2UgaWYgKHNjb3JlKG9wdC5jb21wbGV0aW9uKSA+IHNjb3JlKHByZXYpKVxuICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSA9IG9wdDtcbiAgICAgICAgcHJldiA9IG9wdC5jb21wbGV0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY2xhc3MgQ29tcGxldGlvbkRpYWxvZyB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgYXR0cnMsIHRvb2x0aXAsIHRpbWVzdGFtcCwgc2VsZWN0ZWQsIGRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuYXR0cnMgPSBhdHRycztcbiAgICAgICAgdGhpcy50b29sdGlwID0gdG9vbHRpcDtcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIH1cbiAgICBzZXRTZWxlY3RlZChzZWxlY3RlZCwgaWQpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkID09IHRoaXMuc2VsZWN0ZWQgfHwgc2VsZWN0ZWQgPj0gdGhpcy5vcHRpb25zLmxlbmd0aCA/IHRoaXNcbiAgICAgICAgICAgIDogbmV3IENvbXBsZXRpb25EaWFsb2codGhpcy5vcHRpb25zLCBtYWtlQXR0cnMoaWQsIHNlbGVjdGVkKSwgdGhpcy50b29sdGlwLCB0aGlzLnRpbWVzdGFtcCwgc2VsZWN0ZWQsIHRoaXMuZGlzYWJsZWQpO1xuICAgIH1cbiAgICBzdGF0aWMgYnVpbGQoYWN0aXZlLCBzdGF0ZSwgaWQsIHByZXYsIGNvbmYpIHtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSBzb3J0T3B0aW9ucyhhY3RpdmUsIHN0YXRlKTtcbiAgICAgICAgaWYgKCFvcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHByZXYgJiYgYWN0aXZlLnNvbWUoYSA9PiBhLnN0YXRlID09IDEgLyogU3RhdGUuUGVuZGluZyAqLykgP1xuICAgICAgICAgICAgICAgIG5ldyBDb21wbGV0aW9uRGlhbG9nKHByZXYub3B0aW9ucywgcHJldi5hdHRycywgcHJldi50b29sdGlwLCBwcmV2LnRpbWVzdGFtcCwgcHJldi5zZWxlY3RlZCwgdHJ1ZSkgOiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzZWxlY3RlZCA9IHN0YXRlLmZhY2V0KGNvbXBsZXRpb25Db25maWcpLnNlbGVjdE9uT3BlbiA/IDAgOiAtMTtcbiAgICAgICAgaWYgKHByZXYgJiYgcHJldi5zZWxlY3RlZCAhPSBzZWxlY3RlZCAmJiBwcmV2LnNlbGVjdGVkICE9IC0xKSB7XG4gICAgICAgICAgICBsZXQgc2VsZWN0ZWRWYWx1ZSA9IHByZXYub3B0aW9uc1twcmV2LnNlbGVjdGVkXS5jb21wbGV0aW9uO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zW2ldLmNvbXBsZXRpb24gPT0gc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvbXBsZXRpb25EaWFsb2cob3B0aW9ucywgbWFrZUF0dHJzKGlkLCBzZWxlY3RlZCksIHtcbiAgICAgICAgICAgIHBvczogYWN0aXZlLnJlZHVjZSgoYSwgYikgPT4gYi5oYXNSZXN1bHQoKSA/IE1hdGgubWluKGEsIGIuZnJvbSkgOiBhLCAxZTgpLFxuICAgICAgICAgICAgY3JlYXRlOiBjcmVhdGVUb29sdGlwLFxuICAgICAgICAgICAgYWJvdmU6IGNvbmYuYWJvdmVDdXJzb3IsXG4gICAgICAgIH0sIHByZXYgPyBwcmV2LnRpbWVzdGFtcCA6IERhdGUubm93KCksIHNlbGVjdGVkLCBmYWxzZSk7XG4gICAgfVxuICAgIG1hcChjaGFuZ2VzKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29tcGxldGlvbkRpYWxvZyh0aGlzLm9wdGlvbnMsIHRoaXMuYXR0cnMsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy50b29sdGlwKSwgeyBwb3M6IGNoYW5nZXMubWFwUG9zKHRoaXMudG9vbHRpcC5wb3MpIH0pLCB0aGlzLnRpbWVzdGFtcCwgdGhpcy5zZWxlY3RlZCwgdGhpcy5kaXNhYmxlZCk7XG4gICAgfVxufVxuY2xhc3MgQ29tcGxldGlvblN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcihhY3RpdmUsIGlkLCBvcGVuKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMub3BlbiA9IG9wZW47XG4gICAgfVxuICAgIHN0YXRpYyBzdGFydCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV0aW9uU3RhdGUobm9uZSwgXCJjbS1hYy1cIiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDJlNikudG9TdHJpbmcoMzYpLCBudWxsKTtcbiAgICB9XG4gICAgdXBkYXRlKHRyKSB7XG4gICAgICAgIGxldCB7IHN0YXRlIH0gPSB0ciwgY29uZiA9IHN0YXRlLmZhY2V0KGNvbXBsZXRpb25Db25maWcpO1xuICAgICAgICBsZXQgc291cmNlcyA9IGNvbmYub3ZlcnJpZGUgfHxcbiAgICAgICAgICAgIHN0YXRlLmxhbmd1YWdlRGF0YUF0KFwiYXV0b2NvbXBsZXRlXCIsIGN1cihzdGF0ZSkpLm1hcChhc1NvdXJjZSk7XG4gICAgICAgIGxldCBhY3RpdmUgPSBzb3VyY2VzLm1hcChzb3VyY2UgPT4ge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5hY3RpdmUuZmluZChzID0+IHMuc291cmNlID09IHNvdXJjZSkgfHxcbiAgICAgICAgICAgICAgICBuZXcgQWN0aXZlU291cmNlKHNvdXJjZSwgdGhpcy5hY3RpdmUuc29tZShhID0+IGEuc3RhdGUgIT0gMCAvKiBTdGF0ZS5JbmFjdGl2ZSAqLykgPyAxIC8qIFN0YXRlLlBlbmRpbmcgKi8gOiAwIC8qIFN0YXRlLkluYWN0aXZlICovKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS51cGRhdGUodHIsIGNvbmYpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFjdGl2ZS5sZW5ndGggPT0gdGhpcy5hY3RpdmUubGVuZ3RoICYmIGFjdGl2ZS5ldmVyeSgoYSwgaSkgPT4gYSA9PSB0aGlzLmFjdGl2ZVtpXSkpXG4gICAgICAgICAgICBhY3RpdmUgPSB0aGlzLmFjdGl2ZTtcbiAgICAgICAgbGV0IG9wZW4gPSB0aGlzLm9wZW47XG4gICAgICAgIGlmIChvcGVuICYmIHRyLmRvY0NoYW5nZWQpXG4gICAgICAgICAgICBvcGVuID0gb3Blbi5tYXAodHIuY2hhbmdlcyk7XG4gICAgICAgIGlmICh0ci5zZWxlY3Rpb24gfHwgYWN0aXZlLnNvbWUoYSA9PiBhLmhhc1Jlc3VsdCgpICYmIHRyLmNoYW5nZXMudG91Y2hlc1JhbmdlKGEuZnJvbSwgYS50bykpIHx8XG4gICAgICAgICAgICAhc2FtZVJlc3VsdHMoYWN0aXZlLCB0aGlzLmFjdGl2ZSkpXG4gICAgICAgICAgICBvcGVuID0gQ29tcGxldGlvbkRpYWxvZy5idWlsZChhY3RpdmUsIHN0YXRlLCB0aGlzLmlkLCBvcGVuLCBjb25mKTtcbiAgICAgICAgZWxzZSBpZiAob3BlbiAmJiBvcGVuLmRpc2FibGVkICYmICFhY3RpdmUuc29tZShhID0+IGEuc3RhdGUgPT0gMSAvKiBTdGF0ZS5QZW5kaW5nICovKSlcbiAgICAgICAgICAgIG9wZW4gPSBudWxsO1xuICAgICAgICBpZiAoIW9wZW4gJiYgYWN0aXZlLmV2ZXJ5KGEgPT4gYS5zdGF0ZSAhPSAxIC8qIFN0YXRlLlBlbmRpbmcgKi8pICYmIGFjdGl2ZS5zb21lKGEgPT4gYS5oYXNSZXN1bHQoKSkpXG4gICAgICAgICAgICBhY3RpdmUgPSBhY3RpdmUubWFwKGEgPT4gYS5oYXNSZXN1bHQoKSA/IG5ldyBBY3RpdmVTb3VyY2UoYS5zb3VyY2UsIDAgLyogU3RhdGUuSW5hY3RpdmUgKi8pIDogYSk7XG4gICAgICAgIGZvciAobGV0IGVmZmVjdCBvZiB0ci5lZmZlY3RzKVxuICAgICAgICAgICAgaWYgKGVmZmVjdC5pcyhzZXRTZWxlY3RlZEVmZmVjdCkpXG4gICAgICAgICAgICAgICAgb3BlbiA9IG9wZW4gJiYgb3Blbi5zZXRTZWxlY3RlZChlZmZlY3QudmFsdWUsIHRoaXMuaWQpO1xuICAgICAgICByZXR1cm4gYWN0aXZlID09IHRoaXMuYWN0aXZlICYmIG9wZW4gPT0gdGhpcy5vcGVuID8gdGhpcyA6IG5ldyBDb21wbGV0aW9uU3RhdGUoYWN0aXZlLCB0aGlzLmlkLCBvcGVuKTtcbiAgICB9XG4gICAgZ2V0IHRvb2x0aXAoKSB7IHJldHVybiB0aGlzLm9wZW4gPyB0aGlzLm9wZW4udG9vbHRpcCA6IG51bGw7IH1cbiAgICBnZXQgYXR0cnMoKSB7IHJldHVybiB0aGlzLm9wZW4gPyB0aGlzLm9wZW4uYXR0cnMgOiB0aGlzLmFjdGl2ZS5sZW5ndGggPyBiYXNlQXR0cnMgOiBub0F0dHJzOyB9XG59XG5mdW5jdGlvbiBzYW1lUmVzdWx0cyhhLCBiKSB7XG4gICAgaWYgKGEgPT0gYilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgZm9yIChsZXQgaUEgPSAwLCBpQiA9IDA7Oykge1xuICAgICAgICB3aGlsZSAoaUEgPCBhLmxlbmd0aCAmJiAhYVtpQV0uaGFzUmVzdWx0KVxuICAgICAgICAgICAgaUErKztcbiAgICAgICAgd2hpbGUgKGlCIDwgYi5sZW5ndGggJiYgIWJbaUJdLmhhc1Jlc3VsdClcbiAgICAgICAgICAgIGlCKys7XG4gICAgICAgIGxldCBlbmRBID0gaUEgPT0gYS5sZW5ndGgsIGVuZEIgPSBpQiA9PSBiLmxlbmd0aDtcbiAgICAgICAgaWYgKGVuZEEgfHwgZW5kQilcbiAgICAgICAgICAgIHJldHVybiBlbmRBID09IGVuZEI7XG4gICAgICAgIGlmIChhW2lBKytdLnJlc3VsdCAhPSBiW2lCKytdLnJlc3VsdClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5jb25zdCBiYXNlQXR0cnMgPSB7XG4gICAgXCJhcmlhLWF1dG9jb21wbGV0ZVwiOiBcImxpc3RcIlxufTtcbmNvbnN0IG5vQXR0cnMgPSB7fTtcbmZ1bmN0aW9uIG1ha2VBdHRycyhpZCwgc2VsZWN0ZWQpIHtcbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICBcImFyaWEtYXV0b2NvbXBsZXRlXCI6IFwibGlzdFwiLFxuICAgICAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsXG4gICAgICAgIFwiYXJpYS1jb250cm9sc1wiOiBpZFxuICAgIH07XG4gICAgaWYgKHNlbGVjdGVkID4gLTEpXG4gICAgICAgIHJlc3VsdFtcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiXSA9IGlkICsgXCItXCIgKyBzZWxlY3RlZDtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3Qgbm9uZSA9IFtdO1xuZnVuY3Rpb24gZ2V0VXNlckV2ZW50KHRyLCBjb25mKSB7XG4gICAgaWYgKHRyLmlzVXNlckV2ZW50KFwiaW5wdXQuY29tcGxldGVcIikpIHtcbiAgICAgICAgbGV0IGNvbXBsZXRpb24gPSB0ci5hbm5vdGF0aW9uKHBpY2tlZENvbXBsZXRpb24pO1xuICAgICAgICBpZiAoY29tcGxldGlvbiAmJiBjb25mLmFjdGl2YXRlT25Db21wbGV0aW9uKGNvbXBsZXRpb24pKVxuICAgICAgICAgICAgcmV0dXJuIFwiaW5wdXRcIjtcbiAgICB9XG4gICAgcmV0dXJuIHRyLmlzVXNlckV2ZW50KFwiaW5wdXQudHlwZVwiKSA/IFwiaW5wdXRcIiA6IHRyLmlzVXNlckV2ZW50KFwiZGVsZXRlLmJhY2t3YXJkXCIpID8gXCJkZWxldGVcIiA6IG51bGw7XG59XG5jbGFzcyBBY3RpdmVTb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZSwgc3RhdGUsIGV4cGxpY2l0UG9zID0gLTEpIHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdGhpcy5leHBsaWNpdFBvcyA9IGV4cGxpY2l0UG9zO1xuICAgIH1cbiAgICBoYXNSZXN1bHQoKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIHVwZGF0ZSh0ciwgY29uZikge1xuICAgICAgICBsZXQgZXZlbnQgPSBnZXRVc2VyRXZlbnQodHIsIGNvbmYpLCB2YWx1ZSA9IHRoaXM7XG4gICAgICAgIGlmIChldmVudClcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuaGFuZGxlVXNlckV2ZW50KHRyLCBldmVudCwgY29uZik7XG4gICAgICAgIGVsc2UgaWYgKHRyLmRvY0NoYW5nZWQpXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmhhbmRsZUNoYW5nZSh0cik7XG4gICAgICAgIGVsc2UgaWYgKHRyLnNlbGVjdGlvbiAmJiB2YWx1ZS5zdGF0ZSAhPSAwIC8qIFN0YXRlLkluYWN0aXZlICovKVxuICAgICAgICAgICAgdmFsdWUgPSBuZXcgQWN0aXZlU291cmNlKHZhbHVlLnNvdXJjZSwgMCAvKiBTdGF0ZS5JbmFjdGl2ZSAqLyk7XG4gICAgICAgIGZvciAobGV0IGVmZmVjdCBvZiB0ci5lZmZlY3RzKSB7XG4gICAgICAgICAgICBpZiAoZWZmZWN0LmlzKHN0YXJ0Q29tcGxldGlvbkVmZmVjdCkpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBuZXcgQWN0aXZlU291cmNlKHZhbHVlLnNvdXJjZSwgMSAvKiBTdGF0ZS5QZW5kaW5nICovLCBlZmZlY3QudmFsdWUgPyBjdXIodHIuc3RhdGUpIDogLTEpO1xuICAgICAgICAgICAgZWxzZSBpZiAoZWZmZWN0LmlzKGNsb3NlQ29tcGxldGlvbkVmZmVjdCkpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBuZXcgQWN0aXZlU291cmNlKHZhbHVlLnNvdXJjZSwgMCAvKiBTdGF0ZS5JbmFjdGl2ZSAqLyk7XG4gICAgICAgICAgICBlbHNlIGlmIChlZmZlY3QuaXMoc2V0QWN0aXZlRWZmZWN0KSlcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhY3RpdmUgb2YgZWZmZWN0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlLnNvdXJjZSA9PSB2YWx1ZS5zb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFjdGl2ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGhhbmRsZVVzZXJFdmVudCh0ciwgdHlwZSwgY29uZikge1xuICAgICAgICByZXR1cm4gdHlwZSA9PSBcImRlbGV0ZVwiIHx8ICFjb25mLmFjdGl2YXRlT25UeXBpbmcgPyB0aGlzLm1hcCh0ci5jaGFuZ2VzKSA6IG5ldyBBY3RpdmVTb3VyY2UodGhpcy5zb3VyY2UsIDEgLyogU3RhdGUuUGVuZGluZyAqLyk7XG4gICAgfVxuICAgIGhhbmRsZUNoYW5nZSh0cikge1xuICAgICAgICByZXR1cm4gdHIuY2hhbmdlcy50b3VjaGVzUmFuZ2UoY3VyKHRyLnN0YXJ0U3RhdGUpKSA/IG5ldyBBY3RpdmVTb3VyY2UodGhpcy5zb3VyY2UsIDAgLyogU3RhdGUuSW5hY3RpdmUgKi8pIDogdGhpcy5tYXAodHIuY2hhbmdlcyk7XG4gICAgfVxuICAgIG1hcChjaGFuZ2VzKSB7XG4gICAgICAgIHJldHVybiBjaGFuZ2VzLmVtcHR5IHx8IHRoaXMuZXhwbGljaXRQb3MgPCAwID8gdGhpcyA6IG5ldyBBY3RpdmVTb3VyY2UodGhpcy5zb3VyY2UsIHRoaXMuc3RhdGUsIGNoYW5nZXMubWFwUG9zKHRoaXMuZXhwbGljaXRQb3MpKTtcbiAgICB9XG59XG5jbGFzcyBBY3RpdmVSZXN1bHQgZXh0ZW5kcyBBY3RpdmVTb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZSwgZXhwbGljaXRQb3MsIHJlc3VsdCwgZnJvbSwgdG8pIHtcbiAgICAgICAgc3VwZXIoc291cmNlLCAyIC8qIFN0YXRlLlJlc3VsdCAqLywgZXhwbGljaXRQb3MpO1xuICAgICAgICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgIH1cbiAgICBoYXNSZXN1bHQoKSB7IHJldHVybiB0cnVlOyB9XG4gICAgaGFuZGxlVXNlckV2ZW50KHRyLCB0eXBlLCBjb25mKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucmVzdWx0O1xuICAgICAgICBpZiAocmVzdWx0Lm1hcCAmJiAhdHIuY2hhbmdlcy5lbXB0eSlcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5tYXAocmVzdWx0LCB0ci5jaGFuZ2VzKTtcbiAgICAgICAgbGV0IGZyb20gPSB0ci5jaGFuZ2VzLm1hcFBvcyh0aGlzLmZyb20pLCB0byA9IHRyLmNoYW5nZXMubWFwUG9zKHRoaXMudG8sIDEpO1xuICAgICAgICBsZXQgcG9zID0gY3VyKHRyLnN0YXRlKTtcbiAgICAgICAgaWYgKCh0aGlzLmV4cGxpY2l0UG9zIDwgMCA/IHBvcyA8PSBmcm9tIDogcG9zIDwgdGhpcy5mcm9tKSB8fFxuICAgICAgICAgICAgcG9zID4gdG8gfHwgIXJlc3VsdCB8fFxuICAgICAgICAgICAgdHlwZSA9PSBcImRlbGV0ZVwiICYmIGN1cih0ci5zdGFydFN0YXRlKSA9PSB0aGlzLmZyb20pXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVNvdXJjZSh0aGlzLnNvdXJjZSwgdHlwZSA9PSBcImlucHV0XCIgJiYgY29uZi5hY3RpdmF0ZU9uVHlwaW5nID8gMSAvKiBTdGF0ZS5QZW5kaW5nICovIDogMCAvKiBTdGF0ZS5JbmFjdGl2ZSAqLyk7XG4gICAgICAgIGxldCBleHBsaWNpdFBvcyA9IHRoaXMuZXhwbGljaXRQb3MgPCAwID8gLTEgOiB0ci5jaGFuZ2VzLm1hcFBvcyh0aGlzLmV4cGxpY2l0UG9zKTtcbiAgICAgICAgaWYgKGNoZWNrVmFsaWQocmVzdWx0LnZhbGlkRm9yLCB0ci5zdGF0ZSwgZnJvbSwgdG8pKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVSZXN1bHQodGhpcy5zb3VyY2UsIGV4cGxpY2l0UG9zLCByZXN1bHQsIGZyb20sIHRvKTtcbiAgICAgICAgaWYgKHJlc3VsdC51cGRhdGUgJiZcbiAgICAgICAgICAgIChyZXN1bHQgPSByZXN1bHQudXBkYXRlKHJlc3VsdCwgZnJvbSwgdG8sIG5ldyBDb21wbGV0aW9uQ29udGV4dCh0ci5zdGF0ZSwgcG9zLCBleHBsaWNpdFBvcyA+PSAwKSkpKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVSZXN1bHQodGhpcy5zb3VyY2UsIGV4cGxpY2l0UG9zLCByZXN1bHQsIHJlc3VsdC5mcm9tLCAoX2EgPSByZXN1bHQudG8pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGN1cih0ci5zdGF0ZSkpO1xuICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVNvdXJjZSh0aGlzLnNvdXJjZSwgMSAvKiBTdGF0ZS5QZW5kaW5nICovLCBleHBsaWNpdFBvcyk7XG4gICAgfVxuICAgIGhhbmRsZUNoYW5nZSh0cikge1xuICAgICAgICByZXR1cm4gdHIuY2hhbmdlcy50b3VjaGVzUmFuZ2UodGhpcy5mcm9tLCB0aGlzLnRvKSA/IG5ldyBBY3RpdmVTb3VyY2UodGhpcy5zb3VyY2UsIDAgLyogU3RhdGUuSW5hY3RpdmUgKi8pIDogdGhpcy5tYXAodHIuY2hhbmdlcyk7XG4gICAgfVxuICAgIG1hcChtYXBwaW5nKSB7XG4gICAgICAgIGlmIChtYXBwaW5nLmVtcHR5KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLnJlc3VsdC5tYXAgPyB0aGlzLnJlc3VsdC5tYXAodGhpcy5yZXN1bHQsIG1hcHBpbmcpIDogdGhpcy5yZXN1bHQ7XG4gICAgICAgIGlmICghcmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVTb3VyY2UodGhpcy5zb3VyY2UsIDAgLyogU3RhdGUuSW5hY3RpdmUgKi8pO1xuICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVJlc3VsdCh0aGlzLnNvdXJjZSwgdGhpcy5leHBsaWNpdFBvcyA8IDAgPyAtMSA6IG1hcHBpbmcubWFwUG9zKHRoaXMuZXhwbGljaXRQb3MpLCB0aGlzLnJlc3VsdCwgbWFwcGluZy5tYXBQb3ModGhpcy5mcm9tKSwgbWFwcGluZy5tYXBQb3ModGhpcy50bywgMSkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNoZWNrVmFsaWQodmFsaWRGb3IsIHN0YXRlLCBmcm9tLCB0bykge1xuICAgIGlmICghdmFsaWRGb3IpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgdGV4dCA9IHN0YXRlLnNsaWNlRG9jKGZyb20sIHRvKTtcbiAgICByZXR1cm4gdHlwZW9mIHZhbGlkRm9yID09IFwiZnVuY3Rpb25cIiA/IHZhbGlkRm9yKHRleHQsIGZyb20sIHRvLCBzdGF0ZSkgOiBlbnN1cmVBbmNob3IodmFsaWRGb3IsIHRydWUpLnRlc3QodGV4dCk7XG59XG5jb25zdCBzZXRBY3RpdmVFZmZlY3QgPSAvKkBfX1BVUkVfXyovU3RhdGVFZmZlY3QuZGVmaW5lKHtcbiAgICBtYXAoc291cmNlcywgbWFwcGluZykgeyByZXR1cm4gc291cmNlcy5tYXAocyA9PiBzLm1hcChtYXBwaW5nKSk7IH1cbn0pO1xuY29uc3Qgc2V0U2VsZWN0ZWRFZmZlY3QgPSAvKkBfX1BVUkVfXyovU3RhdGVFZmZlY3QuZGVmaW5lKCk7XG5jb25zdCBjb21wbGV0aW9uU3RhdGUgPSAvKkBfX1BVUkVfXyovU3RhdGVGaWVsZC5kZWZpbmUoe1xuICAgIGNyZWF0ZSgpIHsgcmV0dXJuIENvbXBsZXRpb25TdGF0ZS5zdGFydCgpOyB9LFxuICAgIHVwZGF0ZSh2YWx1ZSwgdHIpIHsgcmV0dXJuIHZhbHVlLnVwZGF0ZSh0cik7IH0sXG4gICAgcHJvdmlkZTogZiA9PiBbXG4gICAgICAgIHNob3dUb29sdGlwLmZyb20oZiwgdmFsID0+IHZhbC50b29sdGlwKSxcbiAgICAgICAgRWRpdG9yVmlldy5jb250ZW50QXR0cmlidXRlcy5mcm9tKGYsIHN0YXRlID0+IHN0YXRlLmF0dHJzKVxuICAgIF1cbn0pO1xuZnVuY3Rpb24gYXBwbHlDb21wbGV0aW9uKHZpZXcsIG9wdGlvbikge1xuICAgIGNvbnN0IGFwcGx5ID0gb3B0aW9uLmNvbXBsZXRpb24uYXBwbHkgfHwgb3B0aW9uLmNvbXBsZXRpb24ubGFiZWw7XG4gICAgbGV0IHJlc3VsdCA9IHZpZXcuc3RhdGUuZmllbGQoY29tcGxldGlvblN0YXRlKS5hY3RpdmUuZmluZChhID0+IGEuc291cmNlID09IG9wdGlvbi5zb3VyY2UpO1xuICAgIGlmICghKHJlc3VsdCBpbnN0YW5jZW9mIEFjdGl2ZVJlc3VsdCkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIGFwcGx5ID09IFwic3RyaW5nXCIpXG4gICAgICAgIHZpZXcuZGlzcGF0Y2goT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbnNlcnRDb21wbGV0aW9uVGV4dCh2aWV3LnN0YXRlLCBhcHBseSwgcmVzdWx0LmZyb20sIHJlc3VsdC50bykpLCB7IGFubm90YXRpb25zOiBwaWNrZWRDb21wbGV0aW9uLm9mKG9wdGlvbi5jb21wbGV0aW9uKSB9KSk7XG4gICAgZWxzZVxuICAgICAgICBhcHBseSh2aWV3LCBvcHRpb24uY29tcGxldGlvbiwgcmVzdWx0LmZyb20sIHJlc3VsdC50byk7XG4gICAgcmV0dXJuIHRydWU7XG59XG5jb25zdCBjcmVhdGVUb29sdGlwID0gLypAX19QVVJFX18qL2NvbXBsZXRpb25Ub29sdGlwKGNvbXBsZXRpb25TdGF0ZSwgYXBwbHlDb21wbGV0aW9uKTtcblxuLyoqXG5SZXR1cm5zIGEgY29tbWFuZCB0aGF0IG1vdmVzIHRoZSBjb21wbGV0aW9uIHNlbGVjdGlvbiBmb3J3YXJkIG9yXG5iYWNrd2FyZCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxuKi9cbmZ1bmN0aW9uIG1vdmVDb21wbGV0aW9uU2VsZWN0aW9uKGZvcndhcmQsIGJ5ID0gXCJvcHRpb25cIikge1xuICAgIHJldHVybiAodmlldykgPT4ge1xuICAgICAgICBsZXQgY1N0YXRlID0gdmlldy5zdGF0ZS5maWVsZChjb21wbGV0aW9uU3RhdGUsIGZhbHNlKTtcbiAgICAgICAgaWYgKCFjU3RhdGUgfHwgIWNTdGF0ZS5vcGVuIHx8IGNTdGF0ZS5vcGVuLmRpc2FibGVkIHx8XG4gICAgICAgICAgICBEYXRlLm5vdygpIC0gY1N0YXRlLm9wZW4udGltZXN0YW1wIDwgdmlldy5zdGF0ZS5mYWNldChjb21wbGV0aW9uQ29uZmlnKS5pbnRlcmFjdGlvbkRlbGF5KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgc3RlcCA9IDEsIHRvb2x0aXA7XG4gICAgICAgIGlmIChieSA9PSBcInBhZ2VcIiAmJiAodG9vbHRpcCA9IGdldFRvb2x0aXAodmlldywgY1N0YXRlLm9wZW4udG9vbHRpcCkpKVxuICAgICAgICAgICAgc3RlcCA9IE1hdGgubWF4KDIsIE1hdGguZmxvb3IodG9vbHRpcC5kb20ub2Zmc2V0SGVpZ2h0IC9cbiAgICAgICAgICAgICAgICB0b29sdGlwLmRvbS5xdWVyeVNlbGVjdG9yKFwibGlcIikub2Zmc2V0SGVpZ2h0KSAtIDEpO1xuICAgICAgICBsZXQgeyBsZW5ndGggfSA9IGNTdGF0ZS5vcGVuLm9wdGlvbnM7XG4gICAgICAgIGxldCBzZWxlY3RlZCA9IGNTdGF0ZS5vcGVuLnNlbGVjdGVkID4gLTEgPyBjU3RhdGUub3Blbi5zZWxlY3RlZCArIHN0ZXAgKiAoZm9yd2FyZCA/IDEgOiAtMSkgOiBmb3J3YXJkID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChzZWxlY3RlZCA8IDApXG4gICAgICAgICAgICBzZWxlY3RlZCA9IGJ5ID09IFwicGFnZVwiID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgICAgIGVsc2UgaWYgKHNlbGVjdGVkID49IGxlbmd0aClcbiAgICAgICAgICAgIHNlbGVjdGVkID0gYnkgPT0gXCJwYWdlXCIgPyBsZW5ndGggLSAxIDogMDtcbiAgICAgICAgdmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IHNldFNlbGVjdGVkRWZmZWN0Lm9mKHNlbGVjdGVkKSB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbi8qKlxuQWNjZXB0IHRoZSBjdXJyZW50IGNvbXBsZXRpb24uXG4qL1xuY29uc3QgYWNjZXB0Q29tcGxldGlvbiA9ICh2aWV3KSA9PiB7XG4gICAgbGV0IGNTdGF0ZSA9IHZpZXcuc3RhdGUuZmllbGQoY29tcGxldGlvblN0YXRlLCBmYWxzZSk7XG4gICAgaWYgKHZpZXcuc3RhdGUucmVhZE9ubHkgfHwgIWNTdGF0ZSB8fCAhY1N0YXRlLm9wZW4gfHwgY1N0YXRlLm9wZW4uc2VsZWN0ZWQgPCAwIHx8IGNTdGF0ZS5vcGVuLmRpc2FibGVkIHx8XG4gICAgICAgIERhdGUubm93KCkgLSBjU3RhdGUub3Blbi50aW1lc3RhbXAgPCB2aWV3LnN0YXRlLmZhY2V0KGNvbXBsZXRpb25Db25maWcpLmludGVyYWN0aW9uRGVsYXkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gYXBwbHlDb21wbGV0aW9uKHZpZXcsIGNTdGF0ZS5vcGVuLm9wdGlvbnNbY1N0YXRlLm9wZW4uc2VsZWN0ZWRdKTtcbn07XG4vKipcbkV4cGxpY2l0bHkgc3RhcnQgYXV0b2NvbXBsZXRpb24uXG4qL1xuY29uc3Qgc3RhcnRDb21wbGV0aW9uID0gKHZpZXcpID0+IHtcbiAgICBsZXQgY1N0YXRlID0gdmlldy5zdGF0ZS5maWVsZChjb21wbGV0aW9uU3RhdGUsIGZhbHNlKTtcbiAgICBpZiAoIWNTdGF0ZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBzdGFydENvbXBsZXRpb25FZmZlY3Qub2YodHJ1ZSkgfSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5DbG9zZSB0aGUgY3VycmVudGx5IGFjdGl2ZSBjb21wbGV0aW9uLlxuKi9cbmNvbnN0IGNsb3NlQ29tcGxldGlvbiA9ICh2aWV3KSA9PiB7XG4gICAgbGV0IGNTdGF0ZSA9IHZpZXcuc3RhdGUuZmllbGQoY29tcGxldGlvblN0YXRlLCBmYWxzZSk7XG4gICAgaWYgKCFjU3RhdGUgfHwgIWNTdGF0ZS5hY3RpdmUuc29tZShhID0+IGEuc3RhdGUgIT0gMCAvKiBTdGF0ZS5JbmFjdGl2ZSAqLykpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogY2xvc2VDb21wbGV0aW9uRWZmZWN0Lm9mKG51bGwpIH0pO1xuICAgIHJldHVybiB0cnVlO1xufTtcbmNsYXNzIFJ1bm5pbmdRdWVyeSB7XG4gICAgY29uc3RydWN0b3IoYWN0aXZlLCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLnRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLnVwZGF0ZXMgPSBbXTtcbiAgICAgICAgLy8gTm90ZSB0aGF0ICd1bmRlZmluZWQnIG1lYW5zICdub3QgZG9uZSB5ZXQnLCB3aGVyZWFzICdudWxsJyBtZWFuc1xuICAgICAgICAvLyAncXVlcnkgcmV0dXJuZWQgbnVsbCcuXG4gICAgICAgIHRoaXMuZG9uZSA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG5jb25zdCBNYXhVcGRhdGVDb3VudCA9IDUwLCBNaW5BYm9ydFRpbWUgPSAxMDAwO1xuY29uc3QgY29tcGxldGlvblBsdWdpbiA9IC8qQF9fUFVSRV9fKi9WaWV3UGx1Z2luLmZyb21DbGFzcyhjbGFzcyB7XG4gICAgY29uc3RydWN0b3Iodmlldykge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLmRlYm91bmNlVXBkYXRlID0gLTE7XG4gICAgICAgIHRoaXMucnVubmluZyA9IFtdO1xuICAgICAgICB0aGlzLmRlYm91bmNlQWNjZXB0ID0gLTE7XG4gICAgICAgIHRoaXMucGVuZGluZ1N0YXJ0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29tcG9zaW5nID0gMCAvKiBDb21wb3NpdGlvblN0YXRlLk5vbmUgKi87XG4gICAgICAgIGZvciAobGV0IGFjdGl2ZSBvZiB2aWV3LnN0YXRlLmZpZWxkKGNvbXBsZXRpb25TdGF0ZSkuYWN0aXZlKVxuICAgICAgICAgICAgaWYgKGFjdGl2ZS5zdGF0ZSA9PSAxIC8qIFN0YXRlLlBlbmRpbmcgKi8pXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFF1ZXJ5KGFjdGl2ZSk7XG4gICAgfVxuICAgIHVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgbGV0IGNTdGF0ZSA9IHVwZGF0ZS5zdGF0ZS5maWVsZChjb21wbGV0aW9uU3RhdGUpO1xuICAgICAgICBsZXQgY29uZiA9IHVwZGF0ZS5zdGF0ZS5mYWNldChjb21wbGV0aW9uQ29uZmlnKTtcbiAgICAgICAgaWYgKCF1cGRhdGUuc2VsZWN0aW9uU2V0ICYmICF1cGRhdGUuZG9jQ2hhbmdlZCAmJiB1cGRhdGUuc3RhcnRTdGF0ZS5maWVsZChjb21wbGV0aW9uU3RhdGUpID09IGNTdGF0ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IGRvZXNSZXNldCA9IHVwZGF0ZS50cmFuc2FjdGlvbnMuc29tZSh0ciA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHRyLnNlbGVjdGlvbiB8fCB0ci5kb2NDaGFuZ2VkKSAmJiAhZ2V0VXNlckV2ZW50KHRyLCBjb25mKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ydW5uaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLnJ1bm5pbmdbaV07XG4gICAgICAgICAgICBpZiAoZG9lc1Jlc2V0IHx8XG4gICAgICAgICAgICAgICAgcXVlcnkudXBkYXRlcy5sZW5ndGggKyB1cGRhdGUudHJhbnNhY3Rpb25zLmxlbmd0aCA+IE1heFVwZGF0ZUNvdW50ICYmIERhdGUubm93KCkgLSBxdWVyeS50aW1lID4gTWluQWJvcnRUaW1lKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaGFuZGxlciBvZiBxdWVyeS5jb250ZXh0LmFib3J0TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ0V4Y2VwdGlvbih0aGlzLnZpZXcuc3RhdGUsIGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHF1ZXJ5LmNvbnRleHQuYWJvcnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMucnVubmluZy5zcGxpY2UoaS0tLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHF1ZXJ5LnVwZGF0ZXMucHVzaCguLi51cGRhdGUudHJhbnNhY3Rpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kZWJvdW5jZVVwZGF0ZSA+IC0xKVxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVib3VuY2VVcGRhdGUpO1xuICAgICAgICBpZiAodXBkYXRlLnRyYW5zYWN0aW9ucy5zb21lKHRyID0+IHRyLmVmZmVjdHMuc29tZShlID0+IGUuaXMoc3RhcnRDb21wbGV0aW9uRWZmZWN0KSkpKVxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nU3RhcnQgPSB0cnVlO1xuICAgICAgICBsZXQgZGVsYXkgPSB0aGlzLnBlbmRpbmdTdGFydCA/IDUwIDogY29uZi5hY3RpdmF0ZU9uVHlwaW5nRGVsYXk7XG4gICAgICAgIHRoaXMuZGVib3VuY2VVcGRhdGUgPSBjU3RhdGUuYWN0aXZlLnNvbWUoYSA9PiBhLnN0YXRlID09IDEgLyogU3RhdGUuUGVuZGluZyAqLyAmJiAhdGhpcy5ydW5uaW5nLnNvbWUocSA9PiBxLmFjdGl2ZS5zb3VyY2UgPT0gYS5zb3VyY2UpKVxuICAgICAgICAgICAgPyBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc3RhcnRVcGRhdGUoKSwgZGVsYXkpIDogLTE7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvc2luZyAhPSAwIC8qIENvbXBvc2l0aW9uU3RhdGUuTm9uZSAqLylcbiAgICAgICAgICAgIGZvciAobGV0IHRyIG9mIHVwZGF0ZS50cmFuc2FjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0VXNlckV2ZW50KHRyLCBjb25mKSA9PSBcImlucHV0XCIpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcG9zaW5nID0gMiAvKiBDb21wb3NpdGlvblN0YXRlLkNoYW5nZWQgKi87XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jb21wb3NpbmcgPT0gMiAvKiBDb21wb3NpdGlvblN0YXRlLkNoYW5nZWQgKi8gJiYgdHIuc2VsZWN0aW9uKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBvc2luZyA9IDMgLyogQ29tcG9zaXRpb25TdGF0ZS5DaGFuZ2VkQW5kTW92ZWQgKi87XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIHN0YXJ0VXBkYXRlKCkge1xuICAgICAgICB0aGlzLmRlYm91bmNlVXBkYXRlID0gLTE7XG4gICAgICAgIHRoaXMucGVuZGluZ1N0YXJ0ID0gZmFsc2U7XG4gICAgICAgIGxldCB7IHN0YXRlIH0gPSB0aGlzLnZpZXcsIGNTdGF0ZSA9IHN0YXRlLmZpZWxkKGNvbXBsZXRpb25TdGF0ZSk7XG4gICAgICAgIGZvciAobGV0IGFjdGl2ZSBvZiBjU3RhdGUuYWN0aXZlKSB7XG4gICAgICAgICAgICBpZiAoYWN0aXZlLnN0YXRlID09IDEgLyogU3RhdGUuUGVuZGluZyAqLyAmJiAhdGhpcy5ydW5uaW5nLnNvbWUociA9PiByLmFjdGl2ZS5zb3VyY2UgPT0gYWN0aXZlLnNvdXJjZSkpXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFF1ZXJ5KGFjdGl2ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhcnRRdWVyeShhY3RpdmUpIHtcbiAgICAgICAgbGV0IHsgc3RhdGUgfSA9IHRoaXMudmlldywgcG9zID0gY3VyKHN0YXRlKTtcbiAgICAgICAgbGV0IGNvbnRleHQgPSBuZXcgQ29tcGxldGlvbkNvbnRleHQoc3RhdGUsIHBvcywgYWN0aXZlLmV4cGxpY2l0UG9zID09IHBvcyk7XG4gICAgICAgIGxldCBwZW5kaW5nID0gbmV3IFJ1bm5pbmdRdWVyeShhY3RpdmUsIGNvbnRleHQpO1xuICAgICAgICB0aGlzLnJ1bm5pbmcucHVzaChwZW5kaW5nKTtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKGFjdGl2ZS5zb3VyY2UoY29udGV4dCkpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIGlmICghcGVuZGluZy5jb250ZXh0LmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBwZW5kaW5nLmRvbmUgPSByZXN1bHQgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlQWNjZXB0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGVyciA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBjbG9zZUNvbXBsZXRpb25FZmZlY3Qub2YobnVsbCkgfSk7XG4gICAgICAgICAgICBsb2dFeGNlcHRpb24odGhpcy52aWV3LnN0YXRlLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2NoZWR1bGVBY2NlcHQoKSB7XG4gICAgICAgIGlmICh0aGlzLnJ1bm5pbmcuZXZlcnkocSA9PiBxLmRvbmUgIT09IHVuZGVmaW5lZCkpXG4gICAgICAgICAgICB0aGlzLmFjY2VwdCgpO1xuICAgICAgICBlbHNlIGlmICh0aGlzLmRlYm91bmNlQWNjZXB0IDwgMClcbiAgICAgICAgICAgIHRoaXMuZGVib3VuY2VBY2NlcHQgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuYWNjZXB0KCksIHRoaXMudmlldy5zdGF0ZS5mYWNldChjb21wbGV0aW9uQ29uZmlnKS51cGRhdGVTeW5jVGltZSk7XG4gICAgfVxuICAgIC8vIEZvciBlYWNoIGZpbmlzaGVkIHF1ZXJ5IGluIHRoaXMucnVubmluZywgdHJ5IHRvIGNyZWF0ZSBhIHJlc3VsdFxuICAgIC8vIG9yLCBpZiBhcHByb3ByaWF0ZSwgcmVzdGFydCB0aGUgcXVlcnkuXG4gICAgYWNjZXB0KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLmRlYm91bmNlQWNjZXB0ID4gLTEpXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWJvdW5jZUFjY2VwdCk7XG4gICAgICAgIHRoaXMuZGVib3VuY2VBY2NlcHQgPSAtMTtcbiAgICAgICAgbGV0IHVwZGF0ZWQgPSBbXTtcbiAgICAgICAgbGV0IGNvbmYgPSB0aGlzLnZpZXcuc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ydW5uaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLnJ1bm5pbmdbaV07XG4gICAgICAgICAgICBpZiAocXVlcnkuZG9uZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgdGhpcy5ydW5uaW5nLnNwbGljZShpLS0sIDEpO1xuICAgICAgICAgICAgaWYgKHF1ZXJ5LmRvbmUpIHtcbiAgICAgICAgICAgICAgICBsZXQgYWN0aXZlID0gbmV3IEFjdGl2ZVJlc3VsdChxdWVyeS5hY3RpdmUuc291cmNlLCBxdWVyeS5hY3RpdmUuZXhwbGljaXRQb3MsIHF1ZXJ5LmRvbmUsIHF1ZXJ5LmRvbmUuZnJvbSwgKF9hID0gcXVlcnkuZG9uZS50bykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY3VyKHF1ZXJ5LnVwZGF0ZXMubGVuZ3RoID8gcXVlcnkudXBkYXRlc1swXS5zdGFydFN0YXRlIDogdGhpcy52aWV3LnN0YXRlKSk7XG4gICAgICAgICAgICAgICAgLy8gUmVwbGF5IHRoZSB0cmFuc2FjdGlvbnMgdGhhdCBoYXBwZW5lZCBzaW5jZSB0aGUgc3RhcnQgb2ZcbiAgICAgICAgICAgICAgICAvLyB0aGUgcmVxdWVzdCBhbmQgc2VlIGlmIHRoYXQgcHJlc2VydmVzIHRoZSByZXN1bHRcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB0ciBvZiBxdWVyeS51cGRhdGVzKVxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBhY3RpdmUudXBkYXRlKHRyLCBjb25mKTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlLmhhc1Jlc3VsdCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWQucHVzaChhY3RpdmUpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMudmlldy5zdGF0ZS5maWVsZChjb21wbGV0aW9uU3RhdGUpLmFjdGl2ZS5maW5kKGEgPT4gYS5zb3VyY2UgPT0gcXVlcnkuYWN0aXZlLnNvdXJjZSk7XG4gICAgICAgICAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50LnN0YXRlID09IDEgLyogU3RhdGUuUGVuZGluZyAqLykge1xuICAgICAgICAgICAgICAgIGlmIChxdWVyeS5kb25lID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXhwbGljaXRseSBmYWlsZWQuIFNob3VsZCBjbGVhciB0aGUgcGVuZGluZyBzdGF0dXMgaWYgaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFzbid0IGJlZW4gcmUtc2V0IGluIHRoZSBtZWFudGltZS5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGFjdGl2ZSA9IG5ldyBBY3RpdmVTb3VyY2UocXVlcnkuYWN0aXZlLnNvdXJjZSwgMCAvKiBTdGF0ZS5JbmFjdGl2ZSAqLyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHRyIG9mIHF1ZXJ5LnVwZGF0ZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBhY3RpdmUudXBkYXRlKHRyLCBjb25mKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZS5zdGF0ZSAhPSAxIC8qIFN0YXRlLlBlbmRpbmcgKi8pXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkLnB1c2goYWN0aXZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFyZWQgYnkgc3Vic2VxdWVudCB0cmFuc2FjdGlvbnMuIFJlc3RhcnQuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRRdWVyeShjdXJyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwZGF0ZWQubGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy52aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogc2V0QWN0aXZlRWZmZWN0Lm9mKHVwZGF0ZWQpIH0pO1xuICAgIH1cbn0sIHtcbiAgICBldmVudEhhbmRsZXJzOiB7XG4gICAgICAgIGJsdXIoZXZlbnQpIHtcbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IHRoaXMudmlldy5zdGF0ZS5maWVsZChjb21wbGV0aW9uU3RhdGUsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChzdGF0ZSAmJiBzdGF0ZS50b29sdGlwICYmIHRoaXMudmlldy5zdGF0ZS5mYWNldChjb21wbGV0aW9uQ29uZmlnKS5jbG9zZU9uQmx1cikge1xuICAgICAgICAgICAgICAgIGxldCBkaWFsb2cgPSBzdGF0ZS5vcGVuICYmIGdldFRvb2x0aXAodGhpcy52aWV3LCBzdGF0ZS5vcGVuLnRvb2x0aXApO1xuICAgICAgICAgICAgICAgIGlmICghZGlhbG9nIHx8ICFkaWFsb2cuZG9tLmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IGNsb3NlQ29tcGxldGlvbkVmZmVjdC5vZihudWxsKSB9KSwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb21wb3NpdGlvbnN0YXJ0KCkge1xuICAgICAgICAgICAgdGhpcy5jb21wb3NpbmcgPSAxIC8qIENvbXBvc2l0aW9uU3RhdGUuU3RhcnRlZCAqLztcbiAgICAgICAgfSxcbiAgICAgICAgY29tcG9zaXRpb25lbmQoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb21wb3NpbmcgPT0gMyAvKiBDb21wb3NpdGlvblN0YXRlLkNoYW5nZWRBbmRNb3ZlZCAqLykge1xuICAgICAgICAgICAgICAgIC8vIFNhZmFyaSBmaXJlcyBjb21wb3NpdGlvbmVuZCBldmVudHMgc3luY2hyb25vdXNseSwgcG9zc2libHlcbiAgICAgICAgICAgICAgICAvLyBmcm9tIGluc2lkZSBhbiB1cGRhdGUsIHNvIGRpc3BhdGNoIGFzeW5jaHJvbm91c2x5IHRvIGF2b2lkIHJlZW50cmFuY3lcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IHN0YXJ0Q29tcGxldGlvbkVmZmVjdC5vZihmYWxzZSkgfSksIDIwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29tcG9zaW5nID0gMCAvKiBDb21wb3NpdGlvblN0YXRlLk5vbmUgKi87XG4gICAgICAgIH1cbiAgICB9XG59KTtcbmNvbnN0IHdpbmRvd3MgPSB0eXBlb2YgbmF2aWdhdG9yID09IFwib2JqZWN0XCIgJiYgLypAX19QVVJFX18qLy9XaW4vLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTtcbmNvbnN0IGNvbW1pdENoYXJhY3RlcnMgPSAvKkBfX1BVUkVfXyovUHJlYy5oaWdoZXN0KC8qQF9fUFVSRV9fKi9FZGl0b3JWaWV3LmRvbUV2ZW50SGFuZGxlcnMoe1xuICAgIGtleWRvd24oZXZlbnQsIHZpZXcpIHtcbiAgICAgICAgbGV0IGZpZWxkID0gdmlldy5zdGF0ZS5maWVsZChjb21wbGV0aW9uU3RhdGUsIGZhbHNlKTtcbiAgICAgICAgaWYgKCFmaWVsZCB8fCAhZmllbGQub3BlbiB8fCBmaWVsZC5vcGVuLmRpc2FibGVkIHx8IGZpZWxkLm9wZW4uc2VsZWN0ZWQgPCAwIHx8XG4gICAgICAgICAgICBldmVudC5rZXkubGVuZ3RoID4gMSB8fCBldmVudC5jdHJsS2V5ICYmICEod2luZG93cyAmJiBldmVudC5hbHRLZXkpIHx8IGV2ZW50Lm1ldGFLZXkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCBvcHRpb24gPSBmaWVsZC5vcGVuLm9wdGlvbnNbZmllbGQub3Blbi5zZWxlY3RlZF07XG4gICAgICAgIGxldCByZXN1bHQgPSBmaWVsZC5hY3RpdmUuZmluZChhID0+IGEuc291cmNlID09IG9wdGlvbi5zb3VyY2UpO1xuICAgICAgICBsZXQgY29tbWl0Q2hhcnMgPSBvcHRpb24uY29tcGxldGlvbi5jb21taXRDaGFyYWN0ZXJzIHx8IHJlc3VsdC5yZXN1bHQuY29tbWl0Q2hhcmFjdGVycztcbiAgICAgICAgaWYgKGNvbW1pdENoYXJzICYmIGNvbW1pdENoYXJzLmluZGV4T2YoZXZlbnQua2V5KSA+IC0xKVxuICAgICAgICAgICAgYXBwbHlDb21wbGV0aW9uKHZpZXcsIG9wdGlvbik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59KSk7XG5cbmNvbnN0IGJhc2VUaGVtZSA9IC8qQF9fUFVSRV9fKi9FZGl0b3JWaWV3LmJhc2VUaGVtZSh7XG4gICAgXCIuY20tdG9vbHRpcC5jbS10b29sdGlwLWF1dG9jb21wbGV0ZVwiOiB7XG4gICAgICAgIFwiJiA+IHVsXCI6IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwibW9ub3NwYWNlXCIsXG4gICAgICAgICAgICB3aGl0ZVNwYWNlOiBcIm5vd3JhcFwiLFxuICAgICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuIGF1dG9cIixcbiAgICAgICAgICAgIG1heFdpZHRoX2ZhbGxiYWNrOiBcIjcwMHB4XCIsXG4gICAgICAgICAgICBtYXhXaWR0aDogXCJtaW4oNzAwcHgsIDk1dncpXCIsXG4gICAgICAgICAgICBtaW5XaWR0aDogXCIyNTBweFwiLFxuICAgICAgICAgICAgbWF4SGVpZ2h0OiBcIjEwZW1cIixcbiAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICBsaXN0U3R5bGU6IFwibm9uZVwiLFxuICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgIFwiJiA+IGxpLCAmID4gY29tcGxldGlvbi1zZWN0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiBcIjFweCAzcHhcIixcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIiYgPiBsaVwiOiB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dYOiBcImhpZGRlblwiLFxuICAgICAgICAgICAgICAgIHRleHRPdmVyZmxvdzogXCJlbGxpcHNpc1wiLFxuICAgICAgICAgICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIiYgPiBjb21wbGV0aW9uLXNlY3Rpb25cIjoge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwibGlzdC1pdGVtXCIsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBzaWx2ZXJcIixcbiAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogXCIwLjVlbVwiLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuN1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIiZsaWdodCAuY20tdG9vbHRpcC1hdXRvY29tcGxldGUgdWwgbGlbYXJpYS1zZWxlY3RlZF1cIjoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBcIiMxN2NcIixcbiAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICB9LFxuICAgIFwiJmxpZ2h0IC5jbS10b29sdGlwLWF1dG9jb21wbGV0ZS1kaXNhYmxlZCB1bCBsaVthcmlhLXNlbGVjdGVkXVwiOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IFwiIzc3N1wiLFxuICAgIH0sXG4gICAgXCImZGFyayAuY20tdG9vbHRpcC1hdXRvY29tcGxldGUgdWwgbGlbYXJpYS1zZWxlY3RlZF1cIjoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBcIiMzNDdcIixcbiAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICB9LFxuICAgIFwiJmRhcmsgLmNtLXRvb2x0aXAtYXV0b2NvbXBsZXRlLWRpc2FibGVkIHVsIGxpW2FyaWEtc2VsZWN0ZWRdXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZDogXCIjNDQ0XCIsXG4gICAgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uTGlzdEluY29tcGxldGVUb3A6YmVmb3JlLCAuY20tY29tcGxldGlvbkxpc3RJbmNvbXBsZXRlQm90dG9tOmFmdGVyXCI6IHtcbiAgICAgICAgY29udGVudDogJ1wiwrfCt8K3XCInLFxuICAgICAgICBvcGFjaXR5OiAwLjUsXG4gICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiXG4gICAgfSxcbiAgICBcIi5jbS10b29sdGlwLmNtLWNvbXBsZXRpb25JbmZvXCI6IHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgcGFkZGluZzogXCIzcHggOXB4XCIsXG4gICAgICAgIHdpZHRoOiBcIm1heC1jb250ZW50XCIsXG4gICAgICAgIG1heFdpZHRoOiBgJHs0MDAgLyogSW5mby5XaWR0aCAqL31weGAsXG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCJcbiAgICB9LFxuICAgIFwiLmNtLWNvbXBsZXRpb25JbmZvLmNtLWNvbXBsZXRpb25JbmZvLWxlZnRcIjogeyByaWdodDogXCIxMDAlXCIgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uSW5mby5jbS1jb21wbGV0aW9uSW5mby1yaWdodFwiOiB7IGxlZnQ6IFwiMTAwJVwiIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkluZm8uY20tY29tcGxldGlvbkluZm8tbGVmdC1uYXJyb3dcIjogeyByaWdodDogYCR7MzAgLyogSW5mby5NYXJnaW4gKi99cHhgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkluZm8uY20tY29tcGxldGlvbkluZm8tcmlnaHQtbmFycm93XCI6IHsgbGVmdDogYCR7MzAgLyogSW5mby5NYXJnaW4gKi99cHhgIH0sXG4gICAgXCImbGlnaHQgLmNtLXNuaXBwZXRGaWVsZFwiOiB7IGJhY2tncm91bmRDb2xvcjogXCIjMDAwMDAwMjJcIiB9LFxuICAgIFwiJmRhcmsgLmNtLXNuaXBwZXRGaWVsZFwiOiB7IGJhY2tncm91bmRDb2xvcjogXCIjZmZmZmZmMjJcIiB9LFxuICAgIFwiLmNtLXNuaXBwZXRGaWVsZFBvc2l0aW9uXCI6IHtcbiAgICAgICAgdmVydGljYWxBbGlnbjogXCJ0ZXh0LXRvcFwiLFxuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiBcIjEuMTVlbVwiLFxuICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICBtYXJnaW46IFwiMCAtMC43cHggLS43ZW1cIixcbiAgICAgICAgYm9yZGVyTGVmdDogXCIxLjRweCBkb3R0ZWQgIzg4OFwiXG4gICAgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uTWF0Y2hlZFRleHRcIjoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJ1bmRlcmxpbmVcIlxuICAgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkRldGFpbFwiOiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6IFwiMC41ZW1cIixcbiAgICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uSWNvblwiOiB7XG4gICAgICAgIGZvbnRTaXplOiBcIjkwJVwiLFxuICAgICAgICB3aWR0aDogXCIuOGVtXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCIsXG4gICAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBcIi42ZW1cIixcbiAgICAgICAgb3BhY2l0eTogXCIwLjZcIixcbiAgICAgICAgYm94U2l6aW5nOiBcImNvbnRlbnQtYm94XCJcbiAgICB9LFxuICAgIFwiLmNtLWNvbXBsZXRpb25JY29uLWZ1bmN0aW9uLCAuY20tY29tcGxldGlvbkljb24tbWV0aG9kXCI6IHtcbiAgICAgICAgXCImOmFmdGVyXCI6IHsgY29udGVudDogXCInxpInXCIgfVxuICAgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkljb24tY2xhc3NcIjoge1xuICAgICAgICBcIiY6YWZ0ZXJcIjogeyBjb250ZW50OiBcIifil4snXCIgfVxuICAgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkljb24taW50ZXJmYWNlXCI6IHtcbiAgICAgICAgXCImOmFmdGVyXCI6IHsgY29udGVudDogXCIn4peMJ1wiIH1cbiAgICB9LFxuICAgIFwiLmNtLWNvbXBsZXRpb25JY29uLXZhcmlhYmxlXCI6IHtcbiAgICAgICAgXCImOmFmdGVyXCI6IHsgY29udGVudDogXCIn8J2RpSdcIiB9XG4gICAgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uSWNvbi1jb25zdGFudFwiOiB7XG4gICAgICAgIFwiJjphZnRlclwiOiB7IGNvbnRlbnQ6IFwiJ/CdkLYnXCIgfVxuICAgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkljb24tdHlwZVwiOiB7XG4gICAgICAgIFwiJjphZnRlclwiOiB7IGNvbnRlbnQ6IFwiJ/CdkaEnXCIgfVxuICAgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkljb24tZW51bVwiOiB7XG4gICAgICAgIFwiJjphZnRlclwiOiB7IGNvbnRlbnQ6IFwiJ+KIqidcIiB9XG4gICAgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uSWNvbi1wcm9wZXJ0eVwiOiB7XG4gICAgICAgIFwiJjphZnRlclwiOiB7IGNvbnRlbnQ6IFwiJ+KWoSdcIiB9XG4gICAgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uSWNvbi1rZXl3b3JkXCI6IHtcbiAgICAgICAgXCImOmFmdGVyXCI6IHsgY29udGVudDogXCIn8J+UkVxcdUZFMEUnXCIgfSAvLyBEaXNhYmxlIGVtb2ppIHJlbmRlcmluZ1xuICAgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkljb24tbmFtZXNwYWNlXCI6IHtcbiAgICAgICAgXCImOmFmdGVyXCI6IHsgY29udGVudDogXCIn4paiJ1wiIH1cbiAgICB9LFxuICAgIFwiLmNtLWNvbXBsZXRpb25JY29uLXRleHRcIjoge1xuICAgICAgICBcIiY6YWZ0ZXJcIjogeyBjb250ZW50OiBcIidhYmMnXCIsIGZvbnRTaXplOiBcIjUwJVwiLCB2ZXJ0aWNhbEFsaWduOiBcIm1pZGRsZVwiIH1cbiAgICB9XG59KTtcblxuY2xhc3MgRmllbGRQb3Mge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkLCBsaW5lLCBmcm9tLCB0bykge1xuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIHRoaXMubGluZSA9IGxpbmU7XG4gICAgICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMudG8gPSB0bztcbiAgICB9XG59XG5jbGFzcyBGaWVsZFJhbmdlIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZCwgZnJvbSwgdG8pIHtcbiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLnRvID0gdG87XG4gICAgfVxuICAgIG1hcChjaGFuZ2VzKSB7XG4gICAgICAgIGxldCBmcm9tID0gY2hhbmdlcy5tYXBQb3ModGhpcy5mcm9tLCAtMSwgTWFwTW9kZS5UcmFja0RlbCk7XG4gICAgICAgIGxldCB0byA9IGNoYW5nZXMubWFwUG9zKHRoaXMudG8sIDEsIE1hcE1vZGUuVHJhY2tEZWwpO1xuICAgICAgICByZXR1cm4gZnJvbSA9PSBudWxsIHx8IHRvID09IG51bGwgPyBudWxsIDogbmV3IEZpZWxkUmFuZ2UodGhpcy5maWVsZCwgZnJvbSwgdG8pO1xuICAgIH1cbn1cbmNsYXNzIFNuaXBwZXQge1xuICAgIGNvbnN0cnVjdG9yKGxpbmVzLCBmaWVsZFBvc2l0aW9ucykge1xuICAgICAgICB0aGlzLmxpbmVzID0gbGluZXM7XG4gICAgICAgIHRoaXMuZmllbGRQb3NpdGlvbnMgPSBmaWVsZFBvc2l0aW9ucztcbiAgICB9XG4gICAgaW5zdGFudGlhdGUoc3RhdGUsIHBvcykge1xuICAgICAgICBsZXQgdGV4dCA9IFtdLCBsaW5lU3RhcnQgPSBbcG9zXTtcbiAgICAgICAgbGV0IGxpbmVPYmogPSBzdGF0ZS5kb2MubGluZUF0KHBvcyksIGJhc2VJbmRlbnQgPSAvXlxccyovLmV4ZWMobGluZU9iai50ZXh0KVswXTtcbiAgICAgICAgZm9yIChsZXQgbGluZSBvZiB0aGlzLmxpbmVzKSB7XG4gICAgICAgICAgICBpZiAodGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZW50ID0gYmFzZUluZGVudCwgdGFicyA9IC9eXFx0Ki8uZXhlYyhsaW5lKVswXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWJzOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIGluZGVudCArPSBzdGF0ZS5mYWNldChpbmRlbnRVbml0KTtcbiAgICAgICAgICAgICAgICBsaW5lU3RhcnQucHVzaChwb3MgKyBpbmRlbnQubGVuZ3RoIC0gdGFicyk7XG4gICAgICAgICAgICAgICAgbGluZSA9IGluZGVudCArIGxpbmUuc2xpY2UodGFicyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0LnB1c2gobGluZSk7XG4gICAgICAgICAgICBwb3MgKz0gbGluZS5sZW5ndGggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGxldCByYW5nZXMgPSB0aGlzLmZpZWxkUG9zaXRpb25zLm1hcChwb3MgPT4gbmV3IEZpZWxkUmFuZ2UocG9zLmZpZWxkLCBsaW5lU3RhcnRbcG9zLmxpbmVdICsgcG9zLmZyb20sIGxpbmVTdGFydFtwb3MubGluZV0gKyBwb3MudG8pKTtcbiAgICAgICAgcmV0dXJuIHsgdGV4dCwgcmFuZ2VzIH07XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZSh0ZW1wbGF0ZSkge1xuICAgICAgICBsZXQgZmllbGRzID0gW107XG4gICAgICAgIGxldCBsaW5lcyA9IFtdLCBwb3NpdGlvbnMgPSBbXSwgbTtcbiAgICAgICAgZm9yIChsZXQgbGluZSBvZiB0ZW1wbGF0ZS5zcGxpdCgvXFxyXFxuP3xcXG4vKSkge1xuICAgICAgICAgICAgd2hpbGUgKG0gPSAvWyMkXVxceyg/OihcXGQrKSg/OjooW159XSopKT98KCg/OlxcXFxbe31dfFtefV0pKikpXFx9Ly5leGVjKGxpbmUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlcSA9IG1bMV0gPyArbVsxXSA6IG51bGwsIHJhd05hbWUgPSBtWzJdIHx8IG1bM10gfHwgXCJcIiwgZm91bmQgPSAtMTtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IHJhd05hbWUucmVwbGFjZSgvXFxcXFt7fV0vZywgbSA9PiBtWzFdKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VxICE9IG51bGwgPyBmaWVsZHNbaV0uc2VxID09IHNlcSA6IG5hbWUgPyBmaWVsZHNbaV0ubmFtZSA9PSBuYW1lIDogZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmb3VuZCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IGZpZWxkcy5sZW5ndGggJiYgKHNlcSA9PSBudWxsIHx8IChmaWVsZHNbaV0uc2VxICE9IG51bGwgJiYgZmllbGRzW2ldLnNlcSA8IHNlcSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICBmaWVsZHMuc3BsaWNlKGksIDAsIHsgc2VxLCBuYW1lIH0pO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHBvcyBvZiBwb3NpdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zLmZpZWxkID49IGZvdW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5maWVsZCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaChuZXcgRmllbGRQb3MoZm91bmQsIGxpbmVzLmxlbmd0aCwgbS5pbmRleCwgbS5pbmRleCArIG5hbWUubGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgbGluZSA9IGxpbmUuc2xpY2UoMCwgbS5pbmRleCkgKyByYXdOYW1lICsgbGluZS5zbGljZShtLmluZGV4ICsgbVswXS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZSgvXFxcXChbe31dKS9nLCAoXywgYnJhY2UsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcG9zIG9mIHBvc2l0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcy5saW5lID09IGxpbmVzLmxlbmd0aCAmJiBwb3MuZnJvbSA+IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuZnJvbS0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zLnRvLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYnJhY2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxpbmVzLnB1c2gobGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTbmlwcGV0KGxpbmVzLCBwb3NpdGlvbnMpO1xuICAgIH1cbn1cbmxldCBmaWVsZE1hcmtlciA9IC8qQF9fUFVSRV9fKi9EZWNvcmF0aW9uLndpZGdldCh7IHdpZGdldDogLypAX19QVVJFX18qL25ldyBjbGFzcyBleHRlbmRzIFdpZGdldFR5cGUge1xuICAgICAgICB0b0RPTSgpIHtcbiAgICAgICAgICAgIGxldCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICBzcGFuLmNsYXNzTmFtZSA9IFwiY20tc25pcHBldEZpZWxkUG9zaXRpb25cIjtcbiAgICAgICAgICAgIHJldHVybiBzcGFuO1xuICAgICAgICB9XG4gICAgICAgIGlnbm9yZUV2ZW50KCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICB9IH0pO1xubGV0IGZpZWxkUmFuZ2UgPSAvKkBfX1BVUkVfXyovRGVjb3JhdGlvbi5tYXJrKHsgY2xhc3M6IFwiY20tc25pcHBldEZpZWxkXCIgfSk7XG5jbGFzcyBBY3RpdmVTbmlwcGV0IHtcbiAgICBjb25zdHJ1Y3RvcihyYW5nZXMsIGFjdGl2ZSkge1xuICAgICAgICB0aGlzLnJhbmdlcyA9IHJhbmdlcztcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgIHRoaXMuZGVjbyA9IERlY29yYXRpb24uc2V0KHJhbmdlcy5tYXAociA9PiAoci5mcm9tID09IHIudG8gPyBmaWVsZE1hcmtlciA6IGZpZWxkUmFuZ2UpLnJhbmdlKHIuZnJvbSwgci50bykpKTtcbiAgICB9XG4gICAgbWFwKGNoYW5nZXMpIHtcbiAgICAgICAgbGV0IHJhbmdlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCByIG9mIHRoaXMucmFuZ2VzKSB7XG4gICAgICAgICAgICBsZXQgbWFwcGVkID0gci5tYXAoY2hhbmdlcyk7XG4gICAgICAgICAgICBpZiAoIW1hcHBlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKG1hcHBlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVTbmlwcGV0KHJhbmdlcywgdGhpcy5hY3RpdmUpO1xuICAgIH1cbiAgICBzZWxlY3Rpb25JbnNpZGVGaWVsZChzZWwpIHtcbiAgICAgICAgcmV0dXJuIHNlbC5yYW5nZXMuZXZlcnkocmFuZ2UgPT4gdGhpcy5yYW5nZXMuc29tZShyID0+IHIuZmllbGQgPT0gdGhpcy5hY3RpdmUgJiYgci5mcm9tIDw9IHJhbmdlLmZyb20gJiYgci50byA+PSByYW5nZS50bykpO1xuICAgIH1cbn1cbmNvbnN0IHNldEFjdGl2ZSA9IC8qQF9fUFVSRV9fKi9TdGF0ZUVmZmVjdC5kZWZpbmUoe1xuICAgIG1hcCh2YWx1ZSwgY2hhbmdlcykgeyByZXR1cm4gdmFsdWUgJiYgdmFsdWUubWFwKGNoYW5nZXMpOyB9XG59KTtcbmNvbnN0IG1vdmVUb0ZpZWxkID0gLypAX19QVVJFX18qL1N0YXRlRWZmZWN0LmRlZmluZSgpO1xuY29uc3Qgc25pcHBldFN0YXRlID0gLypAX19QVVJFX18qL1N0YXRlRmllbGQuZGVmaW5lKHtcbiAgICBjcmVhdGUoKSB7IHJldHVybiBudWxsOyB9LFxuICAgIHVwZGF0ZSh2YWx1ZSwgdHIpIHtcbiAgICAgICAgZm9yIChsZXQgZWZmZWN0IG9mIHRyLmVmZmVjdHMpIHtcbiAgICAgICAgICAgIGlmIChlZmZlY3QuaXMoc2V0QWN0aXZlKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZWZmZWN0LnZhbHVlO1xuICAgICAgICAgICAgaWYgKGVmZmVjdC5pcyhtb3ZlVG9GaWVsZCkgJiYgdmFsdWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVTbmlwcGV0KHZhbHVlLnJhbmdlcywgZWZmZWN0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgJiYgdHIuZG9jQ2hhbmdlZClcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUubWFwKHRyLmNoYW5nZXMpO1xuICAgICAgICBpZiAodmFsdWUgJiYgdHIuc2VsZWN0aW9uICYmICF2YWx1ZS5zZWxlY3Rpb25JbnNpZGVGaWVsZCh0ci5zZWxlY3Rpb24pKVxuICAgICAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBwcm92aWRlOiBmID0+IEVkaXRvclZpZXcuZGVjb3JhdGlvbnMuZnJvbShmLCB2YWwgPT4gdmFsID8gdmFsLmRlY28gOiBEZWNvcmF0aW9uLm5vbmUpXG59KTtcbmZ1bmN0aW9uIGZpZWxkU2VsZWN0aW9uKHJhbmdlcywgZmllbGQpIHtcbiAgICByZXR1cm4gRWRpdG9yU2VsZWN0aW9uLmNyZWF0ZShyYW5nZXMuZmlsdGVyKHIgPT4gci5maWVsZCA9PSBmaWVsZCkubWFwKHIgPT4gRWRpdG9yU2VsZWN0aW9uLnJhbmdlKHIuZnJvbSwgci50bykpKTtcbn1cbi8qKlxuQ29udmVydCBhIHNuaXBwZXQgdGVtcGxhdGUgdG8gYSBmdW5jdGlvbiB0aGF0IGNhblxuW2FwcGx5XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2F1dG9jb21wbGV0ZS5Db21wbGV0aW9uLmFwcGx5KSBpdC4gU25pcHBldHMgYXJlIHdyaXR0ZW5cbnVzaW5nIHN5bnRheCBsaWtlIHRoaXM6XG5cbiAgICBcImZvciAobGV0ICR7aW5kZXh9ID0gMDsgJHtpbmRleH0gPCAke2VuZH07ICR7aW5kZXh9KyspIHtcXG5cXHQke31cXG59XCJcblxuRWFjaCBgJHt9YCBwbGFjZWhvbGRlciAoeW91IG1heSBhbHNvIHVzZSBgI3t9YCkgaW5kaWNhdGVzIGEgZmllbGRcbnRoYXQgdGhlIHVzZXIgY2FuIGZpbGwgaW4uIEl0cyBuYW1lLCBpZiBhbnksIHdpbGwgYmUgdGhlIGRlZmF1bHRcbmNvbnRlbnQgZm9yIHRoZSBmaWVsZC5cblxuV2hlbiB0aGUgc25pcHBldCBpcyBhY3RpdmF0ZWQgYnkgY2FsbGluZyB0aGUgcmV0dXJuZWQgZnVuY3Rpb24sXG50aGUgY29kZSBpcyBpbnNlcnRlZCBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24uIE5ld2xpbmVzIGluIHRoZVxudGVtcGxhdGUgYXJlIGluZGVudGVkIGJ5IHRoZSBpbmRlbnRhdGlvbiBvZiB0aGUgc3RhcnQgbGluZSwgcGx1c1xub25lIFtpbmRlbnQgdW5pdF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5pbmRlbnRVbml0KSBwZXIgdGFiIGNoYXJhY3RlciBhZnRlclxudGhlIG5ld2xpbmUuXG5cbk9uIGFjdGl2YXRpb24sIChhbGwgaW5zdGFuY2VzIG9mKSB0aGUgZmlyc3QgZmllbGQgYXJlIHNlbGVjdGVkLlxuVGhlIHVzZXIgY2FuIG1vdmUgYmV0d2VlbiBmaWVsZHMgd2l0aCBUYWIgYW5kIFNoaWZ0LVRhYiBhcyBsb25nIGFzXG50aGUgZmllbGRzIGFyZSBhY3RpdmUuIE1vdmluZyB0byB0aGUgbGFzdCBmaWVsZCBvciBtb3ZpbmcgdGhlXG5jdXJzb3Igb3V0IG9mIHRoZSBjdXJyZW50IGZpZWxkIGRlYWN0aXZhdGVzIHRoZSBmaWVsZHMuXG5cblRoZSBvcmRlciBvZiBmaWVsZHMgZGVmYXVsdHMgdG8gdGV4dHVhbCBvcmRlciwgYnV0IHlvdSBjYW4gYWRkXG5udW1iZXJzIHRvIHBsYWNlaG9sZGVycyAoYCR7MX1gIG9yIGAkezE6ZGVmYXVsdFRleHR9YCkgdG8gcHJvdmlkZVxuYSBjdXN0b20gb3JkZXIuXG5cblRvIGluY2x1ZGUgYSBsaXRlcmFsIGB7YCBvciBgfWAgaW4geW91ciB0ZW1wbGF0ZSwgcHV0IGEgYmFja3NsYXNoXG5pbiBmcm9udCBvZiBpdC4gVGhpcyB3aWxsIGJlIHJlbW92ZWQgYW5kIHRoZSBicmFjZSB3aWxsIG5vdCBiZVxuaW50ZXJwcmV0ZWQgYXMgaW5kaWNhdGluZyBhIHBsYWNlaG9sZGVyLlxuKi9cbmZ1bmN0aW9uIHNuaXBwZXQodGVtcGxhdGUpIHtcbiAgICBsZXQgc25pcHBldCA9IFNuaXBwZXQucGFyc2UodGVtcGxhdGUpO1xuICAgIHJldHVybiAoZWRpdG9yLCBjb21wbGV0aW9uLCBmcm9tLCB0bykgPT4ge1xuICAgICAgICBsZXQgeyB0ZXh0LCByYW5nZXMgfSA9IHNuaXBwZXQuaW5zdGFudGlhdGUoZWRpdG9yLnN0YXRlLCBmcm9tKTtcbiAgICAgICAgbGV0IHNwZWMgPSB7XG4gICAgICAgICAgICBjaGFuZ2VzOiB7IGZyb20sIHRvLCBpbnNlcnQ6IFRleHQub2YodGV4dCkgfSxcbiAgICAgICAgICAgIHNjcm9sbEludG9WaWV3OiB0cnVlLFxuICAgICAgICAgICAgYW5ub3RhdGlvbnM6IGNvbXBsZXRpb24gPyBbcGlja2VkQ29tcGxldGlvbi5vZihjb21wbGV0aW9uKSwgVHJhbnNhY3Rpb24udXNlckV2ZW50Lm9mKFwiaW5wdXQuY29tcGxldGVcIildIDogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICAgIGlmIChyYW5nZXMubGVuZ3RoKVxuICAgICAgICAgICAgc3BlYy5zZWxlY3Rpb24gPSBmaWVsZFNlbGVjdGlvbihyYW5nZXMsIDApO1xuICAgICAgICBpZiAocmFuZ2VzLnNvbWUociA9PiByLmZpZWxkID4gMCkpIHtcbiAgICAgICAgICAgIGxldCBhY3RpdmUgPSBuZXcgQWN0aXZlU25pcHBldChyYW5nZXMsIDApO1xuICAgICAgICAgICAgbGV0IGVmZmVjdHMgPSBzcGVjLmVmZmVjdHMgPSBbc2V0QWN0aXZlLm9mKGFjdGl2ZSldO1xuICAgICAgICAgICAgaWYgKGVkaXRvci5zdGF0ZS5maWVsZChzbmlwcGV0U3RhdGUsIGZhbHNlKSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGVmZmVjdHMucHVzaChTdGF0ZUVmZmVjdC5hcHBlbmRDb25maWcub2YoW3NuaXBwZXRTdGF0ZSwgYWRkU25pcHBldEtleW1hcCwgc25pcHBldFBvaW50ZXJIYW5kbGVyLCBiYXNlVGhlbWVdKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWRpdG9yLmRpc3BhdGNoKGVkaXRvci5zdGF0ZS51cGRhdGUoc3BlYykpO1xuICAgIH07XG59XG5mdW5jdGlvbiBtb3ZlRmllbGQoZGlyKSB7XG4gICAgcmV0dXJuICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgICAgIGxldCBhY3RpdmUgPSBzdGF0ZS5maWVsZChzbmlwcGV0U3RhdGUsIGZhbHNlKTtcbiAgICAgICAgaWYgKCFhY3RpdmUgfHwgZGlyIDwgMCAmJiBhY3RpdmUuYWN0aXZlID09IDApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCBuZXh0ID0gYWN0aXZlLmFjdGl2ZSArIGRpciwgbGFzdCA9IGRpciA+IDAgJiYgIWFjdGl2ZS5yYW5nZXMuc29tZShyID0+IHIuZmllbGQgPT0gbmV4dCArIGRpcik7XG4gICAgICAgIGRpc3BhdGNoKHN0YXRlLnVwZGF0ZSh7XG4gICAgICAgICAgICBzZWxlY3Rpb246IGZpZWxkU2VsZWN0aW9uKGFjdGl2ZS5yYW5nZXMsIG5leHQpLFxuICAgICAgICAgICAgZWZmZWN0czogc2V0QWN0aXZlLm9mKGxhc3QgPyBudWxsIDogbmV3IEFjdGl2ZVNuaXBwZXQoYWN0aXZlLnJhbmdlcywgbmV4dCkpLFxuICAgICAgICAgICAgc2Nyb2xsSW50b1ZpZXc6IHRydWVcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuLyoqXG5BIGNvbW1hbmQgdGhhdCBjbGVhcnMgdGhlIGFjdGl2ZSBzbmlwcGV0LCBpZiBhbnkuXG4qL1xuY29uc3QgY2xlYXJTbmlwcGV0ID0gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICBsZXQgYWN0aXZlID0gc3RhdGUuZmllbGQoc25pcHBldFN0YXRlLCBmYWxzZSk7XG4gICAgaWYgKCFhY3RpdmUpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBkaXNwYXRjaChzdGF0ZS51cGRhdGUoeyBlZmZlY3RzOiBzZXRBY3RpdmUub2YobnVsbCkgfSkpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuTW92ZSB0byB0aGUgbmV4dCBzbmlwcGV0IGZpZWxkLCBpZiBhdmFpbGFibGUuXG4qL1xuY29uc3QgbmV4dFNuaXBwZXRGaWVsZCA9IC8qQF9fUFVSRV9fKi9tb3ZlRmllbGQoMSk7XG4vKipcbk1vdmUgdG8gdGhlIHByZXZpb3VzIHNuaXBwZXQgZmllbGQsIGlmIGF2YWlsYWJsZS5cbiovXG5jb25zdCBwcmV2U25pcHBldEZpZWxkID0gLypAX19QVVJFX18qL21vdmVGaWVsZCgtMSk7XG4vKipcbkNoZWNrIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSBzbmlwcGV0IHdpdGggYSBuZXh0IGZpZWxkIGZvclxuYG5leHRTbmlwcGV0RmllbGRgIHRvIG1vdmUgdG8uXG4qL1xuZnVuY3Rpb24gaGFzTmV4dFNuaXBwZXRGaWVsZChzdGF0ZSkge1xuICAgIGxldCBhY3RpdmUgPSBzdGF0ZS5maWVsZChzbmlwcGV0U3RhdGUsIGZhbHNlKTtcbiAgICByZXR1cm4gISEoYWN0aXZlICYmIGFjdGl2ZS5yYW5nZXMuc29tZShyID0+IHIuZmllbGQgPT0gYWN0aXZlLmFjdGl2ZSArIDEpKTtcbn1cbi8qKlxuUmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSBzbmlwcGV0IGFuZCBhIHByZXZpb3VzIGZpZWxkXG5mb3IgYHByZXZTbmlwcGV0RmllbGRgIHRvIG1vdmUgdG8uXG4qL1xuZnVuY3Rpb24gaGFzUHJldlNuaXBwZXRGaWVsZChzdGF0ZSkge1xuICAgIGxldCBhY3RpdmUgPSBzdGF0ZS5maWVsZChzbmlwcGV0U3RhdGUsIGZhbHNlKTtcbiAgICByZXR1cm4gISEoYWN0aXZlICYmIGFjdGl2ZS5hY3RpdmUgPiAwKTtcbn1cbmNvbnN0IGRlZmF1bHRTbmlwcGV0S2V5bWFwID0gW1xuICAgIHsga2V5OiBcIlRhYlwiLCBydW46IG5leHRTbmlwcGV0RmllbGQsIHNoaWZ0OiBwcmV2U25pcHBldEZpZWxkIH0sXG4gICAgeyBrZXk6IFwiRXNjYXBlXCIsIHJ1bjogY2xlYXJTbmlwcGV0IH1cbl07XG4vKipcbkEgZmFjZXQgdGhhdCBjYW4gYmUgdXNlZCB0byBjb25maWd1cmUgdGhlIGtleSBiaW5kaW5ncyB1c2VkIGJ5XG5zbmlwcGV0cy4gVGhlIGRlZmF1bHQgYmluZHMgVGFiIHRvXG5bYG5leHRTbmlwcGV0RmllbGRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2F1dG9jb21wbGV0ZS5uZXh0U25pcHBldEZpZWxkKSwgU2hpZnQtVGFiIHRvXG5bYHByZXZTbmlwcGV0RmllbGRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2F1dG9jb21wbGV0ZS5wcmV2U25pcHBldEZpZWxkKSwgYW5kIEVzY2FwZVxudG8gW2BjbGVhclNuaXBwZXRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2F1dG9jb21wbGV0ZS5jbGVhclNuaXBwZXQpLlxuKi9cbmNvbnN0IHNuaXBwZXRLZXltYXAgPSAvKkBfX1BVUkVfXyovRmFjZXQuZGVmaW5lKHtcbiAgICBjb21iaW5lKG1hcHMpIHsgcmV0dXJuIG1hcHMubGVuZ3RoID8gbWFwc1swXSA6IGRlZmF1bHRTbmlwcGV0S2V5bWFwOyB9XG59KTtcbmNvbnN0IGFkZFNuaXBwZXRLZXltYXAgPSAvKkBfX1BVUkVfXyovUHJlYy5oaWdoZXN0KC8qQF9fUFVSRV9fKi9rZXltYXAuY29tcHV0ZShbc25pcHBldEtleW1hcF0sIHN0YXRlID0+IHN0YXRlLmZhY2V0KHNuaXBwZXRLZXltYXApKSk7XG4vKipcbkNyZWF0ZSBhIGNvbXBsZXRpb24gZnJvbSBhIHNuaXBwZXQuIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlXG5wcm9wZXJ0aWVzIGZyb20gYGNvbXBsZXRpb25gLCBwbHVzIGFuIGBhcHBseWAgZnVuY3Rpb24gdGhhdFxuYXBwbGllcyB0aGUgc25pcHBldC5cbiovXG5mdW5jdGlvbiBzbmlwcGV0Q29tcGxldGlvbih0ZW1wbGF0ZSwgY29tcGxldGlvbikge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbXBsZXRpb24pLCB7IGFwcGx5OiBzbmlwcGV0KHRlbXBsYXRlKSB9KTtcbn1cbmNvbnN0IHNuaXBwZXRQb2ludGVySGFuZGxlciA9IC8qQF9fUFVSRV9fKi9FZGl0b3JWaWV3LmRvbUV2ZW50SGFuZGxlcnMoe1xuICAgIG1vdXNlZG93bihldmVudCwgdmlldykge1xuICAgICAgICBsZXQgYWN0aXZlID0gdmlldy5zdGF0ZS5maWVsZChzbmlwcGV0U3RhdGUsIGZhbHNlKSwgcG9zO1xuICAgICAgICBpZiAoIWFjdGl2ZSB8fCAocG9zID0gdmlldy5wb3NBdENvb3Jkcyh7IHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFkgfSkpID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCBtYXRjaCA9IGFjdGl2ZS5yYW5nZXMuZmluZChyID0+IHIuZnJvbSA8PSBwb3MgJiYgci50byA+PSBwb3MpO1xuICAgICAgICBpZiAoIW1hdGNoIHx8IG1hdGNoLmZpZWxkID09IGFjdGl2ZS5hY3RpdmUpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZpZXcuZGlzcGF0Y2goe1xuICAgICAgICAgICAgc2VsZWN0aW9uOiBmaWVsZFNlbGVjdGlvbihhY3RpdmUucmFuZ2VzLCBtYXRjaC5maWVsZCksXG4gICAgICAgICAgICBlZmZlY3RzOiBzZXRBY3RpdmUub2YoYWN0aXZlLnJhbmdlcy5zb21lKHIgPT4gci5maWVsZCA+IG1hdGNoLmZpZWxkKVxuICAgICAgICAgICAgICAgID8gbmV3IEFjdGl2ZVNuaXBwZXQoYWN0aXZlLnJhbmdlcywgbWF0Y2guZmllbGQpIDogbnVsbCksXG4gICAgICAgICAgICBzY3JvbGxJbnRvVmlldzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufSk7XG5cbmZ1bmN0aW9uIHdvcmRSRSh3b3JkQ2hhcnMpIHtcbiAgICBsZXQgZXNjYXBlZCA9IHdvcmRDaGFycy5yZXBsYWNlKC9bXFxdXFwtXFxcXF0vZywgXCJcXFxcJCZcIik7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoYFtcXFxccHtBbHBoYWJldGljfVxcXFxwe051bWJlcn1fJHtlc2NhcGVkfV0rYCwgXCJ1Z1wiKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKGBbXFx3JHtlc2NhcGVkfV1gLCBcImdcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gbWFwUkUocmUsIGYpIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChmKHJlLnNvdXJjZSksIHJlLnVuaWNvZGUgPyBcInVcIiA6IFwiXCIpO1xufVxuY29uc3Qgd29yZENhY2hlcyA9IC8qQF9fUFVSRV9fKi9PYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gd29yZENhY2hlKHdvcmRDaGFycykge1xuICAgIHJldHVybiB3b3JkQ2FjaGVzW3dvcmRDaGFyc10gfHwgKHdvcmRDYWNoZXNbd29yZENoYXJzXSA9IG5ldyBXZWFrTWFwKTtcbn1cbmZ1bmN0aW9uIHN0b3JlV29yZHMoZG9jLCB3b3JkUkUsIHJlc3VsdCwgc2VlbiwgaWdub3JlQXQpIHtcbiAgICBmb3IgKGxldCBsaW5lcyA9IGRvYy5pdGVyTGluZXMoKSwgcG9zID0gMDsgIWxpbmVzLm5leHQoKS5kb25lOykge1xuICAgICAgICBsZXQgeyB2YWx1ZSB9ID0gbGluZXMsIG07XG4gICAgICAgIHdvcmRSRS5sYXN0SW5kZXggPSAwO1xuICAgICAgICB3aGlsZSAobSA9IHdvcmRSRS5leGVjKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKCFzZWVuW21bMF1dICYmIHBvcyArIG0uaW5kZXggIT0gaWdub3JlQXQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IHR5cGU6IFwidGV4dFwiLCBsYWJlbDogbVswXSB9KTtcbiAgICAgICAgICAgICAgICBzZWVuW21bMF1dID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+PSAyMDAwIC8qIEMuTWF4TGlzdCAqLylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBvcyArPSB2YWx1ZS5sZW5ndGggKyAxO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbGxlY3RXb3Jkcyhkb2MsIGNhY2hlLCB3b3JkUkUsIHRvLCBpZ25vcmVBdCkge1xuICAgIGxldCBiaWcgPSBkb2MubGVuZ3RoID49IDEwMDAgLyogQy5NaW5DYWNoZUxlbiAqLztcbiAgICBsZXQgY2FjaGVkID0gYmlnICYmIGNhY2hlLmdldChkb2MpO1xuICAgIGlmIChjYWNoZWQpXG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgbGV0IHJlc3VsdCA9IFtdLCBzZWVuID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBpZiAoZG9jLmNoaWxkcmVuKSB7XG4gICAgICAgIGxldCBwb3MgPSAwO1xuICAgICAgICBmb3IgKGxldCBjaCBvZiBkb2MuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjaC5sZW5ndGggPj0gMTAwMCAvKiBDLk1pbkNhY2hlTGVuICovKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYyBvZiBjb2xsZWN0V29yZHMoY2gsIGNhY2hlLCB3b3JkUkUsIHRvIC0gcG9zLCBpZ25vcmVBdCAtIHBvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWVuW2MubGFiZWxdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWVuW2MubGFiZWxdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RvcmVXb3JkcyhjaCwgd29yZFJFLCByZXN1bHQsIHNlZW4sIGlnbm9yZUF0IC0gcG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvcyArPSBjaC5sZW5ndGggKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdG9yZVdvcmRzKGRvYywgd29yZFJFLCByZXN1bHQsIHNlZW4sIGlnbm9yZUF0KTtcbiAgICB9XG4gICAgaWYgKGJpZyAmJiByZXN1bHQubGVuZ3RoIDwgMjAwMCAvKiBDLk1heExpc3QgKi8pXG4gICAgICAgIGNhY2hlLnNldChkb2MsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuQSBjb21wbGV0aW9uIHNvdXJjZSB0aGF0IHdpbGwgc2NhbiB0aGUgZG9jdW1lbnQgZm9yIHdvcmRzICh1c2luZyBhXG5bY2hhcmFjdGVyIGNhdGVnb3JpemVyXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlLmNoYXJDYXRlZ29yaXplcikpLCBhbmRcbnJldHVybiB0aG9zZSBhcyBjb21wbGV0aW9ucy5cbiovXG5jb25zdCBjb21wbGV0ZUFueVdvcmQgPSBjb250ZXh0ID0+IHtcbiAgICBsZXQgd29yZENoYXJzID0gY29udGV4dC5zdGF0ZS5sYW5ndWFnZURhdGFBdChcIndvcmRDaGFyc1wiLCBjb250ZXh0LnBvcykuam9pbihcIlwiKTtcbiAgICBsZXQgcmUgPSB3b3JkUkUod29yZENoYXJzKTtcbiAgICBsZXQgdG9rZW4gPSBjb250ZXh0Lm1hdGNoQmVmb3JlKG1hcFJFKHJlLCBzID0+IHMgKyBcIiRcIikpO1xuICAgIGlmICghdG9rZW4gJiYgIWNvbnRleHQuZXhwbGljaXQpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCBmcm9tID0gdG9rZW4gPyB0b2tlbi5mcm9tIDogY29udGV4dC5wb3M7XG4gICAgbGV0IG9wdGlvbnMgPSBjb2xsZWN0V29yZHMoY29udGV4dC5zdGF0ZS5kb2MsIHdvcmRDYWNoZSh3b3JkQ2hhcnMpLCByZSwgNTAwMDAgLyogQy5SYW5nZSAqLywgZnJvbSk7XG4gICAgcmV0dXJuIHsgZnJvbSwgb3B0aW9ucywgdmFsaWRGb3I6IG1hcFJFKHJlLCBzID0+IFwiXlwiICsgcykgfTtcbn07XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuICAgIGJyYWNrZXRzOiBbXCIoXCIsIFwiW1wiLCBcIntcIiwgXCInXCIsICdcIiddLFxuICAgIGJlZm9yZTogXCIpXX06Oz5cIixcbiAgICBzdHJpbmdQcmVmaXhlczogW11cbn07XG5jb25zdCBjbG9zZUJyYWNrZXRFZmZlY3QgPSAvKkBfX1BVUkVfXyovU3RhdGVFZmZlY3QuZGVmaW5lKHtcbiAgICBtYXAodmFsdWUsIG1hcHBpbmcpIHtcbiAgICAgICAgbGV0IG1hcHBlZCA9IG1hcHBpbmcubWFwUG9zKHZhbHVlLCAtMSwgTWFwTW9kZS5UcmFja0FmdGVyKTtcbiAgICAgICAgcmV0dXJuIG1hcHBlZCA9PSBudWxsID8gdW5kZWZpbmVkIDogbWFwcGVkO1xuICAgIH1cbn0pO1xuY29uc3QgY2xvc2VkQnJhY2tldCA9IC8qQF9fUFVSRV9fKi9uZXcgY2xhc3MgZXh0ZW5kcyBSYW5nZVZhbHVlIHtcbn07XG5jbG9zZWRCcmFja2V0LnN0YXJ0U2lkZSA9IDE7XG5jbG9zZWRCcmFja2V0LmVuZFNpZGUgPSAtMTtcbmNvbnN0IGJyYWNrZXRTdGF0ZSA9IC8qQF9fUFVSRV9fKi9TdGF0ZUZpZWxkLmRlZmluZSh7XG4gICAgY3JlYXRlKCkgeyByZXR1cm4gUmFuZ2VTZXQuZW1wdHk7IH0sXG4gICAgdXBkYXRlKHZhbHVlLCB0cikge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLm1hcCh0ci5jaGFuZ2VzKTtcbiAgICAgICAgaWYgKHRyLnNlbGVjdGlvbikge1xuICAgICAgICAgICAgbGV0IGxpbmUgPSB0ci5zdGF0ZS5kb2MubGluZUF0KHRyLnNlbGVjdGlvbi5tYWluLmhlYWQpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS51cGRhdGUoeyBmaWx0ZXI6IGZyb20gPT4gZnJvbSA+PSBsaW5lLmZyb20gJiYgZnJvbSA8PSBsaW5lLnRvIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGVmZmVjdCBvZiB0ci5lZmZlY3RzKVxuICAgICAgICAgICAgaWYgKGVmZmVjdC5pcyhjbG9zZUJyYWNrZXRFZmZlY3QpKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudXBkYXRlKHsgYWRkOiBbY2xvc2VkQnJhY2tldC5yYW5nZShlZmZlY3QudmFsdWUsIGVmZmVjdC52YWx1ZSArIDEpXSB9KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn0pO1xuLyoqXG5FeHRlbnNpb24gdG8gZW5hYmxlIGJyYWNrZXQtY2xvc2luZyBiZWhhdmlvci4gV2hlbiBhIGNsb3NlYWJsZVxuYnJhY2tldCBpcyB0eXBlZCwgaXRzIGNsb3NpbmcgYnJhY2tldCBpcyBpbW1lZGlhdGVseSBpbnNlcnRlZFxuYWZ0ZXIgdGhlIGN1cnNvci4gV2hlbiBjbG9zaW5nIGEgYnJhY2tldCBkaXJlY3RseSBpbiBmcm9udCBvZiBhXG5jbG9zaW5nIGJyYWNrZXQgaW5zZXJ0ZWQgYnkgdGhlIGV4dGVuc2lvbiwgdGhlIGN1cnNvciBtb3ZlcyBvdmVyXG50aGF0IGJyYWNrZXQuXG4qL1xuZnVuY3Rpb24gY2xvc2VCcmFja2V0cygpIHtcbiAgICByZXR1cm4gW2lucHV0SGFuZGxlciwgYnJhY2tldFN0YXRlXTtcbn1cbmNvbnN0IGRlZmluZWRDbG9zaW5nID0gXCIoKVtde308PlwiO1xuZnVuY3Rpb24gY2xvc2luZyhjaCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVmaW5lZENsb3NpbmcubGVuZ3RoOyBpICs9IDIpXG4gICAgICAgIGlmIChkZWZpbmVkQ2xvc2luZy5jaGFyQ29kZUF0KGkpID09IGNoKVxuICAgICAgICAgICAgcmV0dXJuIGRlZmluZWRDbG9zaW5nLmNoYXJBdChpICsgMSk7XG4gICAgcmV0dXJuIGZyb21Db2RlUG9pbnQoY2ggPCAxMjggPyBjaCA6IGNoICsgMSk7XG59XG5mdW5jdGlvbiBjb25maWcoc3RhdGUsIHBvcykge1xuICAgIHJldHVybiBzdGF0ZS5sYW5ndWFnZURhdGFBdChcImNsb3NlQnJhY2tldHNcIiwgcG9zKVswXSB8fCBkZWZhdWx0cztcbn1cbmNvbnN0IGFuZHJvaWQgPSB0eXBlb2YgbmF2aWdhdG9yID09IFwib2JqZWN0XCIgJiYgLypAX19QVVJFX18qLy9BbmRyb2lkXFxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuY29uc3QgaW5wdXRIYW5kbGVyID0gLypAX19QVVJFX18qL0VkaXRvclZpZXcuaW5wdXRIYW5kbGVyLm9mKCh2aWV3LCBmcm9tLCB0bywgaW5zZXJ0KSA9PiB7XG4gICAgaWYgKChhbmRyb2lkID8gdmlldy5jb21wb3NpbmcgOiB2aWV3LmNvbXBvc2l0aW9uU3RhcnRlZCkgfHwgdmlldy5zdGF0ZS5yZWFkT25seSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBzZWwgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluO1xuICAgIGlmIChpbnNlcnQubGVuZ3RoID4gMiB8fCBpbnNlcnQubGVuZ3RoID09IDIgJiYgY29kZVBvaW50U2l6ZShjb2RlUG9pbnRBdChpbnNlcnQsIDApKSA9PSAxIHx8XG4gICAgICAgIGZyb20gIT0gc2VsLmZyb20gfHwgdG8gIT0gc2VsLnRvKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHRyID0gaW5zZXJ0QnJhY2tldCh2aWV3LnN0YXRlLCBpbnNlcnQpO1xuICAgIGlmICghdHIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2aWV3LmRpc3BhdGNoKHRyKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn0pO1xuLyoqXG5Db21tYW5kIHRoYXQgaW1wbGVtZW50cyBkZWxldGluZyBhIHBhaXIgb2YgbWF0Y2hpbmcgYnJhY2tldHMgd2hlblxudGhlIGN1cnNvciBpcyBiZXR3ZWVuIHRoZW0uXG4qL1xuY29uc3QgZGVsZXRlQnJhY2tldFBhaXIgPSAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgIGlmIChzdGF0ZS5yZWFkT25seSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBjb25mID0gY29uZmlnKHN0YXRlLCBzdGF0ZS5zZWxlY3Rpb24ubWFpbi5oZWFkKTtcbiAgICBsZXQgdG9rZW5zID0gY29uZi5icmFja2V0cyB8fCBkZWZhdWx0cy5icmFja2V0cztcbiAgICBsZXQgZG9udCA9IG51bGwsIGNoYW5nZXMgPSBzdGF0ZS5jaGFuZ2VCeVJhbmdlKHJhbmdlID0+IHtcbiAgICAgICAgaWYgKHJhbmdlLmVtcHR5KSB7XG4gICAgICAgICAgICBsZXQgYmVmb3JlID0gcHJldkNoYXIoc3RhdGUuZG9jLCByYW5nZS5oZWFkKTtcbiAgICAgICAgICAgIGZvciAobGV0IHRva2VuIG9mIHRva2Vucykge1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbiA9PSBiZWZvcmUgJiYgbmV4dENoYXIoc3RhdGUuZG9jLCByYW5nZS5oZWFkKSA9PSBjbG9zaW5nKGNvZGVQb2ludEF0KHRva2VuLCAwKSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGNoYW5nZXM6IHsgZnJvbTogcmFuZ2UuaGVhZCAtIHRva2VuLmxlbmd0aCwgdG86IHJhbmdlLmhlYWQgKyB0b2tlbi5sZW5ndGggfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiBFZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHJhbmdlLmhlYWQgLSB0b2tlbi5sZW5ndGgpIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IGRvbnQgPSByYW5nZSB9O1xuICAgIH0pO1xuICAgIGlmICghZG9udClcbiAgICAgICAgZGlzcGF0Y2goc3RhdGUudXBkYXRlKGNoYW5nZXMsIHsgc2Nyb2xsSW50b1ZpZXc6IHRydWUsIHVzZXJFdmVudDogXCJkZWxldGUuYmFja3dhcmRcIiB9KSk7XG4gICAgcmV0dXJuICFkb250O1xufTtcbi8qKlxuQ2xvc2UtYnJhY2tldHMgcmVsYXRlZCBrZXkgYmluZGluZ3MuIEJpbmRzIEJhY2tzcGFjZSB0b1xuW2BkZWxldGVCcmFja2V0UGFpcmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jYXV0b2NvbXBsZXRlLmRlbGV0ZUJyYWNrZXRQYWlyKS5cbiovXG5jb25zdCBjbG9zZUJyYWNrZXRzS2V5bWFwID0gW1xuICAgIHsga2V5OiBcIkJhY2tzcGFjZVwiLCBydW46IGRlbGV0ZUJyYWNrZXRQYWlyIH1cbl07XG4vKipcbkltcGxlbWVudHMgdGhlIGV4dGVuc2lvbidzIGJlaGF2aW9yIG9uIHRleHQgaW5zZXJ0aW9uLiBJZiB0aGVcbmdpdmVuIHN0cmluZyBjb3VudHMgYXMgYSBicmFja2V0IGluIHRoZSBsYW5ndWFnZSBhcm91bmQgdGhlXG5zZWxlY3Rpb24sIGFuZCByZXBsYWNpbmcgdGhlIHNlbGVjdGlvbiB3aXRoIGl0IHJlcXVpcmVzIGN1c3RvbVxuYmVoYXZpb3IgKGluc2VydGluZyBhIGNsb3NpbmcgdmVyc2lvbiBvciBza2lwcGluZyBwYXN0IGFcbnByZXZpb3VzbHktY2xvc2VkIGJyYWNrZXQpLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYSB0cmFuc2FjdGlvblxucmVwcmVzZW50aW5nIHRoYXQgY3VzdG9tIGJlaGF2aW9yLiAoWW91IG9ubHkgbmVlZCB0aGlzIGlmIHlvdSB3YW50XG50byBwcm9ncmFtbWF0aWNhbGx5IGluc2VydCBicmFja2V0c+KAlHRoZVxuW2BjbG9zZUJyYWNrZXRzYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUuY2xvc2VCcmFja2V0cykgZXh0ZW5zaW9uIHdpbGxcbnRha2UgY2FyZSBvZiBydW5uaW5nIHRoaXMgZm9yIHVzZXIgaW5wdXQuKVxuKi9cbmZ1bmN0aW9uIGluc2VydEJyYWNrZXQoc3RhdGUsIGJyYWNrZXQpIHtcbiAgICBsZXQgY29uZiA9IGNvbmZpZyhzdGF0ZSwgc3RhdGUuc2VsZWN0aW9uLm1haW4uaGVhZCk7XG4gICAgbGV0IHRva2VucyA9IGNvbmYuYnJhY2tldHMgfHwgZGVmYXVsdHMuYnJhY2tldHM7XG4gICAgZm9yIChsZXQgdG9rIG9mIHRva2Vucykge1xuICAgICAgICBsZXQgY2xvc2VkID0gY2xvc2luZyhjb2RlUG9pbnRBdCh0b2ssIDApKTtcbiAgICAgICAgaWYgKGJyYWNrZXQgPT0gdG9rKVxuICAgICAgICAgICAgcmV0dXJuIGNsb3NlZCA9PSB0b2sgPyBoYW5kbGVTYW1lKHN0YXRlLCB0b2ssIHRva2Vucy5pbmRleE9mKHRvayArIHRvayArIHRvaykgPiAtMSwgY29uZilcbiAgICAgICAgICAgICAgICA6IGhhbmRsZU9wZW4oc3RhdGUsIHRvaywgY2xvc2VkLCBjb25mLmJlZm9yZSB8fCBkZWZhdWx0cy5iZWZvcmUpO1xuICAgICAgICBpZiAoYnJhY2tldCA9PSBjbG9zZWQgJiYgY2xvc2VkQnJhY2tldEF0KHN0YXRlLCBzdGF0ZS5zZWxlY3Rpb24ubWFpbi5mcm9tKSlcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVDbG9zZShzdGF0ZSwgdG9rLCBjbG9zZWQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGNsb3NlZEJyYWNrZXRBdChzdGF0ZSwgcG9zKSB7XG4gICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgc3RhdGUuZmllbGQoYnJhY2tldFN0YXRlKS5iZXR3ZWVuKDAsIHN0YXRlLmRvYy5sZW5ndGgsIGZyb20gPT4ge1xuICAgICAgICBpZiAoZnJvbSA9PSBwb3MpXG4gICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvdW5kO1xufVxuZnVuY3Rpb24gbmV4dENoYXIoZG9jLCBwb3MpIHtcbiAgICBsZXQgbmV4dCA9IGRvYy5zbGljZVN0cmluZyhwb3MsIHBvcyArIDIpO1xuICAgIHJldHVybiBuZXh0LnNsaWNlKDAsIGNvZGVQb2ludFNpemUoY29kZVBvaW50QXQobmV4dCwgMCkpKTtcbn1cbmZ1bmN0aW9uIHByZXZDaGFyKGRvYywgcG9zKSB7XG4gICAgbGV0IHByZXYgPSBkb2Muc2xpY2VTdHJpbmcocG9zIC0gMiwgcG9zKTtcbiAgICByZXR1cm4gY29kZVBvaW50U2l6ZShjb2RlUG9pbnRBdChwcmV2LCAwKSkgPT0gcHJldi5sZW5ndGggPyBwcmV2IDogcHJldi5zbGljZSgxKTtcbn1cbmZ1bmN0aW9uIGhhbmRsZU9wZW4oc3RhdGUsIG9wZW4sIGNsb3NlLCBjbG9zZUJlZm9yZSkge1xuICAgIGxldCBkb250ID0gbnVsbCwgY2hhbmdlcyA9IHN0YXRlLmNoYW5nZUJ5UmFuZ2UocmFuZ2UgPT4ge1xuICAgICAgICBpZiAoIXJhbmdlLmVtcHR5KVxuICAgICAgICAgICAgcmV0dXJuIHsgY2hhbmdlczogW3sgaW5zZXJ0OiBvcGVuLCBmcm9tOiByYW5nZS5mcm9tIH0sIHsgaW5zZXJ0OiBjbG9zZSwgZnJvbTogcmFuZ2UudG8gfV0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogY2xvc2VCcmFja2V0RWZmZWN0Lm9mKHJhbmdlLnRvICsgb3Blbi5sZW5ndGgpLFxuICAgICAgICAgICAgICAgIHJhbmdlOiBFZGl0b3JTZWxlY3Rpb24ucmFuZ2UocmFuZ2UuYW5jaG9yICsgb3Blbi5sZW5ndGgsIHJhbmdlLmhlYWQgKyBvcGVuLmxlbmd0aCkgfTtcbiAgICAgICAgbGV0IG5leHQgPSBuZXh0Q2hhcihzdGF0ZS5kb2MsIHJhbmdlLmhlYWQpO1xuICAgICAgICBpZiAoIW5leHQgfHwgL1xccy8udGVzdChuZXh0KSB8fCBjbG9zZUJlZm9yZS5pbmRleE9mKG5leHQpID4gLTEpXG4gICAgICAgICAgICByZXR1cm4geyBjaGFuZ2VzOiB7IGluc2VydDogb3BlbiArIGNsb3NlLCBmcm9tOiByYW5nZS5oZWFkIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogY2xvc2VCcmFja2V0RWZmZWN0Lm9mKHJhbmdlLmhlYWQgKyBvcGVuLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgcmFuZ2U6IEVkaXRvclNlbGVjdGlvbi5jdXJzb3IocmFuZ2UuaGVhZCArIG9wZW4ubGVuZ3RoKSB9O1xuICAgICAgICByZXR1cm4geyByYW5nZTogZG9udCA9IHJhbmdlIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGRvbnQgPyBudWxsIDogc3RhdGUudXBkYXRlKGNoYW5nZXMsIHtcbiAgICAgICAgc2Nyb2xsSW50b1ZpZXc6IHRydWUsXG4gICAgICAgIHVzZXJFdmVudDogXCJpbnB1dC50eXBlXCJcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZUNsb3NlKHN0YXRlLCBfb3BlbiwgY2xvc2UpIHtcbiAgICBsZXQgZG9udCA9IG51bGwsIGNoYW5nZXMgPSBzdGF0ZS5jaGFuZ2VCeVJhbmdlKHJhbmdlID0+IHtcbiAgICAgICAgaWYgKHJhbmdlLmVtcHR5ICYmIG5leHRDaGFyKHN0YXRlLmRvYywgcmFuZ2UuaGVhZCkgPT0gY2xvc2UpXG4gICAgICAgICAgICByZXR1cm4geyBjaGFuZ2VzOiB7IGZyb206IHJhbmdlLmhlYWQsIHRvOiByYW5nZS5oZWFkICsgY2xvc2UubGVuZ3RoLCBpbnNlcnQ6IGNsb3NlIH0sXG4gICAgICAgICAgICAgICAgcmFuZ2U6IEVkaXRvclNlbGVjdGlvbi5jdXJzb3IocmFuZ2UuaGVhZCArIGNsb3NlLmxlbmd0aCkgfTtcbiAgICAgICAgcmV0dXJuIGRvbnQgPSB7IHJhbmdlIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGRvbnQgPyBudWxsIDogc3RhdGUudXBkYXRlKGNoYW5nZXMsIHtcbiAgICAgICAgc2Nyb2xsSW50b1ZpZXc6IHRydWUsXG4gICAgICAgIHVzZXJFdmVudDogXCJpbnB1dC50eXBlXCJcbiAgICB9KTtcbn1cbi8vIEhhbmRsZXMgY2FzZXMgd2hlcmUgdGhlIG9wZW4gYW5kIGNsb3NlIHRva2VuIGFyZSB0aGUgc2FtZSwgYW5kXG4vLyBwb3NzaWJseSB0cmlwbGUgcXVvdGVzIChhcyBpbiBgXCJcIlwiYWJjXCJcIlwiYC1zdHlsZSBxdW90aW5nKS5cbmZ1bmN0aW9uIGhhbmRsZVNhbWUoc3RhdGUsIHRva2VuLCBhbGxvd1RyaXBsZSwgY29uZmlnKSB7XG4gICAgbGV0IHN0cmluZ1ByZWZpeGVzID0gY29uZmlnLnN0cmluZ1ByZWZpeGVzIHx8IGRlZmF1bHRzLnN0cmluZ1ByZWZpeGVzO1xuICAgIGxldCBkb250ID0gbnVsbCwgY2hhbmdlcyA9IHN0YXRlLmNoYW5nZUJ5UmFuZ2UocmFuZ2UgPT4ge1xuICAgICAgICBpZiAoIXJhbmdlLmVtcHR5KVxuICAgICAgICAgICAgcmV0dXJuIHsgY2hhbmdlczogW3sgaW5zZXJ0OiB0b2tlbiwgZnJvbTogcmFuZ2UuZnJvbSB9LCB7IGluc2VydDogdG9rZW4sIGZyb206IHJhbmdlLnRvIH1dLFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IGNsb3NlQnJhY2tldEVmZmVjdC5vZihyYW5nZS50byArIHRva2VuLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgcmFuZ2U6IEVkaXRvclNlbGVjdGlvbi5yYW5nZShyYW5nZS5hbmNob3IgKyB0b2tlbi5sZW5ndGgsIHJhbmdlLmhlYWQgKyB0b2tlbi5sZW5ndGgpIH07XG4gICAgICAgIGxldCBwb3MgPSByYW5nZS5oZWFkLCBuZXh0ID0gbmV4dENoYXIoc3RhdGUuZG9jLCBwb3MpLCBzdGFydDtcbiAgICAgICAgaWYgKG5leHQgPT0gdG9rZW4pIHtcbiAgICAgICAgICAgIGlmIChub2RlU3RhcnQoc3RhdGUsIHBvcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBjaGFuZ2VzOiB7IGluc2VydDogdG9rZW4gKyB0b2tlbiwgZnJvbTogcG9zIH0sXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdHM6IGNsb3NlQnJhY2tldEVmZmVjdC5vZihwb3MgKyB0b2tlbi5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihwb3MgKyB0b2tlbi5sZW5ndGgpIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjbG9zZWRCcmFja2V0QXQoc3RhdGUsIHBvcykpIHtcbiAgICAgICAgICAgICAgICBsZXQgaXNUcmlwbGUgPSBhbGxvd1RyaXBsZSAmJiBzdGF0ZS5zbGljZURvYyhwb3MsIHBvcyArIHRva2VuLmxlbmd0aCAqIDMpID09IHRva2VuICsgdG9rZW4gKyB0b2tlbjtcbiAgICAgICAgICAgICAgICBsZXQgY29udGVudCA9IGlzVHJpcGxlID8gdG9rZW4gKyB0b2tlbiArIHRva2VuIDogdG9rZW47XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY2hhbmdlczogeyBmcm9tOiBwb3MsIHRvOiBwb3MgKyBjb250ZW50Lmxlbmd0aCwgaW5zZXJ0OiBjb250ZW50IH0sXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiBFZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHBvcyArIGNvbnRlbnQubGVuZ3RoKSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFsbG93VHJpcGxlICYmIHN0YXRlLnNsaWNlRG9jKHBvcyAtIDIgKiB0b2tlbi5sZW5ndGgsIHBvcykgPT0gdG9rZW4gKyB0b2tlbiAmJlxuICAgICAgICAgICAgKHN0YXJ0ID0gY2FuU3RhcnRTdHJpbmdBdChzdGF0ZSwgcG9zIC0gMiAqIHRva2VuLmxlbmd0aCwgc3RyaW5nUHJlZml4ZXMpKSA+IC0xICYmXG4gICAgICAgICAgICBub2RlU3RhcnQoc3RhdGUsIHN0YXJ0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgY2hhbmdlczogeyBpbnNlcnQ6IHRva2VuICsgdG9rZW4gKyB0b2tlbiArIHRva2VuLCBmcm9tOiBwb3MgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBjbG9zZUJyYWNrZXRFZmZlY3Qub2YocG9zICsgdG9rZW4ubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICByYW5nZTogRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihwb3MgKyB0b2tlbi5sZW5ndGgpIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuY2hhckNhdGVnb3JpemVyKHBvcykobmV4dCkgIT0gQ2hhckNhdGVnb3J5LldvcmQpIHtcbiAgICAgICAgICAgIGlmIChjYW5TdGFydFN0cmluZ0F0KHN0YXRlLCBwb3MsIHN0cmluZ1ByZWZpeGVzKSA+IC0xICYmICFwcm9iYWJseUluU3RyaW5nKHN0YXRlLCBwb3MsIHRva2VuLCBzdHJpbmdQcmVmaXhlcykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY2hhbmdlczogeyBpbnNlcnQ6IHRva2VuICsgdG9rZW4sIGZyb206IHBvcyB9LFxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RzOiBjbG9zZUJyYWNrZXRFZmZlY3Qub2YocG9zICsgdG9rZW4ubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IEVkaXRvclNlbGVjdGlvbi5jdXJzb3IocG9zICsgdG9rZW4ubGVuZ3RoKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHJhbmdlOiBkb250ID0gcmFuZ2UgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gZG9udCA/IG51bGwgOiBzdGF0ZS51cGRhdGUoY2hhbmdlcywge1xuICAgICAgICBzY3JvbGxJbnRvVmlldzogdHJ1ZSxcbiAgICAgICAgdXNlckV2ZW50OiBcImlucHV0LnR5cGVcIlxuICAgIH0pO1xufVxuZnVuY3Rpb24gbm9kZVN0YXJ0KHN0YXRlLCBwb3MpIHtcbiAgICBsZXQgdHJlZSA9IHN5bnRheFRyZWUoc3RhdGUpLnJlc29sdmVJbm5lcihwb3MgKyAxKTtcbiAgICByZXR1cm4gdHJlZS5wYXJlbnQgJiYgdHJlZS5mcm9tID09IHBvcztcbn1cbmZ1bmN0aW9uIHByb2JhYmx5SW5TdHJpbmcoc3RhdGUsIHBvcywgcXVvdGVUb2tlbiwgcHJlZml4ZXMpIHtcbiAgICBsZXQgbm9kZSA9IHN5bnRheFRyZWUoc3RhdGUpLnJlc29sdmVJbm5lcihwb3MsIC0xKTtcbiAgICBsZXQgbWF4UHJlZml4ID0gcHJlZml4ZXMucmVkdWNlKChtLCBwKSA9PiBNYXRoLm1heChtLCBwLmxlbmd0aCksIDApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgIGxldCBzdGFydCA9IHN0YXRlLnNsaWNlRG9jKG5vZGUuZnJvbSwgTWF0aC5taW4obm9kZS50bywgbm9kZS5mcm9tICsgcXVvdGVUb2tlbi5sZW5ndGggKyBtYXhQcmVmaXgpKTtcbiAgICAgICAgbGV0IHF1b3RlUG9zID0gc3RhcnQuaW5kZXhPZihxdW90ZVRva2VuKTtcbiAgICAgICAgaWYgKCFxdW90ZVBvcyB8fCBxdW90ZVBvcyA+IC0xICYmIHByZWZpeGVzLmluZGV4T2Yoc3RhcnQuc2xpY2UoMCwgcXVvdGVQb3MpKSA+IC0xKSB7XG4gICAgICAgICAgICBsZXQgZmlyc3QgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICB3aGlsZSAoZmlyc3QgJiYgZmlyc3QuZnJvbSA9PSBub2RlLmZyb20gJiYgZmlyc3QudG8gLSBmaXJzdC5mcm9tID4gcXVvdGVUb2tlbi5sZW5ndGggKyBxdW90ZVBvcykge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zbGljZURvYyhmaXJzdC50byAtIHF1b3RlVG9rZW4ubGVuZ3RoLCBmaXJzdC50bykgPT0gcXVvdGVUb2tlbilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGZpcnN0ID0gZmlyc3QuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJlbnQgPSBub2RlLnRvID09IHBvcyAmJiBub2RlLnBhcmVudDtcbiAgICAgICAgaWYgKCFwYXJlbnQpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY2FuU3RhcnRTdHJpbmdBdChzdGF0ZSwgcG9zLCBwcmVmaXhlcykge1xuICAgIGxldCBjaGFyQ2F0ID0gc3RhdGUuY2hhckNhdGVnb3JpemVyKHBvcyk7XG4gICAgaWYgKGNoYXJDYXQoc3RhdGUuc2xpY2VEb2MocG9zIC0gMSwgcG9zKSkgIT0gQ2hhckNhdGVnb3J5LldvcmQpXG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgZm9yIChsZXQgcHJlZml4IG9mIHByZWZpeGVzKSB7XG4gICAgICAgIGxldCBzdGFydCA9IHBvcyAtIHByZWZpeC5sZW5ndGg7XG4gICAgICAgIGlmIChzdGF0ZS5zbGljZURvYyhzdGFydCwgcG9zKSA9PSBwcmVmaXggJiYgY2hhckNhdChzdGF0ZS5zbGljZURvYyhzdGFydCAtIDEsIHN0YXJ0KSkgIT0gQ2hhckNhdGVnb3J5LldvcmQpXG4gICAgICAgICAgICByZXR1cm4gc3RhcnQ7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cblxuLyoqXG5SZXR1cm5zIGFuIGV4dGVuc2lvbiB0aGF0IGVuYWJsZXMgYXV0b2NvbXBsZXRpb24uXG4qL1xuZnVuY3Rpb24gYXV0b2NvbXBsZXRpb24oY29uZmlnID0ge30pIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBjb21taXRDaGFyYWN0ZXJzLFxuICAgICAgICBjb21wbGV0aW9uU3RhdGUsXG4gICAgICAgIGNvbXBsZXRpb25Db25maWcub2YoY29uZmlnKSxcbiAgICAgICAgY29tcGxldGlvblBsdWdpbixcbiAgICAgICAgY29tcGxldGlvbktleW1hcEV4dCxcbiAgICAgICAgYmFzZVRoZW1lXG4gICAgXTtcbn1cbi8qKlxuQmFzaWMga2V5YmluZGluZ3MgZm9yIGF1dG9jb21wbGV0aW9uLlxuXG4gLSBDdHJsLVNwYWNlOiBbYHN0YXJ0Q29tcGxldGlvbmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jYXV0b2NvbXBsZXRlLnN0YXJ0Q29tcGxldGlvbilcbiAtIEVzY2FwZTogW2BjbG9zZUNvbXBsZXRpb25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2F1dG9jb21wbGV0ZS5jbG9zZUNvbXBsZXRpb24pXG4gLSBBcnJvd0Rvd246IFtgbW92ZUNvbXBsZXRpb25TZWxlY3Rpb25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2F1dG9jb21wbGV0ZS5tb3ZlQ29tcGxldGlvblNlbGVjdGlvbilgKHRydWUpYFxuIC0gQXJyb3dVcDogW2Btb3ZlQ29tcGxldGlvblNlbGVjdGlvbmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jYXV0b2NvbXBsZXRlLm1vdmVDb21wbGV0aW9uU2VsZWN0aW9uKWAoZmFsc2UpYFxuIC0gUGFnZURvd246IFtgbW92ZUNvbXBsZXRpb25TZWxlY3Rpb25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2F1dG9jb21wbGV0ZS5tb3ZlQ29tcGxldGlvblNlbGVjdGlvbilgKHRydWUsIFwicGFnZVwiKWBcbiAtIFBhZ2VEb3duOiBbYG1vdmVDb21wbGV0aW9uU2VsZWN0aW9uYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUubW92ZUNvbXBsZXRpb25TZWxlY3Rpb24pYCh0cnVlLCBcInBhZ2VcIilgXG4gLSBFbnRlcjogW2BhY2NlcHRDb21wbGV0aW9uYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUuYWNjZXB0Q29tcGxldGlvbilcbiovXG5jb25zdCBjb21wbGV0aW9uS2V5bWFwID0gW1xuICAgIHsga2V5OiBcIkN0cmwtU3BhY2VcIiwgcnVuOiBzdGFydENvbXBsZXRpb24gfSxcbiAgICB7IGtleTogXCJFc2NhcGVcIiwgcnVuOiBjbG9zZUNvbXBsZXRpb24gfSxcbiAgICB7IGtleTogXCJBcnJvd0Rvd25cIiwgcnVuOiAvKkBfX1BVUkVfXyovbW92ZUNvbXBsZXRpb25TZWxlY3Rpb24odHJ1ZSkgfSxcbiAgICB7IGtleTogXCJBcnJvd1VwXCIsIHJ1bjogLypAX19QVVJFX18qL21vdmVDb21wbGV0aW9uU2VsZWN0aW9uKGZhbHNlKSB9LFxuICAgIHsga2V5OiBcIlBhZ2VEb3duXCIsIHJ1bjogLypAX19QVVJFX18qL21vdmVDb21wbGV0aW9uU2VsZWN0aW9uKHRydWUsIFwicGFnZVwiKSB9LFxuICAgIHsga2V5OiBcIlBhZ2VVcFwiLCBydW46IC8qQF9fUFVSRV9fKi9tb3ZlQ29tcGxldGlvblNlbGVjdGlvbihmYWxzZSwgXCJwYWdlXCIpIH0sXG4gICAgeyBrZXk6IFwiRW50ZXJcIiwgcnVuOiBhY2NlcHRDb21wbGV0aW9uIH1cbl07XG5jb25zdCBjb21wbGV0aW9uS2V5bWFwRXh0ID0gLypAX19QVVJFX18qL1ByZWMuaGlnaGVzdCgvKkBfX1BVUkVfXyova2V5bWFwLmNvbXB1dGVOKFtjb21wbGV0aW9uQ29uZmlnXSwgc3RhdGUgPT4gc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZykuZGVmYXVsdEtleW1hcCA/IFtjb21wbGV0aW9uS2V5bWFwXSA6IFtdKSk7XG4vKipcbkdldCB0aGUgY3VycmVudCBjb21wbGV0aW9uIHN0YXR1cy4gV2hlbiBjb21wbGV0aW9ucyBhcmUgYXZhaWxhYmxlLFxudGhpcyB3aWxsIHJldHVybiBgXCJhY3RpdmVcImAuIFdoZW4gY29tcGxldGlvbnMgYXJlIHBlbmRpbmcgKGluIHRoZVxucHJvY2VzcyBvZiBiZWluZyBxdWVyaWVkKSwgdGhpcyByZXR1cm5zIGBcInBlbmRpbmdcImAuIE90aGVyd2lzZSwgaXRcbnJldHVybnMgYG51bGxgLlxuKi9cbmZ1bmN0aW9uIGNvbXBsZXRpb25TdGF0dXMoc3RhdGUpIHtcbiAgICBsZXQgY1N0YXRlID0gc3RhdGUuZmllbGQoY29tcGxldGlvblN0YXRlLCBmYWxzZSk7XG4gICAgcmV0dXJuIGNTdGF0ZSAmJiBjU3RhdGUuYWN0aXZlLnNvbWUoYSA9PiBhLnN0YXRlID09IDEgLyogU3RhdGUuUGVuZGluZyAqLykgPyBcInBlbmRpbmdcIlxuICAgICAgICA6IGNTdGF0ZSAmJiBjU3RhdGUuYWN0aXZlLnNvbWUoYSA9PiBhLnN0YXRlICE9IDAgLyogU3RhdGUuSW5hY3RpdmUgKi8pID8gXCJhY3RpdmVcIiA6IG51bGw7XG59XG5jb25zdCBjb21wbGV0aW9uQXJyYXlDYWNoZSA9IC8qQF9fUFVSRV9fKi9uZXcgV2Vha01hcDtcbi8qKlxuUmV0dXJucyB0aGUgYXZhaWxhYmxlIGNvbXBsZXRpb25zIGFzIGFuIGFycmF5LlxuKi9cbmZ1bmN0aW9uIGN1cnJlbnRDb21wbGV0aW9ucyhzdGF0ZSkge1xuICAgIHZhciBfYTtcbiAgICBsZXQgb3BlbiA9IChfYSA9IHN0YXRlLmZpZWxkKGNvbXBsZXRpb25TdGF0ZSwgZmFsc2UpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub3BlbjtcbiAgICBpZiAoIW9wZW4gfHwgb3Blbi5kaXNhYmxlZClcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIGxldCBjb21wbGV0aW9ucyA9IGNvbXBsZXRpb25BcnJheUNhY2hlLmdldChvcGVuLm9wdGlvbnMpO1xuICAgIGlmICghY29tcGxldGlvbnMpXG4gICAgICAgIGNvbXBsZXRpb25BcnJheUNhY2hlLnNldChvcGVuLm9wdGlvbnMsIGNvbXBsZXRpb25zID0gb3Blbi5vcHRpb25zLm1hcChvID0+IG8uY29tcGxldGlvbikpO1xuICAgIHJldHVybiBjb21wbGV0aW9ucztcbn1cbi8qKlxuUmV0dXJuIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgY29tcGxldGlvbiwgaWYgYW55LlxuKi9cbmZ1bmN0aW9uIHNlbGVjdGVkQ29tcGxldGlvbihzdGF0ZSkge1xuICAgIHZhciBfYTtcbiAgICBsZXQgb3BlbiA9IChfYSA9IHN0YXRlLmZpZWxkKGNvbXBsZXRpb25TdGF0ZSwgZmFsc2UpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub3BlbjtcbiAgICByZXR1cm4gb3BlbiAmJiAhb3Blbi5kaXNhYmxlZCAmJiBvcGVuLnNlbGVjdGVkID49IDAgPyBvcGVuLm9wdGlvbnNbb3Blbi5zZWxlY3RlZF0uY29tcGxldGlvbiA6IG51bGw7XG59XG4vKipcblJldHVybnMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBwb3NpdGlvbiBpbiB0aGUgYWN0aXZlIGNvbXBsZXRpb25cbmxpc3QsIG9yIG51bGwgaWYgbm8gY29tcGxldGlvbnMgYXJlIGFjdGl2ZS5cbiovXG5mdW5jdGlvbiBzZWxlY3RlZENvbXBsZXRpb25JbmRleChzdGF0ZSkge1xuICAgIHZhciBfYTtcbiAgICBsZXQgb3BlbiA9IChfYSA9IHN0YXRlLmZpZWxkKGNvbXBsZXRpb25TdGF0ZSwgZmFsc2UpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub3BlbjtcbiAgICByZXR1cm4gb3BlbiAmJiAhb3Blbi5kaXNhYmxlZCAmJiBvcGVuLnNlbGVjdGVkID49IDAgPyBvcGVuLnNlbGVjdGVkIDogbnVsbDtcbn1cbi8qKlxuQ3JlYXRlIGFuIGVmZmVjdCB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhIHRyYW5zYWN0aW9uIHRvIGNoYW5nZVxudGhlIGN1cnJlbnRseSBzZWxlY3RlZCBjb21wbGV0aW9uLlxuKi9cbmZ1bmN0aW9uIHNldFNlbGVjdGVkQ29tcGxldGlvbihpbmRleCkge1xuICAgIHJldHVybiBzZXRTZWxlY3RlZEVmZmVjdC5vZihpbmRleCk7XG59XG5cbmV4cG9ydCB7IENvbXBsZXRpb25Db250ZXh0LCBhY2NlcHRDb21wbGV0aW9uLCBhdXRvY29tcGxldGlvbiwgY2xlYXJTbmlwcGV0LCBjbG9zZUJyYWNrZXRzLCBjbG9zZUJyYWNrZXRzS2V5bWFwLCBjbG9zZUNvbXBsZXRpb24sIGNvbXBsZXRlQW55V29yZCwgY29tcGxldGVGcm9tTGlzdCwgY29tcGxldGlvbktleW1hcCwgY29tcGxldGlvblN0YXR1cywgY3VycmVudENvbXBsZXRpb25zLCBkZWxldGVCcmFja2V0UGFpciwgaGFzTmV4dFNuaXBwZXRGaWVsZCwgaGFzUHJldlNuaXBwZXRGaWVsZCwgaWZJbiwgaWZOb3RJbiwgaW5zZXJ0QnJhY2tldCwgaW5zZXJ0Q29tcGxldGlvblRleHQsIG1vdmVDb21wbGV0aW9uU2VsZWN0aW9uLCBuZXh0U25pcHBldEZpZWxkLCBwaWNrZWRDb21wbGV0aW9uLCBwcmV2U25pcHBldEZpZWxkLCBzZWxlY3RlZENvbXBsZXRpb24sIHNlbGVjdGVkQ29tcGxldGlvbkluZGV4LCBzZXRTZWxlY3RlZENvbXBsZXRpb24sIHNuaXBwZXQsIHNuaXBwZXRDb21wbGV0aW9uLCBzbmlwcGV0S2V5bWFwLCBzdGFydENvbXBsZXRpb24gfTtcbiJdLCJuYW1lcyI6WyJBbm5vdGF0aW9uIiwiU3RhdGVFZmZlY3QiLCJFZGl0b3JTZWxlY3Rpb24iLCJjb2RlUG9pbnRBdCIsImNvZGVQb2ludFNpemUiLCJmcm9tQ29kZVBvaW50IiwiRmFjZXQiLCJjb21iaW5lQ29uZmlnIiwiU3RhdGVGaWVsZCIsIlByZWMiLCJUZXh0IiwiVHJhbnNhY3Rpb24iLCJNYXBNb2RlIiwiUmFuZ2VWYWx1ZSIsIlJhbmdlU2V0IiwiQ2hhckNhdGVnb3J5IiwiRGlyZWN0aW9uIiwibG9nRXhjZXB0aW9uIiwic2hvd1Rvb2x0aXAiLCJFZGl0b3JWaWV3IiwiVmlld1BsdWdpbiIsImdldFRvb2x0aXAiLCJEZWNvcmF0aW9uIiwiV2lkZ2V0VHlwZSIsImtleW1hcCIsInN5bnRheFRyZWUiLCJpbmRlbnRVbml0IiwiQ29tcGxldGlvbkNvbnRleHQiLCJjb25zdHJ1Y3RvciIsInN0YXRlIiwicG9zIiwiZXhwbGljaXQiLCJhYm9ydExpc3RlbmVycyIsInRva2VuQmVmb3JlIiwidHlwZXMiLCJ0b2tlbiIsInJlc29sdmVJbm5lciIsImluZGV4T2YiLCJuYW1lIiwicGFyZW50IiwiZnJvbSIsInRvIiwidGV4dCIsInNsaWNlRG9jIiwidHlwZSIsIm1hdGNoQmVmb3JlIiwiZXhwciIsImxpbmUiLCJkb2MiLCJsaW5lQXQiLCJzdGFydCIsIk1hdGgiLCJtYXgiLCJzdHIiLCJzbGljZSIsImZvdW5kIiwic2VhcmNoIiwiZW5zdXJlQW5jaG9yIiwiYWJvcnRlZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lciIsInB1c2giLCJ0b1NldCIsImNoYXJzIiwiZmxhdCIsIk9iamVjdCIsImtleXMiLCJqb2luIiwid29yZHMiLCJ0ZXN0IiwicmVwbGFjZSIsInByZWZpeE1hdGNoIiwib3B0aW9ucyIsImZpcnN0IiwiY3JlYXRlIiwicmVzdCIsImxhYmVsIiwiaSIsImxlbmd0aCIsInNvdXJjZSIsIlJlZ0V4cCIsImNvbXBsZXRlRnJvbUxpc3QiLCJsaXN0IiwibWFwIiwibyIsInZhbGlkRm9yIiwibWF0Y2giLCJldmVyeSIsImNvbnRleHQiLCJpZkluIiwibm9kZXMiLCJpc1RvcCIsImlmTm90SW4iLCJPcHRpb24iLCJjb21wbGV0aW9uIiwic2NvcmUiLCJjdXIiLCJzZWxlY3Rpb24iLCJtYWluIiwiX2EiLCJhZGRTdGFydCIsImFkZEVuZCIsImZsYWdzIiwiaWdub3JlQ2FzZSIsInBpY2tlZENvbXBsZXRpb24iLCJkZWZpbmUiLCJpbnNlcnRDb21wbGV0aW9uVGV4dCIsImZyb21PZmYiLCJ0b09mZiIsImFzc2lnbiIsImNoYW5nZUJ5UmFuZ2UiLCJyYW5nZSIsImNoYW5nZXMiLCJpbnNlcnQiLCJjdXJzb3IiLCJzY3JvbGxJbnRvVmlldyIsInVzZXJFdmVudCIsIlNvdXJjZUNhY2hlIiwiV2Vha01hcCIsImFzU291cmNlIiwiQXJyYXkiLCJpc0FycmF5Iiwia25vd24iLCJnZXQiLCJzZXQiLCJzdGFydENvbXBsZXRpb25FZmZlY3QiLCJjbG9zZUNvbXBsZXRpb25FZmZlY3QiLCJGdXp6eU1hdGNoZXIiLCJwYXR0ZXJuIiwiZm9sZGVkIiwiYW55IiwicHJlY2lzZSIsImJ5V29yZCIsIm1hdGNoZWQiLCJwIiwiY2hhciIsInNpemUiLCJwYXJ0IiwidXBwZXIiLCJ0b1VwcGVyQ2FzZSIsInRvTG93ZXJDYXNlIiwiYXN0cmFsIiwicmV0Iiwid29yZCIsImZpcnN0U2l6ZSIsImRpcmVjdCIsImxlbiIsImFueVRvIiwiZSIsIm1pbiIsIm5leHQiLCJwcmVjaXNlVG8iLCJieVdvcmRUbyIsImJ5V29yZEZvbGRlZCIsImFkamFjZW50VG8iLCJhZGphY2VudFN0YXJ0IiwiYWRqYWNlbnRFbmQiLCJoYXNMb3dlciIsIndvcmRBZGphY2VudCIsInByZXZUeXBlIiwiY2giLCJyZXN1bHQiLCJwb3NpdGlvbnMiLCJTdHJpY3RNYXRjaGVyIiwiY29tcGxldGlvbkNvbmZpZyIsImNvbWJpbmUiLCJjb25maWdzIiwiYWN0aXZhdGVPblR5cGluZyIsImFjdGl2YXRlT25Db21wbGV0aW9uIiwiYWN0aXZhdGVPblR5cGluZ0RlbGF5Iiwic2VsZWN0T25PcGVuIiwib3ZlcnJpZGUiLCJjbG9zZU9uQmx1ciIsIm1heFJlbmRlcmVkT3B0aW9ucyIsImRlZmF1bHRLZXltYXAiLCJ0b29sdGlwQ2xhc3MiLCJvcHRpb25DbGFzcyIsImFib3ZlQ3Vyc29yIiwiaWNvbnMiLCJhZGRUb09wdGlvbnMiLCJwb3NpdGlvbkluZm8iLCJkZWZhdWx0UG9zaXRpb25JbmZvIiwiZmlsdGVyU3RyaWN0IiwiY29tcGFyZUNvbXBsZXRpb25zIiwiYSIsImIiLCJsb2NhbGVDb21wYXJlIiwiaW50ZXJhY3Rpb25EZWxheSIsInVwZGF0ZVN5bmNUaW1lIiwiYyIsImpvaW5DbGFzcyIsImNvbmNhdCIsInZpZXciLCJvcHRpb24iLCJpbmZvIiwic3BhY2UiLCJ0b29sdGlwIiwicnRsIiwidGV4dERpcmVjdGlvbiIsIlJUTCIsImxlZnQiLCJuYXJyb3ciLCJzaWRlIiwib2Zmc2V0IiwibWF4V2lkdGgiLCJzcGFjZUxlZnQiLCJzcGFjZVJpZ2h0IiwicmlnaHQiLCJpbmZvV2lkdGgiLCJpbmZvSGVpZ2h0IiwiYm90dG9tIiwidG9wIiwic3BhY2VCZWxvdyIsInNjYWxlWSIsIm9mZnNldEhlaWdodCIsInNjYWxlWCIsIm9mZnNldFdpZHRoIiwic3R5bGUiLCJjbGFzcyIsIm9wdGlvbkNvbnRlbnQiLCJjb25maWciLCJjb250ZW50IiwicmVuZGVyIiwiaWNvbiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInNwbGl0IiwiY2xzIiwic2V0QXR0cmlidXRlIiwicG9zaXRpb24iLCJfcyIsIl92IiwibGFiZWxFbHQiLCJjbGFzc05hbWUiLCJkaXNwbGF5TGFiZWwiLCJvZmYiLCJqIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsInNwYW4iLCJkZXRhaWwiLCJkZXRhaWxFbHQiLCJ0ZXh0Q29udGVudCIsInNvcnQiLCJyYW5nZUFyb3VuZFNlbGVjdGVkIiwidG90YWwiLCJzZWxlY3RlZCIsImZsb29yIiwiQ29tcGxldGlvblRvb2x0aXAiLCJzdGF0ZUZpZWxkIiwiYXBwbHlDb21wbGV0aW9uIiwiaW5mb0Rlc3Ryb3kiLCJwbGFjZUluZm9SZXEiLCJyZWFkIiwibWVhc3VyZUluZm8iLCJ3cml0ZSIsInBsYWNlSW5mbyIsImtleSIsImN1cnJlbnRDbGFzcyIsImNTdGF0ZSIsImZpZWxkIiwib3BlbiIsImZhY2V0IiwiZG9tIiwidXBkYXRlVG9vbHRpcENsYXNzIiwidGFyZ2V0IiwicGFyZW50Tm9kZSIsIm5vZGVOYW1lIiwiZXhlYyIsImlkIiwicHJldmVudERlZmF1bHQiLCJyZWxhdGVkVGFyZ2V0IiwiY29udGVudERPTSIsImRpc3BhdGNoIiwiZWZmZWN0cyIsIm9mIiwic2hvd09wdGlvbnMiLCJtb3VudCIsInVwZGF0ZVNlbCIsInJlbW92ZSIsImNyZWF0ZUxpc3RCb3giLCJyZXF1ZXN0TWVhc3VyZSIsInVwZGF0ZSIsInByZXZTdGF0ZSIsInN0YXJ0U3RhdGUiLCJkaXNhYmxlZCIsInRvZ2dsZSIsInBvc2l0aW9uZWQiLCJ1cGRhdGVTZWxlY3RlZE9wdGlvbiIsImRlc3Ryb3lJbmZvIiwiaW5mb1Jlc3VsdCIsInRoZW4iLCJvYmoiLCJhZGRJbmZvUGFuZSIsImNhdGNoIiwid3JhcCIsIm5vZGVUeXBlIiwiZGVzdHJveSIsIm9wdCIsImZpcnN0Q2hpbGQiLCJuZXh0U2libGluZyIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInNlbCIsInF1ZXJ5U2VsZWN0b3IiLCJsaXN0UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImluZm9SZWN0Iiwic2VsUmVjdCIsIndpbiIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImNzc1RleHQiLCJ1bCIsInBocmFzZSIsImN1clNlY3Rpb24iLCJzZWN0aW9uIiwiaGVhZGVyIiwibGkiLCJub2RlIiwiY29tcGxldGlvblRvb2x0aXAiLCJjb250YWluZXIiLCJlbGVtZW50Iiwic2VsZiIsImhlaWdodCIsInNjcm9sbFRvcCIsImJvb3N0IiwiYXBwbHkiLCJzb3J0T3B0aW9ucyIsImFjdGl2ZSIsInNlY3Rpb25zIiwiYWRkT3B0aW9uIiwic29tZSIsInMiLCJjb25mIiwiaGFzUmVzdWx0IiwiZ2V0TWF0Y2giLCJmaWx0ZXIiLCJtYXRjaGVyIiwic2VjdGlvbk9yZGVyIiwiY21wIiwiX2IiLCJyYW5rIiwicHJldiIsImNvbXBhcmUiLCJDb21wbGV0aW9uRGlhbG9nIiwiYXR0cnMiLCJ0aW1lc3RhbXAiLCJzZXRTZWxlY3RlZCIsIm1ha2VBdHRycyIsImJ1aWxkIiwic2VsZWN0ZWRWYWx1ZSIsInJlZHVjZSIsImNyZWF0ZVRvb2x0aXAiLCJhYm92ZSIsIkRhdGUiLCJub3ciLCJtYXBQb3MiLCJDb21wbGV0aW9uU3RhdGUiLCJub25lIiwicmFuZG9tIiwidG9TdHJpbmciLCJ0ciIsInNvdXJjZXMiLCJsYW5ndWFnZURhdGFBdCIsInZhbHVlIiwiZmluZCIsIkFjdGl2ZVNvdXJjZSIsImRvY0NoYW5nZWQiLCJ0b3VjaGVzUmFuZ2UiLCJzYW1lUmVzdWx0cyIsImVmZmVjdCIsImlzIiwic2V0U2VsZWN0ZWRFZmZlY3QiLCJiYXNlQXR0cnMiLCJub0F0dHJzIiwiaUEiLCJpQiIsImVuZEEiLCJlbmRCIiwiZ2V0VXNlckV2ZW50IiwiaXNVc2VyRXZlbnQiLCJhbm5vdGF0aW9uIiwiZXhwbGljaXRQb3MiLCJldmVudCIsImhhbmRsZVVzZXJFdmVudCIsImhhbmRsZUNoYW5nZSIsInNldEFjdGl2ZUVmZmVjdCIsImVtcHR5IiwiQWN0aXZlUmVzdWx0IiwiY2hlY2tWYWxpZCIsIm1hcHBpbmciLCJjb21wbGV0aW9uU3RhdGUiLCJwcm92aWRlIiwiZiIsInZhbCIsImNvbnRlbnRBdHRyaWJ1dGVzIiwiYW5ub3RhdGlvbnMiLCJtb3ZlQ29tcGxldGlvblNlbGVjdGlvbiIsImZvcndhcmQiLCJieSIsInN0ZXAiLCJhY2NlcHRDb21wbGV0aW9uIiwicmVhZE9ubHkiLCJzdGFydENvbXBsZXRpb24iLCJjbG9zZUNvbXBsZXRpb24iLCJSdW5uaW5nUXVlcnkiLCJ0aW1lIiwidXBkYXRlcyIsImRvbmUiLCJ1bmRlZmluZWQiLCJNYXhVcGRhdGVDb3VudCIsIk1pbkFib3J0VGltZSIsImNvbXBsZXRpb25QbHVnaW4iLCJmcm9tQ2xhc3MiLCJkZWJvdW5jZVVwZGF0ZSIsInJ1bm5pbmciLCJkZWJvdW5jZUFjY2VwdCIsInBlbmRpbmdTdGFydCIsImNvbXBvc2luZyIsInN0YXJ0UXVlcnkiLCJzZWxlY3Rpb25TZXQiLCJkb2VzUmVzZXQiLCJ0cmFuc2FjdGlvbnMiLCJxdWVyeSIsImhhbmRsZXIiLCJzcGxpY2UiLCJjbGVhclRpbWVvdXQiLCJkZWxheSIsInEiLCJzZXRUaW1lb3V0Iiwic3RhcnRVcGRhdGUiLCJyIiwicGVuZGluZyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2NoZWR1bGVBY2NlcHQiLCJlcnIiLCJhY2NlcHQiLCJ1cGRhdGVkIiwiY3VycmVudCIsImV2ZW50SGFuZGxlcnMiLCJibHVyIiwiZGlhbG9nIiwiY29udGFpbnMiLCJjb21wb3NpdGlvbnN0YXJ0IiwiY29tcG9zaXRpb25lbmQiLCJ3aW5kb3dzIiwibmF2aWdhdG9yIiwicGxhdGZvcm0iLCJjb21taXRDaGFyYWN0ZXJzIiwiaGlnaGVzdCIsImRvbUV2ZW50SGFuZGxlcnMiLCJrZXlkb3duIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjb21taXRDaGFycyIsImJhc2VUaGVtZSIsImZvbnRGYW1pbHkiLCJ3aGl0ZVNwYWNlIiwib3ZlcmZsb3ciLCJtYXhXaWR0aF9mYWxsYmFjayIsIm1pbldpZHRoIiwibWF4SGVpZ2h0IiwibGlzdFN0eWxlIiwibWFyZ2luIiwicGFkZGluZyIsImxpbmVIZWlnaHQiLCJvdmVyZmxvd1giLCJ0ZXh0T3ZlcmZsb3ciLCJkaXNwbGF5IiwiYm9yZGVyQm90dG9tIiwicGFkZGluZ0xlZnQiLCJvcGFjaXR5IiwiYmFja2dyb3VuZCIsImNvbG9yIiwidGV4dEFsaWduIiwid2lkdGgiLCJib3hTaXppbmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJ2ZXJ0aWNhbEFsaWduIiwiYm9yZGVyTGVmdCIsInRleHREZWNvcmF0aW9uIiwibWFyZ2luTGVmdCIsImZvbnRTdHlsZSIsImZvbnRTaXplIiwicGFkZGluZ1JpZ2h0IiwiRmllbGRQb3MiLCJGaWVsZFJhbmdlIiwiVHJhY2tEZWwiLCJTbmlwcGV0IiwibGluZXMiLCJmaWVsZFBvc2l0aW9ucyIsImluc3RhbnRpYXRlIiwibGluZVN0YXJ0IiwibGluZU9iaiIsImJhc2VJbmRlbnQiLCJpbmRlbnQiLCJ0YWJzIiwicmFuZ2VzIiwicGFyc2UiLCJ0ZW1wbGF0ZSIsImZpZWxkcyIsIm0iLCJzZXEiLCJyYXdOYW1lIiwiaW5kZXgiLCJfIiwiYnJhY2UiLCJmaWVsZE1hcmtlciIsIndpZGdldCIsInRvRE9NIiwiaWdub3JlRXZlbnQiLCJmaWVsZFJhbmdlIiwibWFyayIsIkFjdGl2ZVNuaXBwZXQiLCJkZWNvIiwibWFwcGVkIiwic2VsZWN0aW9uSW5zaWRlRmllbGQiLCJzZXRBY3RpdmUiLCJtb3ZlVG9GaWVsZCIsInNuaXBwZXRTdGF0ZSIsImRlY29yYXRpb25zIiwiZmllbGRTZWxlY3Rpb24iLCJzbmlwcGV0IiwiZWRpdG9yIiwic3BlYyIsImFwcGVuZENvbmZpZyIsImFkZFNuaXBwZXRLZXltYXAiLCJzbmlwcGV0UG9pbnRlckhhbmRsZXIiLCJtb3ZlRmllbGQiLCJkaXIiLCJsYXN0IiwiY2xlYXJTbmlwcGV0IiwibmV4dFNuaXBwZXRGaWVsZCIsInByZXZTbmlwcGV0RmllbGQiLCJoYXNOZXh0U25pcHBldEZpZWxkIiwiaGFzUHJldlNuaXBwZXRGaWVsZCIsImRlZmF1bHRTbmlwcGV0S2V5bWFwIiwicnVuIiwic2hpZnQiLCJzbmlwcGV0S2V5bWFwIiwibWFwcyIsImNvbXB1dGUiLCJzbmlwcGV0Q29tcGxldGlvbiIsIm1vdXNlZG93biIsInBvc0F0Q29vcmRzIiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsIndvcmRSRSIsIndvcmRDaGFycyIsImVzY2FwZWQiLCJtYXBSRSIsInJlIiwidW5pY29kZSIsIndvcmRDYWNoZXMiLCJ3b3JkQ2FjaGUiLCJzdG9yZVdvcmRzIiwic2VlbiIsImlnbm9yZUF0IiwiaXRlckxpbmVzIiwibGFzdEluZGV4IiwiY29sbGVjdFdvcmRzIiwiY2FjaGUiLCJiaWciLCJjYWNoZWQiLCJjaGlsZHJlbiIsImNvbXBsZXRlQW55V29yZCIsImRlZmF1bHRzIiwiYnJhY2tldHMiLCJiZWZvcmUiLCJzdHJpbmdQcmVmaXhlcyIsImNsb3NlQnJhY2tldEVmZmVjdCIsIlRyYWNrQWZ0ZXIiLCJjbG9zZWRCcmFja2V0Iiwic3RhcnRTaWRlIiwiZW5kU2lkZSIsImJyYWNrZXRTdGF0ZSIsImhlYWQiLCJjbG9zZUJyYWNrZXRzIiwiaW5wdXRIYW5kbGVyIiwiZGVmaW5lZENsb3NpbmciLCJjbG9zaW5nIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsImFuZHJvaWQiLCJ1c2VyQWdlbnQiLCJjb21wb3NpdGlvblN0YXJ0ZWQiLCJpbnNlcnRCcmFja2V0IiwiZGVsZXRlQnJhY2tldFBhaXIiLCJ0b2tlbnMiLCJkb250IiwicHJldkNoYXIiLCJuZXh0Q2hhciIsImNsb3NlQnJhY2tldHNLZXltYXAiLCJicmFja2V0IiwidG9rIiwiY2xvc2VkIiwiaGFuZGxlU2FtZSIsImhhbmRsZU9wZW4iLCJjbG9zZWRCcmFja2V0QXQiLCJoYW5kbGVDbG9zZSIsImJldHdlZW4iLCJzbGljZVN0cmluZyIsImNsb3NlIiwiY2xvc2VCZWZvcmUiLCJhbmNob3IiLCJfb3BlbiIsImFsbG93VHJpcGxlIiwibm9kZVN0YXJ0IiwiaXNUcmlwbGUiLCJjYW5TdGFydFN0cmluZ0F0IiwiY2hhckNhdGVnb3JpemVyIiwiV29yZCIsInByb2JhYmx5SW5TdHJpbmciLCJ0cmVlIiwicXVvdGVUb2tlbiIsInByZWZpeGVzIiwibWF4UHJlZml4IiwicXVvdGVQb3MiLCJjaGFyQ2F0IiwicHJlZml4IiwiYXV0b2NvbXBsZXRpb24iLCJjb21wbGV0aW9uS2V5bWFwRXh0IiwiY29tcGxldGlvbktleW1hcCIsImNvbXB1dGVOIiwiY29tcGxldGlvblN0YXR1cyIsImNvbXBsZXRpb25BcnJheUNhY2hlIiwiY3VycmVudENvbXBsZXRpb25zIiwiY29tcGxldGlvbnMiLCJzZWxlY3RlZENvbXBsZXRpb24iLCJzZWxlY3RlZENvbXBsZXRpb25JbmRleCIsInNldFNlbGVjdGVkQ29tcGxldGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/@codemirror/autocomplete/dist/index.js\n");

/***/ })

}]);