"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkridge_codemirror"] = globalThis["webpackChunkridge_codemirror"] || []).push([["vendors-node_modules_codemirror_lint_dist_index_js"],{

/***/ "../../node_modules/@codemirror/lint/dist/index.js":
/*!*********************************************************!*\
  !*** ../../node_modules/@codemirror/lint/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeLintPanel: () => (/* binding */ closeLintPanel),\n/* harmony export */   diagnosticCount: () => (/* binding */ diagnosticCount),\n/* harmony export */   forEachDiagnostic: () => (/* binding */ forEachDiagnostic),\n/* harmony export */   forceLinting: () => (/* binding */ forceLinting),\n/* harmony export */   lintGutter: () => (/* binding */ lintGutter),\n/* harmony export */   lintKeymap: () => (/* binding */ lintKeymap),\n/* harmony export */   linter: () => (/* binding */ linter),\n/* harmony export */   nextDiagnostic: () => (/* binding */ nextDiagnostic),\n/* harmony export */   openLintPanel: () => (/* binding */ openLintPanel),\n/* harmony export */   previousDiagnostic: () => (/* binding */ previousDiagnostic),\n/* harmony export */   setDiagnostics: () => (/* binding */ setDiagnostics),\n/* harmony export */   setDiagnosticsEffect: () => (/* binding */ setDiagnosticsEffect)\n/* harmony export */ });\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/view */ \"../../node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/state */ \"../../node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var crelt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crelt */ \"../../node_modules/crelt/index.js\");\n\n\n\nclass SelectedDiagnostic {\n  constructor(from, to, diagnostic) {\n    this.from = from;\n    this.to = to;\n    this.diagnostic = diagnostic;\n  }\n}\nclass LintState {\n  constructor(diagnostics, panel, selected) {\n    this.diagnostics = diagnostics;\n    this.panel = panel;\n    this.selected = selected;\n  }\n  static init(diagnostics, panel, state) {\n    // Filter the list of diagnostics for which to create markers\n    let markedDiagnostics = diagnostics;\n    let diagnosticFilter = state.facet(lintConfig).markerFilter;\n    if (diagnosticFilter) markedDiagnostics = diagnosticFilter(markedDiagnostics, state);\n    let sorted = diagnostics.slice().sort((a, b) => a.from - b.from || a.to - b.to);\n    let deco = new _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.RangeSetBuilder(),\n      active = [],\n      pos = 0;\n    for (let i = 0;;) {\n      let next = i == sorted.length ? null : sorted[i];\n      if (!next && !active.length) break;\n      let from, to;\n      if (active.length) {\n        from = pos;\n        to = active.reduce((p, d) => Math.min(p, d.to), next && next.from > from ? next.from : 1e8);\n      } else {\n        from = next.from;\n        to = next.to;\n        active.push(next);\n        i++;\n      }\n      while (i < sorted.length) {\n        let next = sorted[i];\n        if (next.from == from && (next.to > next.from || next.to == from)) {\n          active.push(next);\n          i++;\n          to = Math.min(next.to, to);\n        } else {\n          to = Math.min(next.from, to);\n          break;\n        }\n      }\n      let sev = maxSeverity(active);\n      if (active.some(d => d.from == d.to || d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)) {\n        deco.add(from, from, _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.widget({\n          widget: new DiagnosticWidget(sev),\n          diagnostics: active.slice()\n        }));\n      } else {\n        let markClass = active.reduce((c, d) => d.markClass ? c + \" \" + d.markClass : c, \"\");\n        deco.add(from, to, _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.mark({\n          class: \"cm-lintRange cm-lintRange-\" + sev + markClass,\n          diagnostics: active.slice(),\n          inclusiveEnd: active.some(a => a.to > to)\n        }));\n      }\n      pos = to;\n      for (let i = 0; i < active.length; i++) if (active[i].to <= pos) active.splice(i--, 1);\n    }\n    let set = deco.finish();\n    return new LintState(set, panel, findDiagnostic(set));\n  }\n}\nfunction findDiagnostic(diagnostics, diagnostic = null, after = 0) {\n  let found = null;\n  diagnostics.between(after, 1e9, (from, to, {\n    spec\n  }) => {\n    if (diagnostic && spec.diagnostics.indexOf(diagnostic) < 0) return;\n    if (!found) found = new SelectedDiagnostic(from, to, diagnostic || spec.diagnostics[0]);else if (spec.diagnostics.indexOf(found.diagnostic) < 0) return false;else found = new SelectedDiagnostic(found.from, to, found.diagnostic);\n  });\n  return found;\n}\nfunction hideTooltip(tr, tooltip) {\n  let from = tooltip.pos,\n    to = tooltip.end || from;\n  let result = tr.state.facet(lintConfig).hideOn(tr, from, to);\n  if (result != null) return result;\n  let line = tr.startState.doc.lineAt(tooltip.pos);\n  return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, Math.max(line.to, to)));\n}\nfunction maybeEnableLint(state, effects) {\n  return state.field(lintState, false) ? effects : effects.concat(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.appendConfig.of(lintExtensions));\n}\n/**\nReturns a transaction spec which updates the current set of\ndiagnostics, and enables the lint extension if if wasn't already\nactive.\n*/\nfunction setDiagnostics(state, diagnostics) {\n  return {\n    effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])\n  };\n}\n/**\nThe state effect that updates the set of active diagnostics. Can\nbe useful when writing an extension that needs to track these.\n*/\nconst setDiagnosticsEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\nconst togglePanel = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\nconst movePanelSelection = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\nconst lintState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\n  create() {\n    return new LintState(_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.none, null, null);\n  },\n  update(value, tr) {\n    if (tr.docChanged && value.diagnostics.size) {\n      let mapped = value.diagnostics.map(tr.changes),\n        selected = null,\n        panel = value.panel;\n      if (value.selected) {\n        let selPos = tr.changes.mapPos(value.selected.from, 1);\n        selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);\n      }\n      if (!mapped.size && panel && tr.state.facet(lintConfig).autoPanel) panel = null;\n      value = new LintState(mapped, panel, selected);\n    }\n    for (let effect of tr.effects) {\n      if (effect.is(setDiagnosticsEffect)) {\n        let panel = !tr.state.facet(lintConfig).autoPanel ? value.panel : effect.value.length ? LintPanel.open : null;\n        value = LintState.init(effect.value, panel, tr.state);\n      } else if (effect.is(togglePanel)) {\n        value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);\n      } else if (effect.is(movePanelSelection)) {\n        value = new LintState(value.diagnostics, value.panel, effect.value);\n      }\n    }\n    return value;\n  },\n  provide: f => [_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.showPanel.from(f, val => val.panel), _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.decorations.from(f, s => s.diagnostics)]\n});\n/**\nReturns the number of active lint diagnostics in the given state.\n*/\nfunction diagnosticCount(state) {\n  let lint = state.field(lintState, false);\n  return lint ? lint.diagnostics.size : 0;\n}\nconst activeMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.mark({\n  class: \"cm-lintRange cm-lintRange-active\"\n});\nfunction lintTooltip(view, pos, side) {\n  let {\n    diagnostics\n  } = view.state.field(lintState);\n  let found,\n    start = -1,\n    end = -1;\n  diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, {\n    spec\n  }) => {\n    if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {\n      found = spec.diagnostics;\n      start = from;\n      end = to;\n      return false;\n    }\n  });\n  let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;\n  if (found && diagnosticFilter) found = diagnosticFilter(found, view.state);\n  if (!found) return null;\n  return {\n    pos: start,\n    end: end,\n    above: view.state.doc.lineAt(start).to < end,\n    create() {\n      return {\n        dom: diagnosticsTooltip(view, found)\n      };\n    }\n  };\n}\nfunction diagnosticsTooltip(view, diagnostics) {\n  return (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ul\", {\n    class: \"cm-tooltip-lint\"\n  }, diagnostics.map(d => renderDiagnostic(view, d, false)));\n}\n/**\nCommand to open and focus the lint panel.\n*/\nconst openLintPanel = view => {\n  let field = view.state.field(lintState, false);\n  if (!field || !field.panel) view.dispatch({\n    effects: maybeEnableLint(view.state, [togglePanel.of(true)])\n  });\n  let panel = (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.getPanel)(view, LintPanel.open);\n  if (panel) panel.dom.querySelector(\".cm-panel-lint ul\").focus();\n  return true;\n};\n/**\nCommand to close the lint panel, when open.\n*/\nconst closeLintPanel = view => {\n  let field = view.state.field(lintState, false);\n  if (!field || !field.panel) return false;\n  view.dispatch({\n    effects: togglePanel.of(false)\n  });\n  return true;\n};\n/**\nMove the selection to the next diagnostic.\n*/\nconst nextDiagnostic = view => {\n  let field = view.state.field(lintState, false);\n  if (!field) return false;\n  let sel = view.state.selection.main,\n    next = field.diagnostics.iter(sel.to + 1);\n  if (!next.value) {\n    next = field.diagnostics.iter(0);\n    if (!next.value || next.from == sel.from && next.to == sel.to) return false;\n  }\n  view.dispatch({\n    selection: {\n      anchor: next.from,\n      head: next.to\n    },\n    scrollIntoView: true\n  });\n  return true;\n};\n/**\nMove the selection to the previous diagnostic.\n*/\nconst previousDiagnostic = view => {\n  let {\n      state\n    } = view,\n    field = state.field(lintState, false);\n  if (!field) return false;\n  let sel = state.selection.main;\n  let prevFrom, prevTo, lastFrom, lastTo;\n  field.diagnostics.between(0, state.doc.length, (from, to) => {\n    if (to < sel.to && (prevFrom == null || prevFrom < from)) {\n      prevFrom = from;\n      prevTo = to;\n    }\n    if (lastFrom == null || from > lastFrom) {\n      lastFrom = from;\n      lastTo = to;\n    }\n  });\n  if (lastFrom == null || prevFrom == null && lastFrom == sel.from) return false;\n  view.dispatch({\n    selection: {\n      anchor: prevFrom !== null && prevFrom !== void 0 ? prevFrom : lastFrom,\n      head: prevTo !== null && prevTo !== void 0 ? prevTo : lastTo\n    },\n    scrollIntoView: true\n  });\n  return true;\n};\n/**\nA set of default key bindings for the lint functionality.\n\n- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)\n- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)\n*/\nconst lintKeymap = [{\n  key: \"Mod-Shift-m\",\n  run: openLintPanel,\n  preventDefault: true\n}, {\n  key: \"F8\",\n  run: nextDiagnostic\n}];\nconst lintPlugin = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(class {\n  constructor(view) {\n    this.view = view;\n    this.timeout = -1;\n    this.set = true;\n    let {\n      delay\n    } = view.state.facet(lintConfig);\n    this.lintTime = Date.now() + delay;\n    this.run = this.run.bind(this);\n    this.timeout = setTimeout(this.run, delay);\n  }\n  run() {\n    clearTimeout(this.timeout);\n    let now = Date.now();\n    if (now < this.lintTime - 10) {\n      this.timeout = setTimeout(this.run, this.lintTime - now);\n    } else {\n      this.set = false;\n      let {\n          state\n        } = this.view,\n        {\n          sources\n        } = state.facet(lintConfig);\n      if (sources.length) batchResults(sources.map(s => Promise.resolve(s(this.view))), annotations => {\n        if (this.view.state.doc == state.doc) this.view.dispatch(setDiagnostics(this.view.state, annotations.reduce((a, b) => a.concat(b))));\n      }, error => {\n        (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.logException)(this.view.state, error);\n      });\n    }\n  }\n  update(update) {\n    let config = update.state.facet(lintConfig);\n    if (update.docChanged || config != update.startState.facet(lintConfig) || config.needsRefresh && config.needsRefresh(update)) {\n      this.lintTime = Date.now() + config.delay;\n      if (!this.set) {\n        this.set = true;\n        this.timeout = setTimeout(this.run, config.delay);\n      }\n    }\n  }\n  force() {\n    if (this.set) {\n      this.lintTime = Date.now();\n      this.run();\n    }\n  }\n  destroy() {\n    clearTimeout(this.timeout);\n  }\n});\nfunction batchResults(promises, sink, error) {\n  let collected = [],\n    timeout = -1;\n  for (let p of promises) p.then(value => {\n    collected.push(value);\n    clearTimeout(timeout);\n    if (collected.length == promises.length) sink(collected);else timeout = setTimeout(() => sink(collected), 200);\n  }, error);\n}\nconst lintConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\n  combine(input) {\n    return Object.assign({\n      sources: input.map(i => i.source).filter(x => x != null)\n    }, (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.combineConfig)(input.map(i => i.config), {\n      delay: 750,\n      markerFilter: null,\n      tooltipFilter: null,\n      needsRefresh: null,\n      hideOn: () => null\n    }, {\n      needsRefresh: (a, b) => !a ? b : !b ? a : u => a(u) || b(u)\n    }));\n  }\n});\n/**\nGiven a diagnostic source, this function returns an extension that\nenables linting with that source. It will be called whenever the\neditor is idle (after its content changed). If `null` is given as\nsource, this only configures the lint extension.\n*/\nfunction linter(source, config = {}) {\n  return [lintConfig.of({\n    source,\n    config\n  }), lintPlugin, lintExtensions];\n}\n/**\nForces any linters [configured](https://codemirror.net/6/docs/ref/#lint.linter) to run when the\neditor is idle to run right away.\n*/\nfunction forceLinting(view) {\n  let plugin = view.plugin(lintPlugin);\n  if (plugin) plugin.force();\n}\nfunction assignKeys(actions) {\n  let assigned = [];\n  if (actions) actions: for (let {\n    name\n  } of actions) {\n    for (let i = 0; i < name.length; i++) {\n      let ch = name[i];\n      if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {\n        assigned.push(ch);\n        continue actions;\n      }\n    }\n    assigned.push(\"\");\n  }\n  return assigned;\n}\nfunction renderDiagnostic(view, diagnostic, inPanel) {\n  var _a;\n  let keys = inPanel ? assignKeys(diagnostic.actions) : [];\n  return (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"li\", {\n    class: \"cm-diagnostic cm-diagnostic-\" + diagnostic.severity\n  }, (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"span\", {\n    class: \"cm-diagnosticText\"\n  }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {\n    let fired = false,\n      click = e => {\n        e.preventDefault();\n        if (fired) return;\n        fired = true;\n        let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);\n        if (found) action.apply(view, found.from, found.to);\n      };\n    let {\n        name\n      } = action,\n      keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;\n    let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex), (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"u\", name.slice(keyIndex, keyIndex + 1)), name.slice(keyIndex + 1)];\n    return (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\", {\n      type: \"button\",\n      class: \"cm-diagnosticAction\",\n      onclick: click,\n      onmousedown: click,\n      \"aria-label\": ` Action: ${name}${keyIndex < 0 ? \"\" : ` (access key \"${keys[i]})\"`}.`\n    }, nameElt);\n  }), diagnostic.source && (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    class: \"cm-diagnosticSource\"\n  }, diagnostic.source));\n}\nclass DiagnosticWidget extends _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.WidgetType {\n  constructor(sev) {\n    super();\n    this.sev = sev;\n  }\n  eq(other) {\n    return other.sev == this.sev;\n  }\n  toDOM() {\n    return (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"span\", {\n      class: \"cm-lintPoint cm-lintPoint-\" + this.sev\n    });\n  }\n}\nclass PanelItem {\n  constructor(view, diagnostic) {\n    this.diagnostic = diagnostic;\n    this.id = \"item_\" + Math.floor(Math.random() * 0xffffffff).toString(16);\n    this.dom = renderDiagnostic(view, diagnostic, true);\n    this.dom.id = this.id;\n    this.dom.setAttribute(\"role\", \"option\");\n  }\n}\nclass LintPanel {\n  constructor(view) {\n    this.view = view;\n    this.items = [];\n    let onkeydown = event => {\n      if (event.keyCode == 27) {\n        // Escape\n        closeLintPanel(this.view);\n        this.view.focus();\n      } else if (event.keyCode == 38 || event.keyCode == 33) {\n        // ArrowUp, PageUp\n        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);\n      } else if (event.keyCode == 40 || event.keyCode == 34) {\n        // ArrowDown, PageDown\n        this.moveSelection((this.selectedIndex + 1) % this.items.length);\n      } else if (event.keyCode == 36) {\n        // Home\n        this.moveSelection(0);\n      } else if (event.keyCode == 35) {\n        // End\n        this.moveSelection(this.items.length - 1);\n      } else if (event.keyCode == 13) {\n        // Enter\n        this.view.focus();\n      } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {\n        // A-Z\n        let {\n            diagnostic\n          } = this.items[this.selectedIndex],\n          keys = assignKeys(diagnostic.actions);\n        for (let i = 0; i < keys.length; i++) if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {\n          let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);\n          if (found) diagnostic.actions[i].apply(view, found.from, found.to);\n        }\n      } else {\n        return;\n      }\n      event.preventDefault();\n    };\n    let onclick = event => {\n      for (let i = 0; i < this.items.length; i++) {\n        if (this.items[i].dom.contains(event.target)) this.moveSelection(i);\n      }\n    };\n    this.list = (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ul\", {\n      tabIndex: 0,\n      role: \"listbox\",\n      \"aria-label\": this.view.state.phrase(\"Diagnostics\"),\n      onkeydown,\n      onclick\n    });\n    this.dom = (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n      class: \"cm-panel-lint\"\n    }, this.list, (0,crelt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\", {\n      type: \"button\",\n      name: \"close\",\n      \"aria-label\": this.view.state.phrase(\"close\"),\n      onclick: () => closeLintPanel(this.view)\n    }, \"×\"));\n    this.update();\n  }\n  get selectedIndex() {\n    let selected = this.view.state.field(lintState).selected;\n    if (!selected) return -1;\n    for (let i = 0; i < this.items.length; i++) if (this.items[i].diagnostic == selected.diagnostic) return i;\n    return -1;\n  }\n  update() {\n    let {\n      diagnostics,\n      selected\n    } = this.view.state.field(lintState);\n    let i = 0,\n      needsSync = false,\n      newSelectedItem = null;\n    let seen = new Set();\n    diagnostics.between(0, this.view.state.doc.length, (_start, _end, {\n      spec\n    }) => {\n      for (let diagnostic of spec.diagnostics) {\n        if (seen.has(diagnostic)) continue;\n        seen.add(diagnostic);\n        let found = -1,\n          item;\n        for (let j = i; j < this.items.length; j++) if (this.items[j].diagnostic == diagnostic) {\n          found = j;\n          break;\n        }\n        if (found < 0) {\n          item = new PanelItem(this.view, diagnostic);\n          this.items.splice(i, 0, item);\n          needsSync = true;\n        } else {\n          item = this.items[found];\n          if (found > i) {\n            this.items.splice(i, found - i);\n            needsSync = true;\n          }\n        }\n        if (selected && item.diagnostic == selected.diagnostic) {\n          if (!item.dom.hasAttribute(\"aria-selected\")) {\n            item.dom.setAttribute(\"aria-selected\", \"true\");\n            newSelectedItem = item;\n          }\n        } else if (item.dom.hasAttribute(\"aria-selected\")) {\n          item.dom.removeAttribute(\"aria-selected\");\n        }\n        i++;\n      }\n    });\n    while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {\n      needsSync = true;\n      this.items.pop();\n    }\n    if (this.items.length == 0) {\n      this.items.push(new PanelItem(this.view, {\n        from: -1,\n        to: -1,\n        severity: \"info\",\n        message: this.view.state.phrase(\"No diagnostics\")\n      }));\n      needsSync = true;\n    }\n    if (newSelectedItem) {\n      this.list.setAttribute(\"aria-activedescendant\", newSelectedItem.id);\n      this.view.requestMeasure({\n        key: this,\n        read: () => ({\n          sel: newSelectedItem.dom.getBoundingClientRect(),\n          panel: this.list.getBoundingClientRect()\n        }),\n        write: ({\n          sel,\n          panel\n        }) => {\n          let scaleY = panel.height / this.list.offsetHeight;\n          if (sel.top < panel.top) this.list.scrollTop -= (panel.top - sel.top) / scaleY;else if (sel.bottom > panel.bottom) this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;\n        }\n      });\n    } else if (this.selectedIndex < 0) {\n      this.list.removeAttribute(\"aria-activedescendant\");\n    }\n    if (needsSync) this.sync();\n  }\n  sync() {\n    let domPos = this.list.firstChild;\n    function rm() {\n      let prev = domPos;\n      domPos = prev.nextSibling;\n      prev.remove();\n    }\n    for (let item of this.items) {\n      if (item.dom.parentNode == this.list) {\n        while (domPos != item.dom) rm();\n        domPos = item.dom.nextSibling;\n      } else {\n        this.list.insertBefore(item.dom, domPos);\n      }\n    }\n    while (domPos) rm();\n  }\n  moveSelection(selectedIndex) {\n    if (this.selectedIndex < 0) return;\n    let field = this.view.state.field(lintState);\n    let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);\n    if (!selection) return;\n    this.view.dispatch({\n      selection: {\n        anchor: selection.from,\n        head: selection.to\n      },\n      scrollIntoView: true,\n      effects: movePanelSelection.of(selection)\n    });\n  }\n  static open(view) {\n    return new LintPanel(view);\n  }\n}\nfunction svg(content, attrs = `viewBox=\"0 0 40 40\"`) {\n  return `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ${attrs}>${encodeURIComponent(content)}</svg>')`;\n}\nfunction underline(color) {\n  return svg(`<path d=\"m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0\" stroke=\"${color}\" fill=\"none\" stroke-width=\".7\"/>`, `width=\"6\" height=\"3\"`);\n}\nconst baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.baseTheme({\n  \".cm-diagnostic\": {\n    padding: \"3px 6px 3px 8px\",\n    marginLeft: \"-1px\",\n    display: \"block\",\n    whiteSpace: \"pre-wrap\"\n  },\n  \".cm-diagnostic-error\": {\n    borderLeft: \"5px solid #d11\"\n  },\n  \".cm-diagnostic-warning\": {\n    borderLeft: \"5px solid orange\"\n  },\n  \".cm-diagnostic-info\": {\n    borderLeft: \"5px solid #999\"\n  },\n  \".cm-diagnostic-hint\": {\n    borderLeft: \"5px solid #66d\"\n  },\n  \".cm-diagnosticAction\": {\n    font: \"inherit\",\n    border: \"none\",\n    padding: \"2px 4px\",\n    backgroundColor: \"#444\",\n    color: \"white\",\n    borderRadius: \"3px\",\n    marginLeft: \"8px\",\n    cursor: \"pointer\"\n  },\n  \".cm-diagnosticSource\": {\n    fontSize: \"70%\",\n    opacity: .7\n  },\n  \".cm-lintRange\": {\n    backgroundPosition: \"left bottom\",\n    backgroundRepeat: \"repeat-x\",\n    paddingBottom: \"0.7px\"\n  },\n  \".cm-lintRange-error\": {\n    backgroundImage: /*@__PURE__*/underline(\"#d11\")\n  },\n  \".cm-lintRange-warning\": {\n    backgroundImage: /*@__PURE__*/underline(\"orange\")\n  },\n  \".cm-lintRange-info\": {\n    backgroundImage: /*@__PURE__*/underline(\"#999\")\n  },\n  \".cm-lintRange-hint\": {\n    backgroundImage: /*@__PURE__*/underline(\"#66d\")\n  },\n  \".cm-lintRange-active\": {\n    backgroundColor: \"#ffdd9980\"\n  },\n  \".cm-tooltip-lint\": {\n    padding: 0,\n    margin: 0\n  },\n  \".cm-lintPoint\": {\n    position: \"relative\",\n    \"&:after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      bottom: 0,\n      left: \"-2px\",\n      borderLeft: \"3px solid transparent\",\n      borderRight: \"3px solid transparent\",\n      borderBottom: \"4px solid #d11\"\n    }\n  },\n  \".cm-lintPoint-warning\": {\n    \"&:after\": {\n      borderBottomColor: \"orange\"\n    }\n  },\n  \".cm-lintPoint-info\": {\n    \"&:after\": {\n      borderBottomColor: \"#999\"\n    }\n  },\n  \".cm-lintPoint-hint\": {\n    \"&:after\": {\n      borderBottomColor: \"#66d\"\n    }\n  },\n  \".cm-panel.cm-panel-lint\": {\n    position: \"relative\",\n    \"& ul\": {\n      maxHeight: \"100px\",\n      overflowY: \"auto\",\n      \"& [aria-selected]\": {\n        backgroundColor: \"#ddd\",\n        \"& u\": {\n          textDecoration: \"underline\"\n        }\n      },\n      \"&:focus [aria-selected]\": {\n        background_fallback: \"#bdf\",\n        backgroundColor: \"Highlight\",\n        color_fallback: \"white\",\n        color: \"HighlightText\"\n      },\n      \"& u\": {\n        textDecoration: \"none\"\n      },\n      padding: 0,\n      margin: 0\n    },\n    \"& [name=close]\": {\n      position: \"absolute\",\n      top: \"0\",\n      right: \"2px\",\n      background: \"inherit\",\n      border: \"none\",\n      font: \"inherit\",\n      padding: 0,\n      margin: 0\n    }\n  }\n});\nfunction severityWeight(sev) {\n  return sev == \"error\" ? 4 : sev == \"warning\" ? 3 : sev == \"info\" ? 2 : 1;\n}\nfunction maxSeverity(diagnostics) {\n  let sev = \"hint\",\n    weight = 1;\n  for (let d of diagnostics) {\n    let w = severityWeight(d.severity);\n    if (w > weight) {\n      weight = w;\n      sev = d.severity;\n    }\n  }\n  return sev;\n}\nclass LintGutterMarker extends _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.GutterMarker {\n  constructor(diagnostics) {\n    super();\n    this.diagnostics = diagnostics;\n    this.severity = maxSeverity(diagnostics);\n  }\n  toDOM(view) {\n    let elt = document.createElement(\"div\");\n    elt.className = \"cm-lint-marker cm-lint-marker-\" + this.severity;\n    let diagnostics = this.diagnostics;\n    let diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;\n    if (diagnosticsFilter) diagnostics = diagnosticsFilter(diagnostics, view.state);\n    if (diagnostics.length) elt.onmouseover = () => gutterMarkerMouseOver(view, elt, diagnostics);\n    return elt;\n  }\n}\nfunction trackHoverOn(view, marker) {\n  let mousemove = event => {\n    let rect = marker.getBoundingClientRect();\n    if (event.clientX > rect.left - 10 /* Hover.Margin */ && event.clientX < rect.right + 10 /* Hover.Margin */ && event.clientY > rect.top - 10 /* Hover.Margin */ && event.clientY < rect.bottom + 10 /* Hover.Margin */) return;\n    for (let target = event.target; target; target = target.parentNode) {\n      if (target.nodeType == 1 && target.classList.contains(\"cm-tooltip-lint\")) return;\n    }\n    window.removeEventListener(\"mousemove\", mousemove);\n    if (view.state.field(lintGutterTooltip)) view.dispatch({\n      effects: setLintGutterTooltip.of(null)\n    });\n  };\n  window.addEventListener(\"mousemove\", mousemove);\n}\nfunction gutterMarkerMouseOver(view, marker, diagnostics) {\n  function hovered() {\n    let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);\n    const linePos = view.coordsAtPos(line.from);\n    if (linePos) {\n      view.dispatch({\n        effects: setLintGutterTooltip.of({\n          pos: line.from,\n          above: false,\n          clip: false,\n          create() {\n            return {\n              dom: diagnosticsTooltip(view, diagnostics),\n              getCoords: () => marker.getBoundingClientRect()\n            };\n          }\n        })\n      });\n    }\n    marker.onmouseout = marker.onmousemove = null;\n    trackHoverOn(view, marker);\n  }\n  let {\n    hoverTime\n  } = view.state.facet(lintGutterConfig);\n  let hoverTimeout = setTimeout(hovered, hoverTime);\n  marker.onmouseout = () => {\n    clearTimeout(hoverTimeout);\n    marker.onmouseout = marker.onmousemove = null;\n  };\n  marker.onmousemove = () => {\n    clearTimeout(hoverTimeout);\n    hoverTimeout = setTimeout(hovered, hoverTime);\n  };\n}\nfunction markersForDiagnostics(doc, diagnostics) {\n  let byLine = Object.create(null);\n  for (let diagnostic of diagnostics) {\n    let line = doc.lineAt(diagnostic.from);\n    (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);\n  }\n  let markers = [];\n  for (let line in byLine) {\n    markers.push(new LintGutterMarker(byLine[line]).range(+line));\n  }\n  return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.RangeSet.of(markers, true);\n}\nconst lintGutterExtension = /*@__PURE__*/(0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.gutter)({\n  class: \"cm-gutter-lint\",\n  markers: view => view.state.field(lintGutterMarkers),\n  widgetMarker: (view, widget, block) => {\n    let diagnostics = [];\n    view.state.field(lintGutterMarkers).between(block.from, block.to, (from, to, value) => {\n      if (from > block.from && from < block.to) diagnostics.push(...value.diagnostics);\n    });\n    return diagnostics.length ? new LintGutterMarker(diagnostics) : null;\n  }\n});\nconst lintGutterMarkers = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\n  create() {\n    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.RangeSet.empty;\n  },\n  update(markers, tr) {\n    markers = markers.map(tr.changes);\n    let diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;\n    for (let effect of tr.effects) {\n      if (effect.is(setDiagnosticsEffect)) {\n        let diagnostics = effect.value;\n        if (diagnosticFilter) diagnostics = diagnosticFilter(diagnostics || [], tr.state);\n        markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));\n      }\n    }\n    return markers;\n  }\n});\nconst setLintGutterTooltip = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\nconst lintGutterTooltip = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\n  create() {\n    return null;\n  },\n  update(tooltip, tr) {\n    if (tooltip && tr.docChanged) tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), {\n      pos: tr.changes.mapPos(tooltip.pos)\n    });\n    return tr.effects.reduce((t, e) => e.is(setLintGutterTooltip) ? e.value : t, tooltip);\n  },\n  provide: field => _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.showTooltip.from(field)\n});\nconst lintGutterTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.baseTheme({\n  \".cm-gutter-lint\": {\n    width: \"1.4em\",\n    \"& .cm-gutterElement\": {\n      padding: \".2em\"\n    }\n  },\n  \".cm-lint-marker\": {\n    width: \"1em\",\n    height: \"1em\"\n  },\n  \".cm-lint-marker-info\": {\n    content: /*@__PURE__*/svg(`<path fill=\"#aaf\" stroke=\"#77e\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M5 5L35 5L35 35L5 35Z\"/>`)\n  },\n  \".cm-lint-marker-warning\": {\n    content: /*@__PURE__*/svg(`<path fill=\"#fe8\" stroke=\"#fd7\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M20 6L37 35L3 35Z\"/>`)\n  },\n  \".cm-lint-marker-error\": {\n    content: /*@__PURE__*/svg(`<circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"#f87\" stroke=\"#f43\" stroke-width=\"6\"/>`)\n  }\n});\nconst lintExtensions = [lintState, /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.decorations.compute([lintState], state => {\n  let {\n    selected,\n    panel\n  } = state.field(lintState);\n  return !selected || !panel || selected.from == selected.to ? _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.none : _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.set([activeMark.range(selected.from, selected.to)]);\n}), /*@__PURE__*/(0,_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.hoverTooltip)(lintTooltip, {\n  hideOn: hideTooltip\n}), baseTheme];\nconst lintGutterConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\n  combine(configs) {\n    return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.combineConfig)(configs, {\n      hoverTime: 300 /* Hover.Time */,\n      markerFilter: null,\n      tooltipFilter: null\n    });\n  }\n});\n/**\nReturns an extension that installs a gutter showing markers for\neach line that has diagnostics, which can be hovered over to see\nthe diagnostics.\n*/\nfunction lintGutter(config = {}) {\n  return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];\n}\n/**\nIterate over the marked diagnostics for the given editor state,\ncalling `f` for each of them. Note that, if the document changed\nsince the diagnostics were created, the `Diagnostic` object will\nhold the original outdated position, whereas the `to` and `from`\narguments hold the diagnostic's current position.\n*/\nfunction forEachDiagnostic(state, f) {\n  let lState = state.field(lintState, false);\n  if (lState && lState.diagnostics.size) {\n    let pending = [],\n      pendingStart = [],\n      lastEnd = -1;\n    for (let iter = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.RangeSet.iter([lState.diagnostics]);; iter.next()) {\n      for (let i = 0; i < pending.length; i++) if (!iter.value || iter.value.spec.diagnostics.indexOf(pending[i]) < 0) {\n        f(pending[i], pendingStart[i], lastEnd);\n        pending.splice(i, 1);\n        pendingStart.splice(i--, 1);\n      }\n      if (!iter.value) break;\n      for (let d of iter.value.spec.diagnostics) if (pending.indexOf(d) < 0) {\n        pending.push(d);\n        pendingStart.push(iter.from);\n      }\n      lastEnd = iter.to;\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@codemirror/lint/dist/index.js\n");

/***/ }),

/***/ "../../node_modules/crelt/index.js":
/*!*****************************************!*\
  !*** ../../node_modules/crelt/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ crelt)\n/* harmony export */ });\nfunction crelt() {\n  var elt = arguments[0];\n  if (typeof elt == \"string\") elt = document.createElement(elt);\n  var i = 1,\n    next = arguments[1];\n  if (next && typeof next == \"object\" && next.nodeType == null && !Array.isArray(next)) {\n    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {\n      var value = next[name];\n      if (typeof value == \"string\") elt.setAttribute(name, value);else if (value != null) elt[name] = value;\n    }\n    i++;\n  }\n  for (; i < arguments.length; i++) add(elt, arguments[i]);\n  return elt;\n}\nfunction add(elt, child) {\n  if (typeof child == \"string\") {\n    elt.appendChild(document.createTextNode(child));\n  } else if (child == null) {} else if (child.nodeType != null) {\n    elt.appendChild(child);\n  } else if (Array.isArray(child)) {\n    for (var i = 0; i < child.length; i++) add(elt, child[i]);\n  } else {\n    throw new RangeError(\"Unsupported child node: \" + child);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2NyZWx0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZSxTQUFTQSxLQUFLQSxDQUFBLEVBQUc7RUFDOUIsSUFBSUMsR0FBRyxHQUFHQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0VBQ3RCLElBQUksT0FBT0QsR0FBRyxJQUFJLFFBQVEsRUFBRUEsR0FBRyxHQUFHRSxRQUFRLENBQUNDLGFBQWEsQ0FBQ0gsR0FBRyxDQUFDO0VBQzdELElBQUlJLENBQUMsR0FBRyxDQUFDO0lBQUVDLElBQUksR0FBR0osU0FBUyxDQUFDLENBQUMsQ0FBQztFQUM5QixJQUFJSSxJQUFJLElBQUksT0FBT0EsSUFBSSxJQUFJLFFBQVEsSUFBSUEsSUFBSSxDQUFDQyxRQUFRLElBQUksSUFBSSxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDSCxJQUFJLENBQUMsRUFBRTtJQUNwRixLQUFLLElBQUlJLElBQUksSUFBSUosSUFBSSxFQUFFLElBQUlLLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1IsSUFBSSxFQUFFSSxJQUFJLENBQUMsRUFBRTtNQUMzRSxJQUFJSyxLQUFLLEdBQUdULElBQUksQ0FBQ0ksSUFBSSxDQUFDO01BQ3RCLElBQUksT0FBT0ssS0FBSyxJQUFJLFFBQVEsRUFBRWQsR0FBRyxDQUFDZSxZQUFZLENBQUNOLElBQUksRUFBRUssS0FBSyxDQUFDLE1BQ3RELElBQUlBLEtBQUssSUFBSSxJQUFJLEVBQUVkLEdBQUcsQ0FBQ1MsSUFBSSxDQUFDLEdBQUdLLEtBQUs7SUFDM0M7SUFDQVYsQ0FBQyxFQUFFO0VBQ0w7RUFDQSxPQUFPQSxDQUFDLEdBQUdILFNBQVMsQ0FBQ2UsTUFBTSxFQUFFWixDQUFDLEVBQUUsRUFBRWEsR0FBRyxDQUFDakIsR0FBRyxFQUFFQyxTQUFTLENBQUNHLENBQUMsQ0FBQyxDQUFDO0VBQ3hELE9BQU9KLEdBQUc7QUFDWjtBQUVBLFNBQVNpQixHQUFHQSxDQUFDakIsR0FBRyxFQUFFa0IsS0FBSyxFQUFFO0VBQ3ZCLElBQUksT0FBT0EsS0FBSyxJQUFJLFFBQVEsRUFBRTtJQUM1QmxCLEdBQUcsQ0FBQ21CLFdBQVcsQ0FBQ2pCLFFBQVEsQ0FBQ2tCLGNBQWMsQ0FBQ0YsS0FBSyxDQUFDLENBQUM7RUFDakQsQ0FBQyxNQUFNLElBQUlBLEtBQUssSUFBSSxJQUFJLEVBQUUsQ0FDMUIsQ0FBQyxNQUFNLElBQUlBLEtBQUssQ0FBQ1osUUFBUSxJQUFJLElBQUksRUFBRTtJQUNqQ04sR0FBRyxDQUFDbUIsV0FBVyxDQUFDRCxLQUFLLENBQUM7RUFDeEIsQ0FBQyxNQUFNLElBQUlYLEtBQUssQ0FBQ0MsT0FBTyxDQUFDVSxLQUFLLENBQUMsRUFBRTtJQUMvQixLQUFLLElBQUlkLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR2MsS0FBSyxDQUFDRixNQUFNLEVBQUVaLENBQUMsRUFBRSxFQUFFYSxHQUFHLENBQUNqQixHQUFHLEVBQUVrQixLQUFLLENBQUNkLENBQUMsQ0FBQyxDQUFDO0VBQzNELENBQUMsTUFBTTtJQUNMLE1BQU0sSUFBSWlCLFVBQVUsQ0FBQywwQkFBMEIsR0FBR0gsS0FBSyxDQUFDO0VBQzFEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yaWRnZS1jb2RlbWlycm9yLy4uLy4uL25vZGVfbW9kdWxlcy9jcmVsdC9pbmRleC5qcz8wMmFmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWx0KCkge1xuICB2YXIgZWx0ID0gYXJndW1lbnRzWzBdXG4gIGlmICh0eXBlb2YgZWx0ID09IFwic3RyaW5nXCIpIGVsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWx0KVxuICB2YXIgaSA9IDEsIG5leHQgPSBhcmd1bWVudHNbMV1cbiAgaWYgKG5leHQgJiYgdHlwZW9mIG5leHQgPT0gXCJvYmplY3RcIiAmJiBuZXh0Lm5vZGVUeXBlID09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkobmV4dCkpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIG5leHQpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobmV4dCwgbmFtZSkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG5leHRbbmFtZV1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikgZWx0LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSlcbiAgICAgIGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIGVsdFtuYW1lXSA9IHZhbHVlXG4gICAgfVxuICAgIGkrK1xuICB9XG4gIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhZGQoZWx0LCBhcmd1bWVudHNbaV0pXG4gIHJldHVybiBlbHRcbn1cblxuZnVuY3Rpb24gYWRkKGVsdCwgY2hpbGQpIHtcbiAgaWYgKHR5cGVvZiBjaGlsZCA9PSBcInN0cmluZ1wiKSB7XG4gICAgZWx0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNoaWxkKSlcbiAgfSBlbHNlIGlmIChjaGlsZCA9PSBudWxsKSB7XG4gIH0gZWxzZSBpZiAoY2hpbGQubm9kZVR5cGUgIT0gbnVsbCkge1xuICAgIGVsdC5hcHBlbmRDaGlsZChjaGlsZClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNoaWxkKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGQubGVuZ3RoOyBpKyspIGFkZChlbHQsIGNoaWxkW2ldKVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVW5zdXBwb3J0ZWQgY2hpbGQgbm9kZTogXCIgKyBjaGlsZClcbiAgfVxufVxuIl0sIm5hbWVzIjpbImNyZWx0IiwiZWx0IiwiYXJndW1lbnRzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaSIsIm5leHQiLCJub2RlVHlwZSIsIkFycmF5IiwiaXNBcnJheSIsIm5hbWUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsInNldEF0dHJpYnV0ZSIsImxlbmd0aCIsImFkZCIsImNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIlJhbmdlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/crelt/index.js\n");

/***/ })

}]);